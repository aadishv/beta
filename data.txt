./LICENSE
---
MIT License

Copyright (c) 2025 Aadish Verma

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


---
./README.md
---
# aadishv.github.io

Aadish's personal website, made with 🩷+💻 :D. Basic tech stack:

- Astro + TailwindCSS (static site generation + SSR)
- React (for the client-side periodic table)
- Github Pages (hosting)

**Sections**

- Home
- Blog
- Projects
- Tools
  - Periodic table
  - LaTeX to image tool

**Todos (for Aadish)**

- Chinese
  - [ ] Add the friggin data!!! [essential]
  - [ ] Write help article [less important]
  * Done:
  - [x] Add footer with the following: help, clear localstorage, skip, bug/feature report, show history
  - [x] Deliver the _massive design_ everyone has been waiting for
  - [x] Add sentence flow
  - [x] Add sentence details
  - [x] Implement conflict resolution
  - [x] Organize into files
  - [x] File structure
    - [x] Get basic component structure down
    - [x] Reorganize chinese, periodic using new structure


---
./astro.config.mjs
---
import { defineConfig } from "astro/config";
import react from "@astrojs/react";
import tailwind from "@astrojs/tailwind";

export default defineConfig({
  site: "https://aadishv.github.io",
  base: "/",
  integrations: [
    react(),
    tailwind()
  ],
  vite: {
    css: {
      preprocessorOptions: {
        less: {
          // Add support for node_modules imports in LESS files
          javascriptEnabled: true,
          math: 'always',
          paths: ['node_modules']
        }
      }
    },
    resolve: {
      alias: {
        // This will help resolve the tilde imports
        '~@': '/node_modules/@'
      }
    }
  }
});

---
./bun.lock
---
{
  "lockfileVersion": 1,
  "workspaces": {
    "": {
      "name": "aadishv.github.io",
      "dependencies": {
        "@ai-sdk/google": "^1.2.14",
        "@astrojs/prefetch": "^0.4.1",
        "@astrojs/react": "^4.2.1",
        "@astrojs/tailwind": "^5.1.3",
        "@google/genai": "^0.12.0",
        "@google/generative-ai": "^0.24.1",
        "@radix-ui/react-accordion": "^1.2.8",
        "@radix-ui/react-dialog": "^1.1.11",
        "@radix-ui/react-slot": "^1.2.0",
        "@radix-ui/react-switch": "^1.2.2",
        "@radix-ui/react-tabs": "^1.1.9",
        "@types/node": "^22.15.3",
        "@types/react": "^19.0.12",
        "@types/react-dom": "^19.0.4",
        "@xstate/store": "^3.4.1",
        "@yaireo/relative-time": "^1.0.5",
        "ai": "^4.3.13",
        "class-variance-authority": "^0.7.1",
        "clsx": "^2.1.1",
        "date-fns": "^2.28.0",
        "fuse.js": "^7.1.0",
        "hanzi-writer": "^3.7.2",
        "katex": "^0.16.22",
        "lucide-react": "^0.503.0",
        "openai": "^4.97.0",
        "react": "^19.0.0",
        "react-confetti": "^6.4.0",
        "react-dom": "^19.0.0",
        "react-icons": "^5.5.0",
        "react-markdown": "^10.1.0",
        "react-modal": "^3.16.3",
        "react-mosaic-component": "^6.1.1",
        "react-use": "^17.6.0",
        "rehype-katex": "^7.0.1",
        "remark-math": "^6.0.0",
        "tailwind-merge": "^3.2.0",
      },
      "devDependencies": {
        "@tailwindcss/typography": "^0.5.2",
        "astro": "^5.7.10",
        "autoprefixer": "^10.4.13",
        "less": "^4.3.0",
        "postcss": "^8.4.20",
        "prettier": "^3.4.2",
        "prettier-plugin-astro": "0.14.1",
        "prettier-plugin-tailwindcss": "0.6.9",
        "tailwindcss": "^3.3.3",
        "tailwindcss-animate": "^1.0.7",
      },
    },
  },
  "packages": {
    "@ai-sdk/google": ["@ai-sdk/google@1.2.14", "", { "dependencies": { "@ai-sdk/provider": "1.1.3", "@ai-sdk/provider-utils": "2.2.7" }, "peerDependencies": { "zod": "^3.0.0" } }, "sha512-r3FSyyWl0KVjUlKn5o+vMl+Nk8Z/mV6xrqW+49g7fMoRVr/wkRxJZtHorrdDGRreCJubZyAk8ziSQSLpgv2H6w=="],

    "@ai-sdk/provider": ["@ai-sdk/provider@1.1.3", "", { "dependencies": { "json-schema": "^0.4.0" } }, "sha512-qZMxYJ0qqX/RfnuIaab+zp8UAeJn/ygXXAffR5I4N0n1IrvA6qBsjc8hXLmBiMV2zoXlifkacF7sEFnYnjBcqg=="],

    "@ai-sdk/provider-utils": ["@ai-sdk/provider-utils@2.2.7", "", { "dependencies": { "@ai-sdk/provider": "1.1.3", "nanoid": "^3.3.8", "secure-json-parse": "^2.7.0" }, "peerDependencies": { "zod": "^3.23.8" } }, "sha512-kM0xS3GWg3aMChh9zfeM+80vEZfXzR3JEUBdycZLtbRZ2TRT8xOj3WodGHPb06sUK5yD7pAXC/P7ctsi2fvUGQ=="],

    "@ai-sdk/react": ["@ai-sdk/react@1.2.11", "", { "dependencies": { "@ai-sdk/provider-utils": "2.2.7", "@ai-sdk/ui-utils": "1.2.10", "swr": "^2.2.5", "throttleit": "2.1.0" }, "peerDependencies": { "react": "^18 || ^19 || ^19.0.0-rc", "zod": "^3.23.8" }, "optionalPeers": ["zod"] }, "sha512-+kPqLkJ3TWP6czaJPV+vzAKSUcKQ1598BUrcLHt56sH99+LhmIIW3ylZp0OfC3O6TR3eO1Lt0Yzw4R0mK6g9Gw=="],

    "@ai-sdk/ui-utils": ["@ai-sdk/ui-utils@1.2.10", "", { "dependencies": { "@ai-sdk/provider": "1.1.3", "@ai-sdk/provider-utils": "2.2.7", "zod-to-json-schema": "^3.24.1" }, "peerDependencies": { "zod": "^3.23.8" } }, "sha512-GUj+LBoAlRQF1dL/M49jtufGqtLOMApxTpCmVjoRpIPt/dFALVL9RfqfvxwztyIwbK+IxGzcYjSGRsrWrj+86g=="],

    "@alloc/quick-lru": ["@alloc/quick-lru@5.2.0", "", {}, ""],

    "@ampproject/remapping": ["@ampproject/remapping@2.3.0", "", { "dependencies": { "@jridgewell/gen-mapping": "^0.3.5", "@jridgewell/trace-mapping": "^0.3.24" } }, "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw=="],

    "@astrojs/compiler": ["@astrojs/compiler@2.11.0", "", {}, ""],

    "@astrojs/internal-helpers": ["@astrojs/internal-helpers@0.6.1", "", {}, ""],

    "@astrojs/markdown-remark": ["@astrojs/markdown-remark@6.3.1", "", { "dependencies": { "@astrojs/internal-helpers": "0.6.1", "@astrojs/prism": "3.2.0", "github-slugger": "^2.0.0", "hast-util-from-html": "^2.0.3", "hast-util-to-text": "^4.0.2", "import-meta-resolve": "^4.1.0", "js-yaml": "^4.1.0", "mdast-util-definitions": "^6.0.0", "rehype-raw": "^7.0.0", "rehype-stringify": "^10.0.1", "remark-gfm": "^4.0.1", "remark-parse": "^11.0.0", "remark-rehype": "^11.1.1", "remark-smartypants": "^3.0.2", "shiki": "^3.0.0", "smol-toml": "^1.3.1", "unified": "^11.0.5", "unist-util-remove-position": "^5.0.0", "unist-util-visit": "^5.0.0", "unist-util-visit-parents": "^6.0.1", "vfile": "^6.0.3" } }, "sha512-c5F5gGrkczUaTVgmMW9g1YMJGzOtRvjjhw6IfGuxarM6ct09MpwysP10US729dy07gg8y+ofVifezvP3BNsWZg=="],

    "@astrojs/prefetch": ["@astrojs/prefetch@0.4.1", "", { "dependencies": { "throttles": "^1.0.1" } }, ""],

    "@astrojs/prism": ["@astrojs/prism@3.2.0", "", { "dependencies": { "prismjs": "^1.29.0" } }, ""],

    "@astrojs/react": ["@astrojs/react@4.2.1", "", { "dependencies": { "@vitejs/plugin-react": "^4.3.4", "ultrahtml": "^1.5.3", "vite": "^6.2.0" }, "peerDependencies": { "@types/react": "^17.0.50 || ^18.0.21 || ^19.0.0", "@types/react-dom": "^17.0.17 || ^18.0.6 || ^19.0.0", "react": "^17.0.2 || ^18.0.0 || ^19.0.0", "react-dom": "^17.0.2 || ^18.0.0 || ^19.0.0" } }, "sha512-g0P6zxG7RPHNcbmMB15dJJ83+ApBVFBcgnf6BnMz/PVXM150Pa1vYKeuTcWhERqLNgmpI2uXuch5MecIhrUlqQ=="],

    "@astrojs/tailwind": ["@astrojs/tailwind@5.1.5", "", { "dependencies": { "autoprefixer": "^10.4.20", "postcss": "^8.5.1", "postcss-load-config": "^4.0.2" }, "peerDependencies": { "astro": "^3.0.0 || ^4.0.0 || ^5.0.0", "tailwindcss": "^3.0.24" } }, ""],

    "@astrojs/telemetry": ["@astrojs/telemetry@3.2.1", "", { "dependencies": { "ci-info": "^4.2.0", "debug": "^4.4.0", "dlv": "^1.1.3", "dset": "^3.1.4", "is-docker": "^3.0.0", "is-wsl": "^3.1.0", "which-pm-runs": "^1.1.0" } }, "sha512-SSVM820Jqc6wjsn7qYfV9qfeQvePtVc1nSofhyap7l0/iakUKywj3hfy3UJAOV4sGV4Q/u450RD4AaCaFvNPlg=="],

    "@babel/code-frame": ["@babel/code-frame@7.26.2", "", { "dependencies": { "@babel/helper-validator-identifier": "^7.25.9", "js-tokens": "^4.0.0", "picocolors": "^1.0.0" } }, "sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ=="],

    "@babel/compat-data": ["@babel/compat-data@7.26.8", "", {}, "sha512-oH5UPLMWR3L2wEFLnFJ1TZXqHufiTKAiLfqw5zkhS4dKXLJ10yVztfil/twG8EDTA4F/tvVNw9nOl4ZMslB8rQ=="],

    "@babel/core": ["@babel/core@7.26.10", "", { "dependencies": { "@ampproject/remapping": "^2.2.0", "@babel/code-frame": "^7.26.2", "@babel/generator": "^7.26.10", "@babel/helper-compilation-targets": "^7.26.5", "@babel/helper-module-transforms": "^7.26.0", "@babel/helpers": "^7.26.10", "@babel/parser": "^7.26.10", "@babel/template": "^7.26.9", "@babel/traverse": "^7.26.10", "@babel/types": "^7.26.10", "convert-source-map": "^2.0.0", "debug": "^4.1.0", "gensync": "^1.0.0-beta.2", "json5": "^2.2.3", "semver": "^6.3.1" } }, "sha512-vMqyb7XCDMPvJFFOaT9kxtiRh42GwlZEg1/uIgtZshS5a/8OaduUfCi7kynKgc3Tw/6Uo2D+db9qBttghhmxwQ=="],

    "@babel/generator": ["@babel/generator@7.26.10", "", { "dependencies": { "@babel/parser": "^7.26.10", "@babel/types": "^7.26.10", "@jridgewell/gen-mapping": "^0.3.5", "@jridgewell/trace-mapping": "^0.3.25", "jsesc": "^3.0.2" } }, "sha512-rRHT8siFIXQrAYOYqZQVsAr8vJ+cBNqcVAY6m5V8/4QqzaPl+zDBe6cLEPRDuNOUf3ww8RfJVlOyQMoSI+5Ang=="],

    "@babel/helper-compilation-targets": ["@babel/helper-compilation-targets@7.26.5", "", { "dependencies": { "@babel/compat-data": "^7.26.5", "@babel/helper-validator-option": "^7.25.9", "browserslist": "^4.24.0", "lru-cache": "^5.1.1", "semver": "^6.3.1" } }, "sha512-IXuyn5EkouFJscIDuFF5EsiSolseme1s0CZB+QxVugqJLYmKdxI1VfIBOst0SUu4rnk2Z7kqTwmoO1lp3HIfnA=="],

    "@babel/helper-module-imports": ["@babel/helper-module-imports@7.25.9", "", { "dependencies": { "@babel/traverse": "^7.25.9", "@babel/types": "^7.25.9" } }, "sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw=="],

    "@babel/helper-module-transforms": ["@babel/helper-module-transforms@7.26.0", "", { "dependencies": { "@babel/helper-module-imports": "^7.25.9", "@babel/helper-validator-identifier": "^7.25.9", "@babel/traverse": "^7.25.9" }, "peerDependencies": { "@babel/core": "^7.0.0" } }, "sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw=="],

    "@babel/helper-plugin-utils": ["@babel/helper-plugin-utils@7.26.5", "", {}, "sha512-RS+jZcRdZdRFzMyr+wcsaqOmld1/EqTghfaBGQQd/WnRdzdlvSZ//kF7U8VQTxf1ynZ4cjUcYgjVGx13ewNPMg=="],

    "@babel/helper-string-parser": ["@babel/helper-string-parser@7.25.9", "", {}, ""],

    "@babel/helper-validator-identifier": ["@babel/helper-validator-identifier@7.25.9", "", {}, ""],

    "@babel/helper-validator-option": ["@babel/helper-validator-option@7.25.9", "", {}, "sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw=="],

    "@babel/helpers": ["@babel/helpers@7.26.10", "", { "dependencies": { "@babel/template": "^7.26.9", "@babel/types": "^7.26.10" } }, "sha512-UPYc3SauzZ3JGgj87GgZ89JVdC5dj0AoetR5Bw6wj4niittNyFh6+eOGonYvJ1ao6B8lEa3Q3klS7ADZ53bc5g=="],

    "@babel/parser": ["@babel/parser@7.26.10", "", { "dependencies": { "@babel/types": "^7.26.10" }, "bin": { "parser": "bin/babel-parser.js" } }, ""],

    "@babel/plugin-transform-react-jsx-self": ["@babel/plugin-transform-react-jsx-self@7.25.9", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.25.9" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-y8quW6p0WHkEhmErnfe58r7x0A70uKphQm8Sp8cV7tjNQwK56sNVK0M73LK3WuYmsuyrftut4xAkjjgU0twaMg=="],

    "@babel/plugin-transform-react-jsx-source": ["@babel/plugin-transform-react-jsx-source@7.25.9", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.25.9" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-+iqjT8xmXhhYv4/uiYd8FNQsraMFZIfxVSqxxVSZP0WbbSAWvBXAul0m/zu+7Vv4O/3WtApy9pmaTMiumEZgfg=="],

    "@babel/runtime": ["@babel/runtime@7.26.10", "", { "dependencies": { "regenerator-runtime": "^0.14.0" } }, ""],

    "@babel/template": ["@babel/template@7.26.9", "", { "dependencies": { "@babel/code-frame": "^7.26.2", "@babel/parser": "^7.26.9", "@babel/types": "^7.26.9" } }, "sha512-qyRplbeIpNZhmzOysF/wFMuP9sctmh2cFzRAZOn1YapxBsE1i9bJIY586R/WBLfLcmcBlM8ROBiQURnnNy+zfA=="],

    "@babel/traverse": ["@babel/traverse@7.26.10", "", { "dependencies": { "@babel/code-frame": "^7.26.2", "@babel/generator": "^7.26.10", "@babel/parser": "^7.26.10", "@babel/template": "^7.26.9", "@babel/types": "^7.26.10", "debug": "^4.3.1", "globals": "^11.1.0" } }, "sha512-k8NuDrxr0WrPH5Aupqb2LCVURP/S0vBEn5mK6iH+GIYob66U5EtoZvcdudR2jQ4cmTwhEwW1DLB+Yyas9zjF6A=="],

    "@babel/types": ["@babel/types@7.26.10", "", { "dependencies": { "@babel/helper-string-parser": "^7.25.9", "@babel/helper-validator-identifier": "^7.25.9" } }, ""],

    "@capsizecss/unpack": ["@capsizecss/unpack@2.4.0", "", { "dependencies": { "blob-to-buffer": "^1.2.8", "cross-fetch": "^3.0.4", "fontkit": "^2.0.2" } }, "sha512-GrSU71meACqcmIUxPYOJvGKF0yryjN/L1aCuE9DViCTJI7bfkjgYDPD1zbNDcINJwSSP6UaBZY9GAbYDO7re0Q=="],

    "@esbuild/darwin-x64": ["@esbuild/darwin-x64@0.25.1", "", { "os": "darwin", "cpu": "x64" }, ""],

    "@google/genai": ["@google/genai@0.12.0", "", { "dependencies": { "google-auth-library": "^9.14.2", "ws": "^8.18.0", "zod": "^3.22.4", "zod-to-json-schema": "^3.22.4" } }, "sha512-SJtCHac+HPgmwELpJpPKbaV4rk397bS2D42XgFR2NBEARDKd/79RcaRUFFd55pYUJ+gfaz9Bv6KYoiz/P6eZKA=="],

    "@google/generative-ai": ["@google/generative-ai@0.24.1", "", {}, "sha512-MqO+MLfM6kjxcKoy0p1wRzG3b4ZZXtPI+z2IE26UogS2Cm/XHO+7gGRBh6gcJsOiIVoH93UwKvW4HdgiOZCy9Q=="],

    "@img/sharp-darwin-x64": ["@img/sharp-darwin-x64@0.33.5", "", { "optionalDependencies": { "@img/sharp-libvips-darwin-x64": "1.0.4" }, "os": "darwin", "cpu": "x64" }, ""],

    "@img/sharp-libvips-darwin-x64": ["@img/sharp-libvips-darwin-x64@1.0.4", "", { "os": "darwin", "cpu": "x64" }, ""],

    "@isaacs/cliui": ["@isaacs/cliui@8.0.2", "", { "dependencies": { "string-width": "^5.1.2", "string-width-cjs": "npm:string-width@^4.2.0", "strip-ansi": "^7.0.1", "strip-ansi-cjs": "npm:strip-ansi@^6.0.1", "wrap-ansi": "^8.1.0", "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0" } }, ""],

    "@jridgewell/gen-mapping": ["@jridgewell/gen-mapping@0.3.8", "", { "dependencies": { "@jridgewell/set-array": "^1.2.1", "@jridgewell/sourcemap-codec": "^1.4.10", "@jridgewell/trace-mapping": "^0.3.24" } }, ""],

    "@jridgewell/resolve-uri": ["@jridgewell/resolve-uri@3.1.2", "", {}, ""],

    "@jridgewell/set-array": ["@jridgewell/set-array@1.2.1", "", {}, ""],

    "@jridgewell/sourcemap-codec": ["@jridgewell/sourcemap-codec@1.5.0", "", {}, ""],

    "@jridgewell/trace-mapping": ["@jridgewell/trace-mapping@0.3.25", "", { "dependencies": { "@jridgewell/resolve-uri": "^3.1.0", "@jridgewell/sourcemap-codec": "^1.4.14" } }, ""],

    "@nodelib/fs.scandir": ["@nodelib/fs.scandir@2.1.5", "", { "dependencies": { "@nodelib/fs.stat": "2.0.5", "run-parallel": "^1.1.9" } }, ""],

    "@nodelib/fs.stat": ["@nodelib/fs.stat@2.0.5", "", {}, ""],

    "@nodelib/fs.walk": ["@nodelib/fs.walk@1.2.8", "", { "dependencies": { "@nodelib/fs.scandir": "2.1.5", "fastq": "^1.6.0" } }, ""],

    "@opentelemetry/api": ["@opentelemetry/api@1.9.0", "", {}, "sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg=="],

    "@oslojs/encoding": ["@oslojs/encoding@1.1.0", "", {}, ""],

    "@pkgjs/parseargs": ["@pkgjs/parseargs@0.11.0", "", {}, ""],

    "@radix-ui/primitive": ["@radix-ui/primitive@1.1.2", "", {}, "sha512-XnbHrrprsNqZKQhStrSwgRUQzoCI1glLzdw79xiZPoofhGICeZRSQ3dIxAKH1gb3OHfNf4d6f+vAv3kil2eggA=="],

    "@radix-ui/react-accordion": ["@radix-ui/react-accordion@1.2.8", "", { "dependencies": { "@radix-ui/primitive": "1.1.2", "@radix-ui/react-collapsible": "1.1.8", "@radix-ui/react-collection": "1.1.4", "@radix-ui/react-compose-refs": "1.1.2", "@radix-ui/react-context": "1.1.2", "@radix-ui/react-direction": "1.1.1", "@radix-ui/react-id": "1.1.1", "@radix-ui/react-primitive": "2.1.0", "@radix-ui/react-use-controllable-state": "1.2.2" }, "peerDependencies": { "@types/react": "*", "@types/react-dom": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc", "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react", "@types/react-dom"] }, "sha512-c7OKBvO36PfQIUGIjj1Wko0hH937pYFU2tR5zbIJDUsmTzHoZVHHt4bmb7OOJbzTaWJtVELKWojBHa7OcnUHmQ=="],

    "@radix-ui/react-collapsible": ["@radix-ui/react-collapsible@1.1.8", "", { "dependencies": { "@radix-ui/primitive": "1.1.2", "@radix-ui/react-compose-refs": "1.1.2", "@radix-ui/react-context": "1.1.2", "@radix-ui/react-id": "1.1.1", "@radix-ui/react-presence": "1.1.4", "@radix-ui/react-primitive": "2.1.0", "@radix-ui/react-use-controllable-state": "1.2.2", "@radix-ui/react-use-layout-effect": "1.1.1" }, "peerDependencies": { "@types/react": "*", "@types/react-dom": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc", "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react", "@types/react-dom"] }, "sha512-hxEsLvK9WxIAPyxdDRULL4hcaSjMZCfP7fHB0Z1uUnDoDBat1Zh46hwYfa69DeZAbJrPckjf0AGAtEZyvDyJbw=="],

    "@radix-ui/react-collection": ["@radix-ui/react-collection@1.1.4", "", { "dependencies": { "@radix-ui/react-compose-refs": "1.1.2", "@radix-ui/react-context": "1.1.2", "@radix-ui/react-primitive": "2.1.0", "@radix-ui/react-slot": "1.2.0" }, "peerDependencies": { "@types/react": "*", "@types/react-dom": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc", "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react", "@types/react-dom"] }, "sha512-cv4vSf7HttqXilDnAnvINd53OTl1/bjUYVZrkFnA7nwmY9Ob2POUy0WY0sfqBAe1s5FyKsyceQlqiEGPYNTadg=="],

    "@radix-ui/react-compose-refs": ["@radix-ui/react-compose-refs@1.1.2", "", { "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-z4eqJvfiNnFMHIIvXP3CY57y2WJs5g2v3X0zm9mEJkrkNv4rDxu+sg9Jh8EkXyeqBkB7SOcboo9dMVqhyrACIg=="],

    "@radix-ui/react-context": ["@radix-ui/react-context@1.1.2", "", { "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-jCi/QKUM2r1Ju5a3J64TH2A5SpKAgh0LpknyqdQ4m6DCV0xJ2HG1xARRwNGPQfi1SLdLWZ1OJz6F4OMBBNiGJA=="],

    "@radix-ui/react-dialog": ["@radix-ui/react-dialog@1.1.11", "", { "dependencies": { "@radix-ui/primitive": "1.1.2", "@radix-ui/react-compose-refs": "1.1.2", "@radix-ui/react-context": "1.1.2", "@radix-ui/react-dismissable-layer": "1.1.7", "@radix-ui/react-focus-guards": "1.1.2", "@radix-ui/react-focus-scope": "1.1.4", "@radix-ui/react-id": "1.1.1", "@radix-ui/react-portal": "1.1.6", "@radix-ui/react-presence": "1.1.4", "@radix-ui/react-primitive": "2.1.0", "@radix-ui/react-slot": "1.2.0", "@radix-ui/react-use-controllable-state": "1.2.2", "aria-hidden": "^1.2.4", "react-remove-scroll": "^2.6.3" }, "peerDependencies": { "@types/react": "*", "@types/react-dom": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc", "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react", "@types/react-dom"] }, "sha512-yI7S1ipkP5/+99qhSI6nthfo/tR6bL6Zgxi/+1UO6qPa6UeM6nlafWcQ65vB4rU2XjgjMfMhI3k9Y5MztA62VQ=="],

    "@radix-ui/react-direction": ["@radix-ui/react-direction@1.1.1", "", { "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-1UEWRX6jnOA2y4H5WczZ44gOOjTEmlqv1uNW4GAJEO5+bauCBhv8snY65Iw5/VOS/ghKN9gr2KjnLKxrsvoMVw=="],

    "@radix-ui/react-dismissable-layer": ["@radix-ui/react-dismissable-layer@1.1.7", "", { "dependencies": { "@radix-ui/primitive": "1.1.2", "@radix-ui/react-compose-refs": "1.1.2", "@radix-ui/react-primitive": "2.1.0", "@radix-ui/react-use-callback-ref": "1.1.1", "@radix-ui/react-use-escape-keydown": "1.1.1" }, "peerDependencies": { "@types/react": "*", "@types/react-dom": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc", "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react", "@types/react-dom"] }, "sha512-j5+WBUdhccJsmH5/H0K6RncjDtoALSEr6jbkaZu+bjw6hOPOhHycr6vEUujl+HBK8kjUfWcoCJXxP6e4lUlMZw=="],

    "@radix-ui/react-focus-guards": ["@radix-ui/react-focus-guards@1.1.2", "", { "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-fyjAACV62oPV925xFCrH8DR5xWhg9KYtJT4s3u54jxp+L/hbpTY2kIeEFFbFe+a/HCE94zGQMZLIpVTPVZDhaA=="],

    "@radix-ui/react-focus-scope": ["@radix-ui/react-focus-scope@1.1.4", "", { "dependencies": { "@radix-ui/react-compose-refs": "1.1.2", "@radix-ui/react-primitive": "2.1.0", "@radix-ui/react-use-callback-ref": "1.1.1" }, "peerDependencies": { "@types/react": "*", "@types/react-dom": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc", "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react", "@types/react-dom"] }, "sha512-r2annK27lIW5w9Ho5NyQgqs0MmgZSTIKXWpVCJaLC1q2kZrZkcqnmHkCHMEmv8XLvsLlurKMPT+kbKkRkm/xVA=="],

    "@radix-ui/react-id": ["@radix-ui/react-id@1.1.1", "", { "dependencies": { "@radix-ui/react-use-layout-effect": "1.1.1" }, "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-kGkGegYIdQsOb4XjsfM97rXsiHaBwco+hFI66oO4s9LU+PLAC5oJ7khdOVFxkhsmlbpUqDAvXw11CluXP+jkHg=="],

    "@radix-ui/react-portal": ["@radix-ui/react-portal@1.1.6", "", { "dependencies": { "@radix-ui/react-primitive": "2.1.0", "@radix-ui/react-use-layout-effect": "1.1.1" }, "peerDependencies": { "@types/react": "*", "@types/react-dom": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc", "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react", "@types/react-dom"] }, "sha512-XmsIl2z1n/TsYFLIdYam2rmFwf9OC/Sh2avkbmVMDuBZIe7hSpM0cYnWPAo7nHOVx8zTuwDZGByfcqLdnzp3Vw=="],

    "@radix-ui/react-presence": ["@radix-ui/react-presence@1.1.4", "", { "dependencies": { "@radix-ui/react-compose-refs": "1.1.2", "@radix-ui/react-use-layout-effect": "1.1.1" }, "peerDependencies": { "@types/react": "*", "@types/react-dom": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc", "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react", "@types/react-dom"] }, "sha512-ueDqRbdc4/bkaQT3GIpLQssRlFgWaL/U2z/S31qRwwLWoxHLgry3SIfCwhxeQNbirEUXFa+lq3RL3oBYXtcmIA=="],

    "@radix-ui/react-primitive": ["@radix-ui/react-primitive@2.1.0", "", { "dependencies": { "@radix-ui/react-slot": "1.2.0" }, "peerDependencies": { "@types/react": "*", "@types/react-dom": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc", "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react", "@types/react-dom"] }, "sha512-/J/FhLdK0zVcILOwt5g+dH4KnkonCtkVJsa2G6JmvbbtZfBEI1gMsO3QMjseL4F/SwfAMt1Vc/0XKYKq+xJ1sw=="],

    "@radix-ui/react-roving-focus": ["@radix-ui/react-roving-focus@1.1.7", "", { "dependencies": { "@radix-ui/primitive": "1.1.2", "@radix-ui/react-collection": "1.1.4", "@radix-ui/react-compose-refs": "1.1.2", "@radix-ui/react-context": "1.1.2", "@radix-ui/react-direction": "1.1.1", "@radix-ui/react-id": "1.1.1", "@radix-ui/react-primitive": "2.1.0", "@radix-ui/react-use-callback-ref": "1.1.1", "@radix-ui/react-use-controllable-state": "1.2.2" }, "peerDependencies": { "@types/react": "*", "@types/react-dom": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc", "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react", "@types/react-dom"] }, "sha512-C6oAg451/fQT3EGbWHbCQjYTtbyjNO1uzQgMzwyivcHT3GKNEmu1q3UuREhN+HzHAVtv3ivMVK08QlC+PkYw9Q=="],

    "@radix-ui/react-slot": ["@radix-ui/react-slot@1.2.0", "", { "dependencies": { "@radix-ui/react-compose-refs": "1.1.2" }, "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-ujc+V6r0HNDviYqIK3rW4ffgYiZ8g5DEHrGJVk4x7kTlLXRDILnKX9vAUYeIsLOoDpDJ0ujpqMkjH4w2ofuo6w=="],

    "@radix-ui/react-switch": ["@radix-ui/react-switch@1.2.2", "", { "dependencies": { "@radix-ui/primitive": "1.1.2", "@radix-ui/react-compose-refs": "1.1.2", "@radix-ui/react-context": "1.1.2", "@radix-ui/react-primitive": "2.1.0", "@radix-ui/react-use-controllable-state": "1.2.2", "@radix-ui/react-use-previous": "1.1.1", "@radix-ui/react-use-size": "1.1.1" }, "peerDependencies": { "@types/react": "*", "@types/react-dom": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc", "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react", "@types/react-dom"] }, "sha512-7Z8n6L+ifMIIYZ83f28qWSceUpkXuslI2FJ34+kDMTiyj91ENdpdQ7VCidrzj5JfwfZTeano/BnGBbu/jqa5rQ=="],

    "@radix-ui/react-tabs": ["@radix-ui/react-tabs@1.1.9", "", { "dependencies": { "@radix-ui/primitive": "1.1.2", "@radix-ui/react-context": "1.1.2", "@radix-ui/react-direction": "1.1.1", "@radix-ui/react-id": "1.1.1", "@radix-ui/react-presence": "1.1.4", "@radix-ui/react-primitive": "2.1.0", "@radix-ui/react-roving-focus": "1.1.7", "@radix-ui/react-use-controllable-state": "1.2.2" }, "peerDependencies": { "@types/react": "*", "@types/react-dom": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc", "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react", "@types/react-dom"] }, "sha512-KIjtwciYvquiW/wAFkELZCVnaNLBsYNhTNcvl+zfMAbMhRkcvNuCLXDDd22L0j7tagpzVh/QwbFpwAATg7ILPw=="],

    "@radix-ui/react-use-callback-ref": ["@radix-ui/react-use-callback-ref@1.1.1", "", { "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-FkBMwD+qbGQeMu1cOHnuGB6x4yzPjho8ap5WtbEJ26umhgqVXbhekKUQO+hZEL1vU92a3wHwdp0HAcqAUF5iDg=="],

    "@radix-ui/react-use-controllable-state": ["@radix-ui/react-use-controllable-state@1.2.2", "", { "dependencies": { "@radix-ui/react-use-effect-event": "0.0.2", "@radix-ui/react-use-layout-effect": "1.1.1" }, "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-BjasUjixPFdS+NKkypcyyN5Pmg83Olst0+c6vGov0diwTEo6mgdqVR6hxcEgFuh4QrAs7Rc+9KuGJ9TVCj0Zzg=="],

    "@radix-ui/react-use-effect-event": ["@radix-ui/react-use-effect-event@0.0.2", "", { "dependencies": { "@radix-ui/react-use-layout-effect": "1.1.1" }, "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-Qp8WbZOBe+blgpuUT+lw2xheLP8q0oatc9UpmiemEICxGvFLYmHm9QowVZGHtJlGbS6A6yJ3iViad/2cVjnOiA=="],

    "@radix-ui/react-use-escape-keydown": ["@radix-ui/react-use-escape-keydown@1.1.1", "", { "dependencies": { "@radix-ui/react-use-callback-ref": "1.1.1" }, "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-Il0+boE7w/XebUHyBjroE+DbByORGR9KKmITzbR7MyQ4akpORYP/ZmbhAr0DG7RmmBqoOnZdy2QlvajJ2QA59g=="],

    "@radix-ui/react-use-layout-effect": ["@radix-ui/react-use-layout-effect@1.1.1", "", { "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-RbJRS4UWQFkzHTTwVymMTUv8EqYhOp8dOOviLj2ugtTiXRaRQS7GLGxZTLL1jWhMeoSCf5zmcZkqTl9IiYfXcQ=="],

    "@radix-ui/react-use-previous": ["@radix-ui/react-use-previous@1.1.1", "", { "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-2dHfToCj/pzca2Ck724OZ5L0EVrr3eHRNsG/b3xQJLA2hZpVCS99bLAX+hm1IHXDEnzU6by5z/5MIY794/a8NQ=="],

    "@radix-ui/react-use-size": ["@radix-ui/react-use-size@1.1.1", "", { "dependencies": { "@radix-ui/react-use-layout-effect": "1.1.1" }, "peerDependencies": { "@types/react": "*", "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-ewrXRDTAqAXlkl6t/fkXWNAhFX9I+CkKlw6zjEwk86RSPKwZr3xpBRso655aqYafwtnbpHLj6toFzmd6xdVptQ=="],

    "@react-dnd/asap": ["@react-dnd/asap@5.0.2", "", {}, "sha512-WLyfoHvxhs0V9U+GTsGilGgf2QsPl6ZZ44fnv0/b8T3nQyvzxidxsg/ZltbWssbsRDlYW8UKSQMTGotuTotZ6A=="],

    "@react-dnd/invariant": ["@react-dnd/invariant@4.0.2", "", {}, "sha512-xKCTqAK/FFauOM9Ta2pswIyT3D8AQlfrYdOi/toTPEhqCuAs1v5tcJ3Y08Izh1cJ5Jchwy9SeAXmMg6zrKs2iw=="],

    "@react-dnd/shallowequal": ["@react-dnd/shallowequal@4.0.2", "", {}, "sha512-/RVXdLvJxLg4QKvMoM5WlwNR9ViO9z8B/qPcc+C0Sa/teJY7QG7kJ441DwzOjMYEY7GmU4dj5EcGHIkKZiQZCA=="],

    "@rollup/pluginutils": ["@rollup/pluginutils@5.1.4", "", { "dependencies": { "@types/estree": "^1.0.0", "estree-walker": "^2.0.2", "picomatch": "^4.0.2" }, "peerDependencies": { "rollup": "^1.20.0||^2.0.0||^3.0.0||^4.0.0" } }, ""],

    "@rollup/rollup-darwin-x64": ["@rollup/rollup-darwin-x64@4.36.0", "", { "os": "darwin", "cpu": "x64" }, ""],

    "@shikijs/core": ["@shikijs/core@3.3.0", "", { "dependencies": { "@shikijs/types": "3.3.0", "@shikijs/vscode-textmate": "^10.0.2", "@types/hast": "^3.0.4", "hast-util-to-html": "^9.0.5" } }, "sha512-CovkFL2WVaHk6PCrwv6ctlmD4SS1qtIfN8yEyDXDYWh4ONvomdM9MaFw20qHuqJOcb8/xrkqoWQRJ//X10phOQ=="],

    "@shikijs/engine-javascript": ["@shikijs/engine-javascript@3.3.0", "", { "dependencies": { "@shikijs/types": "3.3.0", "@shikijs/vscode-textmate": "^10.0.2", "oniguruma-to-es": "^4.2.0" } }, "sha512-XlhnFGv0glq7pfsoN0KyBCz9FJU678LZdQ2LqlIdAj6JKsg5xpYKay3DkazXWExp3DTJJK9rMOuGzU2911pg7Q=="],

    "@shikijs/engine-oniguruma": ["@shikijs/engine-oniguruma@3.3.0", "", { "dependencies": { "@shikijs/types": "3.3.0", "@shikijs/vscode-textmate": "^10.0.2" } }, "sha512-l0vIw+GxeNU7uGnsu6B+Crpeqf+WTQ2Va71cHb5ZYWEVEPdfYwY5kXwYqRJwHrxz9WH+pjSpXQz+TJgAsrkA5A=="],

    "@shikijs/langs": ["@shikijs/langs@3.3.0", "", { "dependencies": { "@shikijs/types": "3.3.0" } }, "sha512-zt6Kf/7XpBQKSI9eqku+arLkAcDQ3NHJO6zFjiChI8w0Oz6Jjjay7pToottjQGjSDCFk++R85643WbyINcuL+g=="],

    "@shikijs/themes": ["@shikijs/themes@3.3.0", "", { "dependencies": { "@shikijs/types": "3.3.0" } }, "sha512-tXeCvLXBnqq34B0YZUEaAD1lD4lmN6TOHAhnHacj4Owh7Ptb/rf5XCDeROZt2rEOk5yuka3OOW2zLqClV7/SOg=="],

    "@shikijs/types": ["@shikijs/types@3.3.0", "", { "dependencies": { "@shikijs/vscode-textmate": "^10.0.2", "@types/hast": "^3.0.4" } }, "sha512-KPCGnHG6k06QG/2pnYGbFtFvpVJmC3uIpXrAiPrawETifujPBv0Se2oUxm5qYgjCvGJS9InKvjytOdN+bGuX+Q=="],

    "@shikijs/vscode-textmate": ["@shikijs/vscode-textmate@10.0.2", "", {}, ""],

    "@swc/helpers": ["@swc/helpers@0.5.17", "", { "dependencies": { "tslib": "^2.8.0" } }, "sha512-5IKx/Y13RsYd+sauPb2x+U/xZikHjolzfuDgTAl/Tdf3Q8rslRvC19NKDLgAJQ6wsqADk10ntlv08nPFw/gO/A=="],

    "@tailwindcss/typography": ["@tailwindcss/typography@0.5.16", "", { "dependencies": { "lodash.castarray": "^4.4.0", "lodash.isplainobject": "^4.0.6", "lodash.merge": "^4.6.2", "postcss-selector-parser": "6.0.10" }, "peerDependencies": { "tailwindcss": ">=3.0.0 || insiders || >=4.0.0-alpha.20 || >=4.0.0-beta.1" } }, ""],

    "@types/babel__core": ["@types/babel__core@7.20.5", "", { "dependencies": { "@babel/parser": "^7.20.7", "@babel/types": "^7.20.7", "@types/babel__generator": "*", "@types/babel__template": "*", "@types/babel__traverse": "*" } }, "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA=="],

    "@types/babel__generator": ["@types/babel__generator@7.6.8", "", { "dependencies": { "@babel/types": "^7.0.0" } }, "sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw=="],

    "@types/babel__template": ["@types/babel__template@7.4.4", "", { "dependencies": { "@babel/parser": "^7.1.0", "@babel/types": "^7.0.0" } }, "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A=="],

    "@types/babel__traverse": ["@types/babel__traverse@7.20.6", "", { "dependencies": { "@babel/types": "^7.20.7" } }, "sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg=="],

    "@types/debug": ["@types/debug@4.1.12", "", { "dependencies": { "@types/ms": "*" } }, ""],

    "@types/diff-match-patch": ["@types/diff-match-patch@1.0.36", "", {}, "sha512-xFdR6tkm0MWvBfO8xXCSsinYxHcqkQUlcHeSpMC2ukzOb6lwQAfDmW+Qt0AvlGd8HpsS28qKsB+oPeJn9I39jg=="],

    "@types/estree": ["@types/estree@1.0.6", "", {}, ""],

    "@types/estree-jsx": ["@types/estree-jsx@1.0.5", "", { "dependencies": { "@types/estree": "*" } }, "sha512-52CcUVNFyfb1A2ALocQw/Dd1BQFNmSdkuC3BkZ6iqhdMfQz7JWOFRuJFloOzjk+6WijU56m9oKXFAXc7o3Towg=="],

    "@types/hast": ["@types/hast@3.0.4", "", { "dependencies": { "@types/unist": "*" } }, ""],

    "@types/js-cookie": ["@types/js-cookie@2.2.7", "", {}, "sha512-aLkWa0C0vO5b4Sr798E26QgOkss68Un0bLjs7u9qxzPT5CG+8DuNTffWES58YzJs3hrVAOs1wonycqEBqNJubA=="],

    "@types/katex": ["@types/katex@0.16.7", "", {}, "sha512-HMwFiRujE5PjrgwHQ25+bsLJgowjGjm5Z8FVSf0N6PwgJrwxH0QxzHYDcKsTfV3wva0vzrpqMTJS2jXPr5BMEQ=="],

    "@types/mdast": ["@types/mdast@4.0.4", "", { "dependencies": { "@types/unist": "*" } }, ""],

    "@types/ms": ["@types/ms@2.1.0", "", {}, ""],

    "@types/nlcst": ["@types/nlcst@2.0.3", "", { "dependencies": { "@types/unist": "*" } }, ""],

    "@types/node": ["@types/node@22.15.3", "", { "dependencies": { "undici-types": "~6.21.0" } }, "sha512-lX7HFZeHf4QG/J7tBZqrCAXwz9J5RD56Y6MpP0eJkka8p+K0RY/yBTW7CYFJ4VGCclxqOLKmiGP5juQc6MKgcw=="],

    "@types/node-fetch": ["@types/node-fetch@2.6.12", "", { "dependencies": { "@types/node": "*", "form-data": "^4.0.0" } }, "sha512-8nneRWKCg3rMtF69nLQJnOYUcbafYeFSjqkw3jCRLsqkWFlHaoQrr5mXmofFGOx3DKn7UfmBMyov8ySvLRVldA=="],

    "@types/react": ["@types/react@19.0.12", "", { "dependencies": { "csstype": "^3.0.2" } }, "sha512-V6Ar115dBDrjbtXSrS+/Oruobc+qVbbUxDFC1RSbRqLt5SYvxxyIDrSC85RWml54g+jfNeEMZhEj7wW07ONQhA=="],

    "@types/react-dom": ["@types/react-dom@19.0.4", "", { "peerDependencies": { "@types/react": "^19.0.0" } }, "sha512-4fSQ8vWFkg+TGhePfUzVmaeC14TXYSsiiDSLI0dVLsrm9gZFABjPy/Qu6TKgl1tq1Bu1yDsuQgY3A3DOjCcgAA=="],

    "@types/unist": ["@types/unist@3.0.3", "", {}, ""],

    "@ungap/structured-clone": ["@ungap/structured-clone@1.3.0", "", {}, ""],

    "@vitejs/plugin-react": ["@vitejs/plugin-react@4.3.4", "", { "dependencies": { "@babel/core": "^7.26.0", "@babel/plugin-transform-react-jsx-self": "^7.25.9", "@babel/plugin-transform-react-jsx-source": "^7.25.9", "@types/babel__core": "^7.20.5", "react-refresh": "^0.14.2" }, "peerDependencies": { "vite": "^4.2.0 || ^5.0.0 || ^6.0.0" } }, "sha512-SCCPBJtYLdE8PX/7ZQAs1QAZ8Jqwih+0VBLum1EGqmCCQal+MIUqLCzj3ZUy8ufbC0cAM4LRlSTm7IQJwWT4ug=="],

    "@xobotyi/scrollbar-width": ["@xobotyi/scrollbar-width@1.9.5", "", {}, "sha512-N8tkAACJx2ww8vFMneJmaAgmjAG1tnVBZJRLRcx061tmsLRZHSEZSLuGWnwPtunsSLvSqXQ2wfp7Mgqg1I+2dQ=="],

    "@xstate/store": ["@xstate/store@3.4.1", "", { "peerDependencies": { "react": "^18.2.0 || ^19.0.0", "solid-js": "^1.7.6" }, "optionalPeers": ["solid-js"] }, "sha512-1nAbGGD45QYSe08eUDv/0dVFt0yOlfOJmmYGzw6e/hWQ92ih2cu6Jc6CimkBSFWzNIfQtaPvYhYCHP8GwNqrzw=="],

    "@yaireo/relative-time": ["@yaireo/relative-time@1.0.5", "", {}, "sha512-70+d5xRsX06cDVDn6WiV2qwWDSLrkLg8QsAQyeD+EiQeZga5EfwvvXrFcdDh2GI83QsnTJyHYxp58M1DMKurVQ=="],

    "abort-controller": ["abort-controller@3.0.0", "", { "dependencies": { "event-target-shim": "^5.0.0" } }, "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg=="],

    "acorn": ["acorn@8.14.1", "", { "bin": "bin/acorn" }, ""],

    "agent-base": ["agent-base@7.1.3", "", {}, "sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw=="],

    "agentkeepalive": ["agentkeepalive@4.6.0", "", { "dependencies": { "humanize-ms": "^1.2.1" } }, "sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ=="],

    "ai": ["ai@4.3.13", "", { "dependencies": { "@ai-sdk/provider": "1.1.3", "@ai-sdk/provider-utils": "2.2.7", "@ai-sdk/react": "1.2.11", "@ai-sdk/ui-utils": "1.2.10", "@opentelemetry/api": "1.9.0", "jsondiffpatch": "0.6.0" }, "peerDependencies": { "react": "^18 || ^19 || ^19.0.0-rc", "zod": "^3.23.8" }, "optionalPeers": ["react"] }, "sha512-cC5HXItuOwGykSMacCPzNp6+NMTxeuTjOenztVgSJhdC9Z4OrzBxwkyeDAf4h1QP938ZFi7IBdq3u4lxVoVmvw=="],

    "ansi-align": ["ansi-align@3.0.1", "", { "dependencies": { "string-width": "^4.1.0" } }, ""],

    "ansi-regex": ["ansi-regex@6.1.0", "", {}, ""],

    "ansi-styles": ["ansi-styles@6.2.1", "", {}, ""],

    "any-promise": ["any-promise@1.3.0", "", {}, ""],

    "anymatch": ["anymatch@3.1.3", "", { "dependencies": { "normalize-path": "^3.0.0", "picomatch": "^2.0.4" } }, ""],

    "arg": ["arg@5.0.2", "", {}, ""],

    "argparse": ["argparse@2.0.1", "", {}, ""],

    "aria-hidden": ["aria-hidden@1.2.4", "", { "dependencies": { "tslib": "^2.0.0" } }, "sha512-y+CcFFwelSXpLZk/7fMB2mUbGtX9lKycf1MWJ7CaTIERyitVlyQx6C+sxcROU2BAJ24OiZyK+8wj2i8AlBoS3A=="],

    "aria-query": ["aria-query@5.3.2", "", {}, ""],

    "array-iterate": ["array-iterate@2.0.1", "", {}, ""],

    "astro": ["astro@5.7.10", "", { "dependencies": { "@astrojs/compiler": "^2.11.0", "@astrojs/internal-helpers": "0.6.1", "@astrojs/markdown-remark": "6.3.1", "@astrojs/telemetry": "3.2.1", "@capsizecss/unpack": "^2.4.0", "@oslojs/encoding": "^1.1.0", "@rollup/pluginutils": "^5.1.4", "acorn": "^8.14.1", "aria-query": "^5.3.2", "axobject-query": "^4.1.0", "boxen": "8.0.1", "ci-info": "^4.2.0", "clsx": "^2.1.1", "common-ancestor-path": "^1.0.1", "cookie": "^1.0.2", "cssesc": "^3.0.0", "debug": "^4.4.0", "deterministic-object-hash": "^2.0.2", "devalue": "^5.1.1", "diff": "^5.2.0", "dlv": "^1.1.3", "dset": "^3.1.4", "es-module-lexer": "^1.6.0", "esbuild": "^0.25.0", "estree-walker": "^3.0.3", "flattie": "^1.1.1", "github-slugger": "^2.0.0", "html-escaper": "3.0.3", "http-cache-semantics": "^4.1.1", "js-yaml": "^4.1.0", "kleur": "^4.1.5", "magic-string": "^0.30.17", "magicast": "^0.3.5", "mrmime": "^2.0.1", "neotraverse": "^0.6.18", "p-limit": "^6.2.0", "p-queue": "^8.1.0", "package-manager-detector": "^1.1.0", "picomatch": "^4.0.2", "prompts": "^2.4.2", "rehype": "^13.0.2", "semver": "^7.7.1", "shiki": "^3.2.1", "tinyexec": "^0.3.2", "tinyglobby": "^0.2.12", "tsconfck": "^3.1.5", "ultrahtml": "^1.6.0", "unifont": "~0.4.1", "unist-util-visit": "^5.0.0", "unstorage": "^1.15.0", "vfile": "^6.0.3", "vite": "^6.3.4", "vitefu": "^1.0.6", "xxhash-wasm": "^1.1.0", "yargs-parser": "^21.1.1", "yocto-spinner": "^0.2.1", "zod": "^3.24.2", "zod-to-json-schema": "^3.24.5", "zod-to-ts": "^1.2.0" }, "optionalDependencies": { "sharp": "^0.33.3" }, "bin": { "astro": "astro.js" } }, "sha512-9TQcFZqP2w6//JXXUHfw8/5PX7KUx9EkG5O3m+hISuyeUztvjY1q5+p7+C5HiXyg24Zs3KkpieoL5BGRXGCAGA=="],

    "asynckit": ["asynckit@0.4.0", "", {}, "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="],

    "autoprefixer": ["autoprefixer@10.4.21", "", { "dependencies": { "browserslist": "^4.24.4", "caniuse-lite": "^1.0.30001702", "fraction.js": "^4.3.7", "normalize-range": "^0.1.2", "picocolors": "^1.1.1", "postcss-value-parser": "^4.2.0" }, "peerDependencies": { "postcss": "^8.1.0" }, "bin": "bin/autoprefixer" }, ""],

    "axobject-query": ["axobject-query@4.1.0", "", {}, ""],

    "bail": ["bail@2.0.2", "", {}, ""],

    "balanced-match": ["balanced-match@1.0.2", "", {}, ""],

    "base-64": ["base-64@1.0.0", "", {}, ""],

    "base64-js": ["base64-js@1.5.1", "", {}, "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA=="],

    "bignumber.js": ["bignumber.js@9.3.0", "", {}, "sha512-EM7aMFTXbptt/wZdMlBv2t8IViwQL+h6SLHosp8Yf0dqJMTnY6iL32opnAB6kAdL0SZPuvcAzFr31o0c/R3/RA=="],

    "binary-extensions": ["binary-extensions@2.3.0", "", {}, ""],

    "blob-to-buffer": ["blob-to-buffer@1.2.9", "", {}, "sha512-BF033y5fN6OCofD3vgHmNtwZWRcq9NLyyxyILx9hfMy1sXYy4ojFl765hJ2lP0YaN2fuxPaLO2Vzzoxy0FLFFA=="],

    "boxen": ["boxen@8.0.1", "", { "dependencies": { "ansi-align": "^3.0.1", "camelcase": "^8.0.0", "chalk": "^5.3.0", "cli-boxes": "^3.0.0", "string-width": "^7.2.0", "type-fest": "^4.21.0", "widest-line": "^5.0.0", "wrap-ansi": "^9.0.0" } }, ""],

    "brace-expansion": ["brace-expansion@2.0.1", "", { "dependencies": { "balanced-match": "^1.0.0" } }, ""],

    "braces": ["braces@3.0.3", "", { "dependencies": { "fill-range": "^7.1.1" } }, ""],

    "brotli": ["brotli@1.3.3", "", { "dependencies": { "base64-js": "^1.1.2" } }, "sha512-oTKjJdShmDuGW94SyyaoQvAjf30dZaHnjJ8uAF+u2/vGJkJbJPJAT1gDiOJP5v1Zb6f9KEyW/1HpuaWIXtGHPg=="],

    "browserslist": ["browserslist@4.24.4", "", { "dependencies": { "caniuse-lite": "^1.0.30001688", "electron-to-chromium": "^1.5.73", "node-releases": "^2.0.19", "update-browserslist-db": "^1.1.1" }, "bin": "cli.js" }, ""],

    "buffer-equal-constant-time": ["buffer-equal-constant-time@1.0.1", "", {}, "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="],

    "call-bind-apply-helpers": ["call-bind-apply-helpers@1.0.2", "", { "dependencies": { "es-errors": "^1.3.0", "function-bind": "^1.1.2" } }, "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ=="],

    "camelcase": ["camelcase@8.0.0", "", {}, ""],

    "camelcase-css": ["camelcase-css@2.0.1", "", {}, ""],

    "caniuse-lite": ["caniuse-lite@1.0.30001705", "", {}, ""],

    "ccount": ["ccount@2.0.1", "", {}, ""],

    "chalk": ["chalk@5.4.1", "", {}, ""],

    "character-entities": ["character-entities@2.0.2", "", {}, ""],

    "character-entities-html4": ["character-entities-html4@2.1.0", "", {}, ""],

    "character-entities-legacy": ["character-entities-legacy@3.0.0", "", {}, ""],

    "character-reference-invalid": ["character-reference-invalid@2.0.1", "", {}, "sha512-iBZ4F4wRbyORVsu0jPV7gXkOsGYjGHPmAyv+HiHG8gi5PtC9KI2j1+v8/tlibRvjoWX027ypmG/n0HtO5t7unw=="],

    "chokidar": ["chokidar@3.6.0", "", { "dependencies": { "anymatch": "~3.1.2", "braces": "~3.0.2", "glob-parent": "~5.1.2", "is-binary-path": "~2.1.0", "is-glob": "~4.0.1", "normalize-path": "~3.0.0", "readdirp": "~3.6.0" }, "optionalDependencies": { "fsevents": "~2.3.2" } }, ""],

    "ci-info": ["ci-info@4.2.0", "", {}, ""],

    "class-variance-authority": ["class-variance-authority@0.7.1", "", { "dependencies": { "clsx": "^2.1.1" } }, "sha512-Ka+9Trutv7G8M6WT6SeiRWz792K5qEqIGEGzXKhAE6xOWAY6pPH8U+9IY3oCMv6kqTmLsv7Xh/2w2RigkePMsg=="],

    "classnames": ["classnames@2.5.1", "", {}, "sha512-saHYOzhIQs6wy2sVxTM6bUDsQO4F50V9RQ22qBpEdCW+I+/Wmke2HOl6lS6dTpdxVhb88/I6+Hs+438c3lfUow=="],

    "cli-boxes": ["cli-boxes@3.0.0", "", {}, ""],

    "clone": ["clone@2.1.2", "", {}, "sha512-3Pe/CF1Nn94hyhIYpjtiLhdCoEoz0DqQ+988E9gmeEdQZlojxnOb74wctFyuwWQHzqyf9X7C7MG8juUpqBJT8w=="],

    "clsx": ["clsx@2.1.1", "", {}, ""],

    "color": ["color@4.2.3", "", { "dependencies": { "color-convert": "^2.0.1", "color-string": "^1.9.0" } }, ""],

    "color-convert": ["color-convert@2.0.1", "", { "dependencies": { "color-name": "~1.1.4" } }, ""],

    "color-name": ["color-name@1.1.4", "", {}, ""],

    "color-string": ["color-string@1.9.1", "", { "dependencies": { "color-name": "^1.0.0", "simple-swizzle": "^0.2.2" } }, ""],

    "combined-stream": ["combined-stream@1.0.8", "", { "dependencies": { "delayed-stream": "~1.0.0" } }, "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg=="],

    "comma-separated-tokens": ["comma-separated-tokens@2.0.3", "", {}, ""],

    "commander": ["commander@8.3.0", "", {}, "sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww=="],

    "common-ancestor-path": ["common-ancestor-path@1.0.1", "", {}, ""],

    "convert-source-map": ["convert-source-map@2.0.0", "", {}, "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg=="],

    "cookie": ["cookie@1.0.2", "", {}, "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA=="],

    "cookie-es": ["cookie-es@1.2.2", "", {}, ""],

    "copy-anything": ["copy-anything@2.0.6", "", { "dependencies": { "is-what": "^3.14.1" } }, "sha512-1j20GZTsvKNkc4BY3NpMOM8tt///wY3FpIzozTOFO2ffuZcV61nojHXVKIy3WM+7ADCy5FVhdZYHYDdgTU0yJw=="],

    "copy-to-clipboard": ["copy-to-clipboard@3.3.3", "", { "dependencies": { "toggle-selection": "^1.0.6" } }, "sha512-2KV8NhB5JqC3ky0r9PMCAZKbUHSwtEo4CwCs0KXgruG43gX5PMqDEBbVU4OUzw2MuAWUfsuFmWvEKG5QRfSnJA=="],

    "cross-fetch": ["cross-fetch@3.2.0", "", { "dependencies": { "node-fetch": "^2.7.0" } }, "sha512-Q+xVJLoGOeIMXZmbUK4HYk+69cQH6LudR0Vu/pRm2YlU/hDV9CiS0gKUMaWY5f2NeUH9C1nV3bsTlCo0FsTV1Q=="],

    "cross-spawn": ["cross-spawn@7.0.6", "", { "dependencies": { "path-key": "^3.1.0", "shebang-command": "^2.0.0", "which": "^2.0.1" } }, ""],

    "crossws": ["crossws@0.3.4", "", { "dependencies": { "uncrypto": "^0.1.3" } }, ""],

    "css-in-js-utils": ["css-in-js-utils@3.1.0", "", { "dependencies": { "hyphenate-style-name": "^1.0.3" } }, "sha512-fJAcud6B3rRu+KHYk+Bwf+WFL2MDCJJ1XG9x137tJQ0xYxor7XziQtuGFbWNdqrvF4Tk26O3H73nfVqXt/fW1A=="],

    "css-tree": ["css-tree@3.1.0", "", { "dependencies": { "mdn-data": "2.12.2", "source-map-js": "^1.0.1" } }, "sha512-0eW44TGN5SQXU1mWSkKwFstI/22X2bG1nYzZTYMAWjylYURhse752YgbE4Cx46AC+bAvI+/dYTPRk1LqSUnu6w=="],

    "cssesc": ["cssesc@3.0.0", "", { "bin": "bin/cssesc" }, ""],

    "csstype": ["csstype@3.1.3", "", {}, "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw=="],

    "date-fns": ["date-fns@2.30.0", "", { "dependencies": { "@babel/runtime": "^7.21.0" } }, ""],

    "debug": ["debug@4.4.0", "", { "dependencies": { "ms": "^2.1.3" } }, ""],

    "decode-named-character-reference": ["decode-named-character-reference@1.1.0", "", { "dependencies": { "character-entities": "^2.0.0" } }, ""],

    "defu": ["defu@6.1.4", "", {}, ""],

    "delayed-stream": ["delayed-stream@1.0.0", "", {}, "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ=="],

    "dequal": ["dequal@2.0.3", "", {}, ""],

    "destr": ["destr@2.0.3", "", {}, ""],

    "detect-libc": ["detect-libc@2.0.3", "", {}, ""],

    "detect-node-es": ["detect-node-es@1.1.0", "", {}, "sha512-ypdmJU/TbBby2Dxibuv7ZLW3Bs1QEmM7nHjEANfohJLvE0XVujisn1qPJcZxg+qDucsr+bP6fLD1rPS3AhJ7EQ=="],

    "deterministic-object-hash": ["deterministic-object-hash@2.0.2", "", { "dependencies": { "base-64": "^1.0.0" } }, ""],

    "devalue": ["devalue@5.1.1", "", {}, ""],

    "devlop": ["devlop@1.1.0", "", { "dependencies": { "dequal": "^2.0.0" } }, ""],

    "dfa": ["dfa@1.2.0", "", {}, "sha512-ED3jP8saaweFTjeGX8HQPjeC1YYyZs98jGNZx6IiBvxW7JG5v492kamAQB3m2wop07CvU/RQmzcKr6bgcC5D/Q=="],

    "didyoumean": ["didyoumean@1.2.2", "", {}, ""],

    "diff": ["diff@5.2.0", "", {}, ""],

    "diff-match-patch": ["diff-match-patch@1.0.5", "", {}, "sha512-IayShXAgj/QMXgB0IWmKx+rOPuGMhqm5w6jvFxmVenXKIzRqTAAsbBPT3kWQeGANj3jGgvcvv4yK6SxqYmikgw=="],

    "dlv": ["dlv@1.1.3", "", {}, ""],

    "dnd-core": ["dnd-core@16.0.1", "", { "dependencies": { "@react-dnd/asap": "^5.0.1", "@react-dnd/invariant": "^4.0.1", "redux": "^4.2.0" } }, "sha512-HK294sl7tbw6F6IeuK16YSBUoorvHpY8RHO+9yFfaJyCDVb6n7PRcezrOEOa2SBCqiYpemh5Jx20ZcjKdFAVng=="],

    "dnd-multi-backend": ["dnd-multi-backend@8.1.2", "", { "peerDependencies": { "dnd-core": "^16.0.1" } }, "sha512-KPDVEsiM+6gNEegqZYTWJQgJxYV4vB91tUrvoKJjaS0wwWqT/jNU0P7xJAwCue/cbasJNvk2dFZH7tC+bjX1Rg=="],

    "dset": ["dset@3.1.4", "", {}, ""],

    "dunder-proto": ["dunder-proto@1.0.1", "", { "dependencies": { "call-bind-apply-helpers": "^1.0.1", "es-errors": "^1.3.0", "gopd": "^1.2.0" } }, "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A=="],

    "eastasianwidth": ["eastasianwidth@0.2.0", "", {}, ""],

    "ecdsa-sig-formatter": ["ecdsa-sig-formatter@1.0.11", "", { "dependencies": { "safe-buffer": "^5.0.1" } }, "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ=="],

    "electron-to-chromium": ["electron-to-chromium@1.5.120", "", {}, ""],

    "emoji-regex": ["emoji-regex@10.4.0", "", {}, ""],

    "entities": ["entities@4.5.0", "", {}, ""],

    "errno": ["errno@0.1.8", "", { "dependencies": { "prr": "~1.0.1" }, "bin": { "errno": "cli.js" } }, "sha512-dJ6oBr5SQ1VSd9qkk7ByRgb/1SH4JZjCHSW/mr63/QcXO9zLVxvJ6Oy13nio03rxpSnVDDjFor75SjVeZWPW/A=="],

    "error-stack-parser": ["error-stack-parser@2.1.4", "", { "dependencies": { "stackframe": "^1.3.4" } }, "sha512-Sk5V6wVazPhq5MhpO+AUxJn5x7XSXGl1R93Vn7i+zS15KDVxQijejNCrz8340/2bgLBjR9GtEG8ZVKONDjcqGQ=="],

    "es-define-property": ["es-define-property@1.0.1", "", {}, "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g=="],

    "es-errors": ["es-errors@1.3.0", "", {}, "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw=="],

    "es-module-lexer": ["es-module-lexer@1.6.0", "", {}, ""],

    "es-object-atoms": ["es-object-atoms@1.1.1", "", { "dependencies": { "es-errors": "^1.3.0" } }, "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA=="],

    "es-set-tostringtag": ["es-set-tostringtag@2.1.0", "", { "dependencies": { "es-errors": "^1.3.0", "get-intrinsic": "^1.2.6", "has-tostringtag": "^1.0.2", "hasown": "^2.0.2" } }, "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA=="],

    "esbuild": ["esbuild@0.25.1", "", { "optionalDependencies": { "@esbuild/darwin-x64": "0.25.1" }, "bin": "bin/esbuild" }, ""],

    "escalade": ["escalade@3.2.0", "", {}, ""],

    "escape-string-regexp": ["escape-string-regexp@5.0.0", "", {}, ""],

    "estree-util-is-identifier-name": ["estree-util-is-identifier-name@3.0.0", "", {}, "sha512-hFtqIDZTIUZ9BXLb8y4pYGyk6+wekIivNVTcmvk8NoOh+VeRn5y6cEHzbURrWbfp1fIqdVipilzj+lfaadNZmg=="],

    "estree-walker": ["estree-walker@3.0.3", "", { "dependencies": { "@types/estree": "^1.0.0" } }, ""],

    "event-target-shim": ["event-target-shim@5.0.1", "", {}, "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ=="],

    "eventemitter3": ["eventemitter3@5.0.1", "", {}, ""],

    "exenv": ["exenv@1.2.2", "", {}, "sha512-Z+ktTxTwv9ILfgKCk32OX3n/doe+OcLTRtqK9pcL+JsP3J1/VW8Uvl4ZjLlKqeW4rzK4oesDOGMEMRIZqtP4Iw=="],

    "extend": ["extend@3.0.2", "", {}, ""],

    "fast-deep-equal": ["fast-deep-equal@3.1.3", "", {}, "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q=="],

    "fast-glob": ["fast-glob@3.3.3", "", { "dependencies": { "@nodelib/fs.stat": "^2.0.2", "@nodelib/fs.walk": "^1.2.3", "glob-parent": "^5.1.2", "merge2": "^1.3.0", "micromatch": "^4.0.8" } }, ""],

    "fast-shallow-equal": ["fast-shallow-equal@1.0.0", "", {}, "sha512-HPtaa38cPgWvaCFmRNhlc6NG7pv6NUHqjPgVAkWGoB9mQMwYB27/K0CvOM5Czy+qpT3e8XJ6Q4aPAnzpNpzNaw=="],

    "fastest-stable-stringify": ["fastest-stable-stringify@2.0.2", "", {}, "sha512-bijHueCGd0LqqNK9b5oCMHc0MluJAx0cwqASgbWMvkO01lCYgIhacVRLcaDz3QnyYIRNJRDwMb41VuT6pHJ91Q=="],

    "fastq": ["fastq@1.19.1", "", { "dependencies": { "reusify": "^1.0.4" } }, ""],

    "fdir": ["fdir@6.4.3", "", { "peerDependencies": { "picomatch": "^3 || ^4" } }, ""],

    "fill-range": ["fill-range@7.1.1", "", { "dependencies": { "to-regex-range": "^5.0.1" } }, ""],

    "flattie": ["flattie@1.1.1", "", {}, ""],

    "fontkit": ["fontkit@2.0.4", "", { "dependencies": { "@swc/helpers": "^0.5.12", "brotli": "^1.3.2", "clone": "^2.1.2", "dfa": "^1.2.0", "fast-deep-equal": "^3.1.3", "restructure": "^3.0.0", "tiny-inflate": "^1.0.3", "unicode-properties": "^1.4.0", "unicode-trie": "^2.0.0" } }, "sha512-syetQadaUEDNdxdugga9CpEYVaQIxOwk7GlwZWWZ19//qW4zE5bknOKeMBDYAASwnpaSHKJITRLMF9m1fp3s6g=="],

    "foreground-child": ["foreground-child@3.3.1", "", { "dependencies": { "cross-spawn": "^7.0.6", "signal-exit": "^4.0.1" } }, ""],

    "form-data": ["form-data@4.0.2", "", { "dependencies": { "asynckit": "^0.4.0", "combined-stream": "^1.0.8", "es-set-tostringtag": "^2.1.0", "mime-types": "^2.1.12" } }, "sha512-hGfm/slu0ZabnNt4oaRZ6uREyfCj6P4fT/n6A1rGV+Z0VdGXjfOhVUpkn6qVQONHGIFwmveGXyDs75+nr6FM8w=="],

    "form-data-encoder": ["form-data-encoder@1.7.2", "", {}, "sha512-qfqtYan3rxrnCk1VYaA4H+Ms9xdpPqvLZa6xmMgFvhO32x7/3J/ExcTd6qpxM0vH2GdMI+poehyBZvqfMTto8A=="],

    "formdata-node": ["formdata-node@4.4.1", "", { "dependencies": { "node-domexception": "1.0.0", "web-streams-polyfill": "4.0.0-beta.3" } }, "sha512-0iirZp3uVDjVGt9p49aTaqjk84TrglENEDuqfdlZQ1roC9CWlPk6Avf8EEnZNcAqPonwkG35x4n3ww/1THYAeQ=="],

    "fraction.js": ["fraction.js@4.3.7", "", {}, ""],

    "fsevents": ["fsevents@2.3.3", "", { "os": "darwin" }, ""],

    "function-bind": ["function-bind@1.1.2", "", {}, ""],

    "fuse.js": ["fuse.js@7.1.0", "", {}, "sha512-trLf4SzuuUxfusZADLINj+dE8clK1frKdmqiJNb1Es75fmI5oY6X2mxLVUciLLjxqw/xr72Dhy+lER6dGd02FQ=="],

    "gaxios": ["gaxios@6.7.1", "", { "dependencies": { "extend": "^3.0.2", "https-proxy-agent": "^7.0.1", "is-stream": "^2.0.0", "node-fetch": "^2.6.9", "uuid": "^9.0.1" } }, "sha512-LDODD4TMYx7XXdpwxAVRAIAuB0bzv0s+ywFonY46k126qzQHT9ygyoa9tncmOiQmmDrik65UYsEkv3lbfqQ3yQ=="],

    "gcp-metadata": ["gcp-metadata@6.1.1", "", { "dependencies": { "gaxios": "^6.1.1", "google-logging-utils": "^0.0.2", "json-bigint": "^1.0.0" } }, "sha512-a4tiq7E0/5fTjxPAaH4jpjkSv/uCaU2p5KC6HVGrvl0cDjA8iBZv4vv1gyzlmK0ZUKqwpOyQMKzZQe3lTit77A=="],

    "gensync": ["gensync@1.0.0-beta.2", "", {}, "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg=="],

    "get-east-asian-width": ["get-east-asian-width@1.3.0", "", {}, ""],

    "get-intrinsic": ["get-intrinsic@1.3.0", "", { "dependencies": { "call-bind-apply-helpers": "^1.0.2", "es-define-property": "^1.0.1", "es-errors": "^1.3.0", "es-object-atoms": "^1.1.1", "function-bind": "^1.1.2", "get-proto": "^1.0.1", "gopd": "^1.2.0", "has-symbols": "^1.1.0", "hasown": "^2.0.2", "math-intrinsics": "^1.1.0" } }, "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ=="],

    "get-nonce": ["get-nonce@1.0.1", "", {}, "sha512-FJhYRoDaiatfEkUK8HKlicmu/3SGFD51q3itKDGoSTysQJBnfOcxU5GxnhE1E6soB76MbT0MBtnKJuXyAx+96Q=="],

    "get-proto": ["get-proto@1.0.1", "", { "dependencies": { "dunder-proto": "^1.0.1", "es-object-atoms": "^1.0.0" } }, "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g=="],

    "github-slugger": ["github-slugger@2.0.0", "", {}, ""],

    "glob": ["glob@10.4.5", "", { "dependencies": { "foreground-child": "^3.1.0", "jackspeak": "^3.1.2", "minimatch": "^9.0.4", "minipass": "^7.1.2", "package-json-from-dist": "^1.0.0", "path-scurry": "^1.11.1" }, "bin": "dist/esm/bin.mjs" }, ""],

    "glob-parent": ["glob-parent@6.0.2", "", { "dependencies": { "is-glob": "^4.0.3" } }, ""],

    "globals": ["globals@11.12.0", "", {}, "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA=="],

    "google-auth-library": ["google-auth-library@9.15.1", "", { "dependencies": { "base64-js": "^1.3.0", "ecdsa-sig-formatter": "^1.0.11", "gaxios": "^6.1.1", "gcp-metadata": "^6.1.0", "gtoken": "^7.0.0", "jws": "^4.0.0" } }, "sha512-Jb6Z0+nvECVz+2lzSMt9u98UsoakXxA2HGHMCxh+so3n90XgYWkq5dur19JAJV7ONiJY22yBTyJB1TSkvPq9Ng=="],

    "google-logging-utils": ["google-logging-utils@0.0.2", "", {}, "sha512-NEgUnEcBiP5HrPzufUkBzJOD/Sxsco3rLNo1F1TNf7ieU8ryUzBhqba8r756CjLX7rn3fHl6iLEwPYuqpoKgQQ=="],

    "gopd": ["gopd@1.2.0", "", {}, "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg=="],

    "graceful-fs": ["graceful-fs@4.2.11", "", {}, "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="],

    "gtoken": ["gtoken@7.1.0", "", { "dependencies": { "gaxios": "^6.0.0", "jws": "^4.0.0" } }, "sha512-pCcEwRi+TKpMlxAQObHDQ56KawURgyAf6jtIY046fJ5tIv3zDe/LEIubckAO8fj6JnAxLdmWkUfNyulQ2iKdEw=="],

    "h3": ["h3@1.15.1", "", { "dependencies": { "cookie-es": "^1.2.2", "crossws": "^0.3.3", "defu": "^6.1.4", "destr": "^2.0.3", "iron-webcrypto": "^1.2.1", "node-mock-http": "^1.0.0", "radix3": "^1.1.2", "ufo": "^1.5.4", "uncrypto": "^0.1.3" } }, ""],

    "hanzi-writer": ["hanzi-writer@3.7.2", "", {}, "sha512-9v8V45rY4leG62qmq+c9MzjT4mPrVbFATv5tWWw3NucaxOO4bM/CiJ8qfPt/NOQuvWYhOhuHu6TzfjZ0ibY6jg=="],

    "has-symbols": ["has-symbols@1.1.0", "", {}, "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ=="],

    "has-tostringtag": ["has-tostringtag@1.0.2", "", { "dependencies": { "has-symbols": "^1.0.3" } }, "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw=="],

    "hasown": ["hasown@2.0.2", "", { "dependencies": { "function-bind": "^1.1.2" } }, ""],

    "hast-util-from-dom": ["hast-util-from-dom@5.0.1", "", { "dependencies": { "@types/hast": "^3.0.0", "hastscript": "^9.0.0", "web-namespaces": "^2.0.0" } }, "sha512-N+LqofjR2zuzTjCPzyDUdSshy4Ma6li7p/c3pA78uTwzFgENbgbUrm2ugwsOdcjI1muO+o6Dgzp9p8WHtn/39Q=="],

    "hast-util-from-html": ["hast-util-from-html@2.0.3", "", { "dependencies": { "@types/hast": "^3.0.0", "devlop": "^1.1.0", "hast-util-from-parse5": "^8.0.0", "parse5": "^7.0.0", "vfile": "^6.0.0", "vfile-message": "^4.0.0" } }, ""],

    "hast-util-from-html-isomorphic": ["hast-util-from-html-isomorphic@2.0.0", "", { "dependencies": { "@types/hast": "^3.0.0", "hast-util-from-dom": "^5.0.0", "hast-util-from-html": "^2.0.0", "unist-util-remove-position": "^5.0.0" } }, "sha512-zJfpXq44yff2hmE0XmwEOzdWin5xwH+QIhMLOScpX91e/NSGPsAzNCvLQDIEPyO2TXi+lBmU6hjLIhV8MwP2kw=="],

    "hast-util-from-parse5": ["hast-util-from-parse5@8.0.3", "", { "dependencies": { "@types/hast": "^3.0.0", "@types/unist": "^3.0.0", "devlop": "^1.0.0", "hastscript": "^9.0.0", "property-information": "^7.0.0", "vfile": "^6.0.0", "vfile-location": "^5.0.0", "web-namespaces": "^2.0.0" } }, ""],

    "hast-util-is-element": ["hast-util-is-element@3.0.0", "", { "dependencies": { "@types/hast": "^3.0.0" } }, ""],

    "hast-util-parse-selector": ["hast-util-parse-selector@4.0.0", "", { "dependencies": { "@types/hast": "^3.0.0" } }, ""],

    "hast-util-raw": ["hast-util-raw@9.1.0", "", { "dependencies": { "@types/hast": "^3.0.0", "@types/unist": "^3.0.0", "@ungap/structured-clone": "^1.0.0", "hast-util-from-parse5": "^8.0.0", "hast-util-to-parse5": "^8.0.0", "html-void-elements": "^3.0.0", "mdast-util-to-hast": "^13.0.0", "parse5": "^7.0.0", "unist-util-position": "^5.0.0", "unist-util-visit": "^5.0.0", "vfile": "^6.0.0", "web-namespaces": "^2.0.0", "zwitch": "^2.0.0" } }, ""],

    "hast-util-to-html": ["hast-util-to-html@9.0.5", "", { "dependencies": { "@types/hast": "^3.0.0", "@types/unist": "^3.0.0", "ccount": "^2.0.0", "comma-separated-tokens": "^2.0.0", "hast-util-whitespace": "^3.0.0", "html-void-elements": "^3.0.0", "mdast-util-to-hast": "^13.0.0", "property-information": "^7.0.0", "space-separated-tokens": "^2.0.0", "stringify-entities": "^4.0.0", "zwitch": "^2.0.4" } }, ""],

    "hast-util-to-jsx-runtime": ["hast-util-to-jsx-runtime@2.3.6", "", { "dependencies": { "@types/estree": "^1.0.0", "@types/hast": "^3.0.0", "@types/unist": "^3.0.0", "comma-separated-tokens": "^2.0.0", "devlop": "^1.0.0", "estree-util-is-identifier-name": "^3.0.0", "hast-util-whitespace": "^3.0.0", "mdast-util-mdx-expression": "^2.0.0", "mdast-util-mdx-jsx": "^3.0.0", "mdast-util-mdxjs-esm": "^2.0.0", "property-information": "^7.0.0", "space-separated-tokens": "^2.0.0", "style-to-js": "^1.0.0", "unist-util-position": "^5.0.0", "vfile-message": "^4.0.0" } }, "sha512-zl6s8LwNyo1P9uw+XJGvZtdFF1GdAkOg8ujOw+4Pyb76874fLps4ueHXDhXWdk6YHQ6OgUtinliG7RsYvCbbBg=="],

    "hast-util-to-parse5": ["hast-util-to-parse5@8.0.0", "", { "dependencies": { "@types/hast": "^3.0.0", "comma-separated-tokens": "^2.0.0", "devlop": "^1.0.0", "property-information": "^6.0.0", "space-separated-tokens": "^2.0.0", "web-namespaces": "^2.0.0", "zwitch": "^2.0.0" } }, ""],

    "hast-util-to-text": ["hast-util-to-text@4.0.2", "", { "dependencies": { "@types/hast": "^3.0.0", "@types/unist": "^3.0.0", "hast-util-is-element": "^3.0.0", "unist-util-find-after": "^5.0.0" } }, ""],

    "hast-util-whitespace": ["hast-util-whitespace@3.0.0", "", { "dependencies": { "@types/hast": "^3.0.0" } }, ""],

    "hastscript": ["hastscript@9.0.1", "", { "dependencies": { "@types/hast": "^3.0.0", "comma-separated-tokens": "^2.0.0", "hast-util-parse-selector": "^4.0.0", "property-information": "^7.0.0", "space-separated-tokens": "^2.0.0" } }, ""],

    "hoist-non-react-statics": ["hoist-non-react-statics@3.3.2", "", { "dependencies": { "react-is": "^16.7.0" } }, "sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw=="],

    "html-escaper": ["html-escaper@3.0.3", "", {}, ""],

    "html-url-attributes": ["html-url-attributes@3.0.1", "", {}, "sha512-ol6UPyBWqsrO6EJySPz2O7ZSr856WDrEzM5zMqp+FJJLGMW35cLYmmZnl0vztAZxRUoNZJFTCohfjuIJ8I4QBQ=="],

    "html-void-elements": ["html-void-elements@3.0.0", "", {}, ""],

    "http-cache-semantics": ["http-cache-semantics@4.1.1", "", {}, ""],

    "https-proxy-agent": ["https-proxy-agent@7.0.6", "", { "dependencies": { "agent-base": "^7.1.2", "debug": "4" } }, "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw=="],

    "humanize-ms": ["humanize-ms@1.2.1", "", { "dependencies": { "ms": "^2.0.0" } }, "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ=="],

    "hyphenate-style-name": ["hyphenate-style-name@1.1.0", "", {}, "sha512-WDC/ui2VVRrz3jOVi+XtjqkDjiVjTtFaAGiW37k6b+ohyQ5wYDOGkvCZa8+H0nx3gyvv0+BST9xuOgIyGQ00gw=="],

    "iconv-lite": ["iconv-lite@0.6.3", "", { "dependencies": { "safer-buffer": ">= 2.1.2 < 3.0.0" } }, "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw=="],

    "image-size": ["image-size@0.5.5", "", { "bin": { "image-size": "bin/image-size.js" } }, "sha512-6TDAlDPZxUFCv+fuOkIoXT/V/f3Qbq8e37p+YOiYrUv3v9cc3/6x78VdfPgFVaB9dZYeLUfKgHRebpkm/oP2VQ=="],

    "immutability-helper": ["immutability-helper@3.1.1", "", {}, "sha512-Q0QaXjPjwIju/28TsugCHNEASwoCcJSyJV3uO1sOIQGI0jKgm9f41Lvz0DZj3n46cNCyAZTsEYoY4C2bVRUzyQ=="],

    "import-meta-resolve": ["import-meta-resolve@4.1.0", "", {}, ""],

    "inline-style-parser": ["inline-style-parser@0.2.4", "", {}, "sha512-0aO8FkhNZlj/ZIbNi7Lxxr12obT7cL1moPfE4tg1LkX7LlLfC6DeX4l2ZEud1ukP9jNQyNnfzQVqwbwmAATY4Q=="],

    "inline-style-prefixer": ["inline-style-prefixer@7.0.1", "", { "dependencies": { "css-in-js-utils": "^3.1.0" } }, "sha512-lhYo5qNTQp3EvSSp3sRvXMbVQTLrvGV6DycRMJ5dm2BLMiJ30wpXKdDdgX+GmJZ5uQMucwRKHamXSst3Sj/Giw=="],

    "iron-webcrypto": ["iron-webcrypto@1.2.1", "", {}, ""],

    "is-alphabetical": ["is-alphabetical@2.0.1", "", {}, "sha512-FWyyY60MeTNyeSRpkM2Iry0G9hpr7/9kD40mD/cGQEuilcZYS4okz8SN2Q6rLCJ8gbCt6fN+rC+6tMGS99LaxQ=="],

    "is-alphanumerical": ["is-alphanumerical@2.0.1", "", { "dependencies": { "is-alphabetical": "^2.0.0", "is-decimal": "^2.0.0" } }, "sha512-hmbYhX/9MUMF5uh7tOXyK/n0ZvWpad5caBA17GsC6vyuCqaWliRG5K1qS9inmUhEMaOBIW7/whAnSwveW/LtZw=="],

    "is-arrayish": ["is-arrayish@0.3.2", "", {}, ""],

    "is-binary-path": ["is-binary-path@2.1.0", "", { "dependencies": { "binary-extensions": "^2.0.0" } }, ""],

    "is-core-module": ["is-core-module@2.16.1", "", { "dependencies": { "hasown": "^2.0.2" } }, ""],

    "is-decimal": ["is-decimal@2.0.1", "", {}, "sha512-AAB9hiomQs5DXWcRB1rqsxGUstbRroFOPPVAomNk/3XHR5JyEZChOyTWe2oayKnsSsr/kcGqF+z6yuH6HHpN0A=="],

    "is-docker": ["is-docker@3.0.0", "", { "bin": "cli.js" }, ""],

    "is-extglob": ["is-extglob@2.1.1", "", {}, ""],

    "is-fullwidth-code-point": ["is-fullwidth-code-point@3.0.0", "", {}, ""],

    "is-glob": ["is-glob@4.0.3", "", { "dependencies": { "is-extglob": "^2.1.1" } }, ""],

    "is-hexadecimal": ["is-hexadecimal@2.0.1", "", {}, "sha512-DgZQp241c8oO6cA1SbTEWiXeoxV42vlcJxgH+B3hi1AiqqKruZR3ZGF8In3fj4+/y/7rHvlOZLZtgJ/4ttYGZg=="],

    "is-inside-container": ["is-inside-container@1.0.0", "", { "dependencies": { "is-docker": "^3.0.0" }, "bin": "cli.js" }, ""],

    "is-number": ["is-number@7.0.0", "", {}, ""],

    "is-plain-obj": ["is-plain-obj@4.1.0", "", {}, ""],

    "is-stream": ["is-stream@2.0.1", "", {}, "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg=="],

    "is-what": ["is-what@3.14.1", "", {}, "sha512-sNxgpk9793nzSs7bA6JQJGeIuRBQhAaNGG77kzYQgMkrID+lS6SlK07K5LaptscDlSaIgH+GPFzf+d75FVxozA=="],

    "is-wsl": ["is-wsl@3.1.0", "", { "dependencies": { "is-inside-container": "^1.0.0" } }, ""],

    "isexe": ["isexe@2.0.0", "", {}, ""],

    "jackspeak": ["jackspeak@3.4.3", "", { "dependencies": { "@isaacs/cliui": "^8.0.2" }, "optionalDependencies": { "@pkgjs/parseargs": "^0.11.0" } }, ""],

    "jiti": ["jiti@1.21.7", "", { "bin": "bin/jiti.js" }, ""],

    "js-cookie": ["js-cookie@2.2.1", "", {}, "sha512-HvdH2LzI/EAZcUwA8+0nKNtWHqS+ZmijLA30RwZA0bo7ToCckjK5MkGhjED9KoRcXO6BaGI3I9UIzSA1FKFPOQ=="],

    "js-tokens": ["js-tokens@4.0.0", "", {}, "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="],

    "js-yaml": ["js-yaml@4.1.0", "", { "dependencies": { "argparse": "^2.0.1" }, "bin": "bin/js-yaml.js" }, ""],

    "jsesc": ["jsesc@3.1.0", "", { "bin": "bin/jsesc" }, "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA=="],

    "json-bigint": ["json-bigint@1.0.0", "", { "dependencies": { "bignumber.js": "^9.0.0" } }, "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ=="],

    "json-schema": ["json-schema@0.4.0", "", {}, "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA=="],

    "json5": ["json5@2.2.3", "", { "bin": "lib/cli.js" }, "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg=="],

    "jsondiffpatch": ["jsondiffpatch@0.6.0", "", { "dependencies": { "@types/diff-match-patch": "^1.0.36", "chalk": "^5.3.0", "diff-match-patch": "^1.0.5" }, "bin": { "jsondiffpatch": "bin/jsondiffpatch.js" } }, "sha512-3QItJOXp2AP1uv7waBkao5nCvhEv+QmJAd38Ybq7wNI74Q+BBmnLn4EDKz6yI9xGAIQoUF87qHt+kc1IVxB4zQ=="],

    "jwa": ["jwa@2.0.0", "", { "dependencies": { "buffer-equal-constant-time": "1.0.1", "ecdsa-sig-formatter": "1.0.11", "safe-buffer": "^5.0.1" } }, "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA=="],

    "jws": ["jws@4.0.0", "", { "dependencies": { "jwa": "^2.0.0", "safe-buffer": "^5.0.1" } }, "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg=="],

    "katex": ["katex@0.16.22", "", { "dependencies": { "commander": "^8.3.0" }, "bin": { "katex": "cli.js" } }, "sha512-XCHRdUw4lf3SKBaJe4EvgqIuWwkPSo9XoeO8GjQW94Bp7TWv9hNhzZjZ+OH9yf1UmLygb7DIT5GSFQiyt16zYg=="],

    "kleur": ["kleur@4.1.5", "", {}, ""],

    "less": ["less@4.3.0", "", { "dependencies": { "copy-anything": "^2.0.1", "parse-node-version": "^1.0.1", "tslib": "^2.3.0" }, "optionalDependencies": { "errno": "^0.1.1", "graceful-fs": "^4.1.2", "image-size": "~0.5.0", "make-dir": "^2.1.0", "mime": "^1.4.1", "needle": "^3.1.0", "source-map": "~0.6.0" }, "bin": { "lessc": "bin/lessc" } }, "sha512-X9RyH9fvemArzfdP8Pi3irr7lor2Ok4rOttDXBhlwDg+wKQsXOXgHWduAJE1EsF7JJx0w0bcO6BC6tCKKYnXKA=="],

    "lilconfig": ["lilconfig@3.1.3", "", {}, ""],

    "lines-and-columns": ["lines-and-columns@1.2.4", "", {}, ""],

    "lodash": ["lodash@4.17.21", "", {}, "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="],

    "lodash.castarray": ["lodash.castarray@4.4.0", "", {}, ""],

    "lodash.isplainobject": ["lodash.isplainobject@4.0.6", "", {}, ""],

    "lodash.merge": ["lodash.merge@4.6.2", "", {}, ""],

    "longest-streak": ["longest-streak@3.1.0", "", {}, ""],

    "loose-envify": ["loose-envify@1.4.0", "", { "dependencies": { "js-tokens": "^3.0.0 || ^4.0.0" }, "bin": "cli.js" }, "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q=="],

    "lru-cache": ["lru-cache@10.4.3", "", {}, ""],

    "lucide-react": ["lucide-react@0.503.0", "", { "peerDependencies": { "react": "^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0" } }, "sha512-HGGkdlPWQ0vTF8jJ5TdIqhQXZi6uh3LnNgfZ8MHiuxFfX3RZeA79r2MW2tHAZKlAVfoNE8esm3p+O6VkIvpj6w=="],

    "magic-string": ["magic-string@0.30.17", "", { "dependencies": { "@jridgewell/sourcemap-codec": "^1.5.0" } }, ""],

    "magicast": ["magicast@0.3.5", "", { "dependencies": { "@babel/parser": "^7.25.4", "@babel/types": "^7.25.4", "source-map-js": "^1.2.0" } }, ""],

    "make-dir": ["make-dir@2.1.0", "", { "dependencies": { "pify": "^4.0.1", "semver": "^5.6.0" } }, "sha512-LS9X+dc8KLxXCb8dni79fLIIUA5VyZoyjSMCwTluaXA0o27cCK0bhXkpgw+sTXVpPy/lSO57ilRixqk0vDmtRA=="],

    "markdown-table": ["markdown-table@3.0.4", "", {}, ""],

    "math-intrinsics": ["math-intrinsics@1.1.0", "", {}, "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g=="],

    "mdast-util-definitions": ["mdast-util-definitions@6.0.0", "", { "dependencies": { "@types/mdast": "^4.0.0", "@types/unist": "^3.0.0", "unist-util-visit": "^5.0.0" } }, ""],

    "mdast-util-find-and-replace": ["mdast-util-find-and-replace@3.0.2", "", { "dependencies": { "@types/mdast": "^4.0.0", "escape-string-regexp": "^5.0.0", "unist-util-is": "^6.0.0", "unist-util-visit-parents": "^6.0.0" } }, ""],

    "mdast-util-from-markdown": ["mdast-util-from-markdown@2.0.2", "", { "dependencies": { "@types/mdast": "^4.0.0", "@types/unist": "^3.0.0", "decode-named-character-reference": "^1.0.0", "devlop": "^1.0.0", "mdast-util-to-string": "^4.0.0", "micromark": "^4.0.0", "micromark-util-decode-numeric-character-reference": "^2.0.0", "micromark-util-decode-string": "^2.0.0", "micromark-util-normalize-identifier": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0", "unist-util-stringify-position": "^4.0.0" } }, ""],

    "mdast-util-gfm": ["mdast-util-gfm@3.1.0", "", { "dependencies": { "mdast-util-from-markdown": "^2.0.0", "mdast-util-gfm-autolink-literal": "^2.0.0", "mdast-util-gfm-footnote": "^2.0.0", "mdast-util-gfm-strikethrough": "^2.0.0", "mdast-util-gfm-table": "^2.0.0", "mdast-util-gfm-task-list-item": "^2.0.0", "mdast-util-to-markdown": "^2.0.0" } }, ""],

    "mdast-util-gfm-autolink-literal": ["mdast-util-gfm-autolink-literal@2.0.1", "", { "dependencies": { "@types/mdast": "^4.0.0", "ccount": "^2.0.0", "devlop": "^1.0.0", "mdast-util-find-and-replace": "^3.0.0", "micromark-util-character": "^2.0.0" } }, ""],

    "mdast-util-gfm-footnote": ["mdast-util-gfm-footnote@2.1.0", "", { "dependencies": { "@types/mdast": "^4.0.0", "devlop": "^1.1.0", "mdast-util-from-markdown": "^2.0.0", "mdast-util-to-markdown": "^2.0.0", "micromark-util-normalize-identifier": "^2.0.0" } }, ""],

    "mdast-util-gfm-strikethrough": ["mdast-util-gfm-strikethrough@2.0.0", "", { "dependencies": { "@types/mdast": "^4.0.0", "mdast-util-from-markdown": "^2.0.0", "mdast-util-to-markdown": "^2.0.0" } }, ""],

    "mdast-util-gfm-table": ["mdast-util-gfm-table@2.0.0", "", { "dependencies": { "@types/mdast": "^4.0.0", "devlop": "^1.0.0", "markdown-table": "^3.0.0", "mdast-util-from-markdown": "^2.0.0", "mdast-util-to-markdown": "^2.0.0" } }, ""],

    "mdast-util-gfm-task-list-item": ["mdast-util-gfm-task-list-item@2.0.0", "", { "dependencies": { "@types/mdast": "^4.0.0", "devlop": "^1.0.0", "mdast-util-from-markdown": "^2.0.0", "mdast-util-to-markdown": "^2.0.0" } }, ""],

    "mdast-util-math": ["mdast-util-math@3.0.0", "", { "dependencies": { "@types/hast": "^3.0.0", "@types/mdast": "^4.0.0", "devlop": "^1.0.0", "longest-streak": "^3.0.0", "mdast-util-from-markdown": "^2.0.0", "mdast-util-to-markdown": "^2.1.0", "unist-util-remove-position": "^5.0.0" } }, "sha512-Tl9GBNeG/AhJnQM221bJR2HPvLOSnLE/T9cJI9tlc6zwQk2nPk/4f0cHkOdEixQPC/j8UtKDdITswvLAy1OZ1w=="],

    "mdast-util-mdx-expression": ["mdast-util-mdx-expression@2.0.1", "", { "dependencies": { "@types/estree-jsx": "^1.0.0", "@types/hast": "^3.0.0", "@types/mdast": "^4.0.0", "devlop": "^1.0.0", "mdast-util-from-markdown": "^2.0.0", "mdast-util-to-markdown": "^2.0.0" } }, "sha512-J6f+9hUp+ldTZqKRSg7Vw5V6MqjATc+3E4gf3CFNcuZNWD8XdyI6zQ8GqH7f8169MM6P7hMBRDVGnn7oHB9kXQ=="],

    "mdast-util-mdx-jsx": ["mdast-util-mdx-jsx@3.2.0", "", { "dependencies": { "@types/estree-jsx": "^1.0.0", "@types/hast": "^3.0.0", "@types/mdast": "^4.0.0", "@types/unist": "^3.0.0", "ccount": "^2.0.0", "devlop": "^1.1.0", "mdast-util-from-markdown": "^2.0.0", "mdast-util-to-markdown": "^2.0.0", "parse-entities": "^4.0.0", "stringify-entities": "^4.0.0", "unist-util-stringify-position": "^4.0.0", "vfile-message": "^4.0.0" } }, "sha512-lj/z8v0r6ZtsN/cGNNtemmmfoLAFZnjMbNyLzBafjzikOM+glrjNHPlf6lQDOTccj9n5b0PPihEBbhneMyGs1Q=="],

    "mdast-util-mdxjs-esm": ["mdast-util-mdxjs-esm@2.0.1", "", { "dependencies": { "@types/estree-jsx": "^1.0.0", "@types/hast": "^3.0.0", "@types/mdast": "^4.0.0", "devlop": "^1.0.0", "mdast-util-from-markdown": "^2.0.0", "mdast-util-to-markdown": "^2.0.0" } }, "sha512-EcmOpxsZ96CvlP03NghtH1EsLtr0n9Tm4lPUJUBccV9RwUOneqSycg19n5HGzCf+10LozMRSObtVr3ee1WoHtg=="],

    "mdast-util-phrasing": ["mdast-util-phrasing@4.1.0", "", { "dependencies": { "@types/mdast": "^4.0.0", "unist-util-is": "^6.0.0" } }, ""],

    "mdast-util-to-hast": ["mdast-util-to-hast@13.2.0", "", { "dependencies": { "@types/hast": "^3.0.0", "@types/mdast": "^4.0.0", "@ungap/structured-clone": "^1.0.0", "devlop": "^1.0.0", "micromark-util-sanitize-uri": "^2.0.0", "trim-lines": "^3.0.0", "unist-util-position": "^5.0.0", "unist-util-visit": "^5.0.0", "vfile": "^6.0.0" } }, ""],

    "mdast-util-to-markdown": ["mdast-util-to-markdown@2.1.2", "", { "dependencies": { "@types/mdast": "^4.0.0", "@types/unist": "^3.0.0", "longest-streak": "^3.0.0", "mdast-util-phrasing": "^4.0.0", "mdast-util-to-string": "^4.0.0", "micromark-util-classify-character": "^2.0.0", "micromark-util-decode-string": "^2.0.0", "unist-util-visit": "^5.0.0", "zwitch": "^2.0.0" } }, ""],

    "mdast-util-to-string": ["mdast-util-to-string@4.0.0", "", { "dependencies": { "@types/mdast": "^4.0.0" } }, ""],

    "mdn-data": ["mdn-data@2.12.2", "", {}, "sha512-IEn+pegP1aManZuckezWCO+XZQDplx1366JoVhTpMpBB1sPey/SbveZQUosKiKiGYjg1wH4pMlNgXbCiYgihQA=="],

    "merge2": ["merge2@1.4.1", "", {}, ""],

    "micromark": ["micromark@4.0.2", "", { "dependencies": { "@types/debug": "^4.0.0", "debug": "^4.0.0", "decode-named-character-reference": "^1.0.0", "devlop": "^1.0.0", "micromark-core-commonmark": "^2.0.0", "micromark-factory-space": "^2.0.0", "micromark-util-character": "^2.0.0", "micromark-util-chunked": "^2.0.0", "micromark-util-combine-extensions": "^2.0.0", "micromark-util-decode-numeric-character-reference": "^2.0.0", "micromark-util-encode": "^2.0.0", "micromark-util-normalize-identifier": "^2.0.0", "micromark-util-resolve-all": "^2.0.0", "micromark-util-sanitize-uri": "^2.0.0", "micromark-util-subtokenize": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-core-commonmark": ["micromark-core-commonmark@2.0.3", "", { "dependencies": { "decode-named-character-reference": "^1.0.0", "devlop": "^1.0.0", "micromark-factory-destination": "^2.0.0", "micromark-factory-label": "^2.0.0", "micromark-factory-space": "^2.0.0", "micromark-factory-title": "^2.0.0", "micromark-factory-whitespace": "^2.0.0", "micromark-util-character": "^2.0.0", "micromark-util-chunked": "^2.0.0", "micromark-util-classify-character": "^2.0.0", "micromark-util-html-tag-name": "^2.0.0", "micromark-util-normalize-identifier": "^2.0.0", "micromark-util-resolve-all": "^2.0.0", "micromark-util-subtokenize": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-extension-gfm": ["micromark-extension-gfm@3.0.0", "", { "dependencies": { "micromark-extension-gfm-autolink-literal": "^2.0.0", "micromark-extension-gfm-footnote": "^2.0.0", "micromark-extension-gfm-strikethrough": "^2.0.0", "micromark-extension-gfm-table": "^2.0.0", "micromark-extension-gfm-tagfilter": "^2.0.0", "micromark-extension-gfm-task-list-item": "^2.0.0", "micromark-util-combine-extensions": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-extension-gfm-autolink-literal": ["micromark-extension-gfm-autolink-literal@2.1.0", "", { "dependencies": { "micromark-util-character": "^2.0.0", "micromark-util-sanitize-uri": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-extension-gfm-footnote": ["micromark-extension-gfm-footnote@2.1.0", "", { "dependencies": { "devlop": "^1.0.0", "micromark-core-commonmark": "^2.0.0", "micromark-factory-space": "^2.0.0", "micromark-util-character": "^2.0.0", "micromark-util-normalize-identifier": "^2.0.0", "micromark-util-sanitize-uri": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-extension-gfm-strikethrough": ["micromark-extension-gfm-strikethrough@2.1.0", "", { "dependencies": { "devlop": "^1.0.0", "micromark-util-chunked": "^2.0.0", "micromark-util-classify-character": "^2.0.0", "micromark-util-resolve-all": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-extension-gfm-table": ["micromark-extension-gfm-table@2.1.1", "", { "dependencies": { "devlop": "^1.0.0", "micromark-factory-space": "^2.0.0", "micromark-util-character": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-extension-gfm-tagfilter": ["micromark-extension-gfm-tagfilter@2.0.0", "", { "dependencies": { "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-extension-gfm-task-list-item": ["micromark-extension-gfm-task-list-item@2.1.0", "", { "dependencies": { "devlop": "^1.0.0", "micromark-factory-space": "^2.0.0", "micromark-util-character": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-extension-math": ["micromark-extension-math@3.1.0", "", { "dependencies": { "@types/katex": "^0.16.0", "devlop": "^1.0.0", "katex": "^0.16.0", "micromark-factory-space": "^2.0.0", "micromark-util-character": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, "sha512-lvEqd+fHjATVs+2v/8kg9i5Q0AP2k85H0WUOwpIVvUML8BapsMvh1XAogmQjOCsLpoKRCVQqEkQBB3NhVBcsOg=="],

    "micromark-factory-destination": ["micromark-factory-destination@2.0.1", "", { "dependencies": { "micromark-util-character": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-factory-label": ["micromark-factory-label@2.0.1", "", { "dependencies": { "devlop": "^1.0.0", "micromark-util-character": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-factory-space": ["micromark-factory-space@2.0.1", "", { "dependencies": { "micromark-util-character": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-factory-title": ["micromark-factory-title@2.0.1", "", { "dependencies": { "micromark-factory-space": "^2.0.0", "micromark-util-character": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-factory-whitespace": ["micromark-factory-whitespace@2.0.1", "", { "dependencies": { "micromark-factory-space": "^2.0.0", "micromark-util-character": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-util-character": ["micromark-util-character@2.1.1", "", { "dependencies": { "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-util-chunked": ["micromark-util-chunked@2.0.1", "", { "dependencies": { "micromark-util-symbol": "^2.0.0" } }, ""],

    "micromark-util-classify-character": ["micromark-util-classify-character@2.0.1", "", { "dependencies": { "micromark-util-character": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-util-combine-extensions": ["micromark-util-combine-extensions@2.0.1", "", { "dependencies": { "micromark-util-chunked": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-util-decode-numeric-character-reference": ["micromark-util-decode-numeric-character-reference@2.0.2", "", { "dependencies": { "micromark-util-symbol": "^2.0.0" } }, ""],

    "micromark-util-decode-string": ["micromark-util-decode-string@2.0.1", "", { "dependencies": { "decode-named-character-reference": "^1.0.0", "micromark-util-character": "^2.0.0", "micromark-util-decode-numeric-character-reference": "^2.0.0", "micromark-util-symbol": "^2.0.0" } }, ""],

    "micromark-util-encode": ["micromark-util-encode@2.0.1", "", {}, ""],

    "micromark-util-html-tag-name": ["micromark-util-html-tag-name@2.0.1", "", {}, ""],

    "micromark-util-normalize-identifier": ["micromark-util-normalize-identifier@2.0.1", "", { "dependencies": { "micromark-util-symbol": "^2.0.0" } }, ""],

    "micromark-util-resolve-all": ["micromark-util-resolve-all@2.0.1", "", { "dependencies": { "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-util-sanitize-uri": ["micromark-util-sanitize-uri@2.0.1", "", { "dependencies": { "micromark-util-character": "^2.0.0", "micromark-util-encode": "^2.0.0", "micromark-util-symbol": "^2.0.0" } }, ""],

    "micromark-util-subtokenize": ["micromark-util-subtokenize@2.1.0", "", { "dependencies": { "devlop": "^1.0.0", "micromark-util-chunked": "^2.0.0", "micromark-util-symbol": "^2.0.0", "micromark-util-types": "^2.0.0" } }, ""],

    "micromark-util-symbol": ["micromark-util-symbol@2.0.1", "", {}, ""],

    "micromark-util-types": ["micromark-util-types@2.0.2", "", {}, ""],

    "micromatch": ["micromatch@4.0.8", "", { "dependencies": { "braces": "^3.0.3", "picomatch": "^2.3.1" } }, ""],

    "mime": ["mime@1.6.0", "", { "bin": { "mime": "cli.js" } }, "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg=="],

    "mime-db": ["mime-db@1.52.0", "", {}, "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="],

    "mime-types": ["mime-types@2.1.35", "", { "dependencies": { "mime-db": "1.52.0" } }, "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw=="],

    "minimatch": ["minimatch@9.0.5", "", { "dependencies": { "brace-expansion": "^2.0.1" } }, ""],

    "minipass": ["minipass@7.1.2", "", {}, ""],

    "mrmime": ["mrmime@2.0.1", "", {}, ""],

    "ms": ["ms@2.1.3", "", {}, ""],

    "mz": ["mz@2.7.0", "", { "dependencies": { "any-promise": "^1.0.0", "object-assign": "^4.0.1", "thenify-all": "^1.0.0" } }, ""],

    "nano-css": ["nano-css@5.6.2", "", { "dependencies": { "@jridgewell/sourcemap-codec": "^1.4.15", "css-tree": "^1.1.2", "csstype": "^3.1.2", "fastest-stable-stringify": "^2.0.2", "inline-style-prefixer": "^7.0.1", "rtl-css-js": "^1.16.1", "stacktrace-js": "^2.0.2", "stylis": "^4.3.0" }, "peerDependencies": { "react": "*", "react-dom": "*" } }, "sha512-+6bHaC8dSDGALM1HJjOHVXpuastdu2xFoZlC77Jh4cg+33Zcgm+Gxd+1xsnpZK14eyHObSp82+ll5y3SX75liw=="],

    "nanoid": ["nanoid@3.3.10", "", { "bin": "bin/nanoid.cjs" }, ""],

    "needle": ["needle@3.3.1", "", { "dependencies": { "iconv-lite": "^0.6.3", "sax": "^1.2.4" }, "bin": { "needle": "bin/needle" } }, "sha512-6k0YULvhpw+RoLNiQCRKOl09Rv1dPLr8hHnVjHqdolKwDrdNyk+Hmrthi4lIGPPz3r39dLx0hsF5s40sZ3Us4Q=="],

    "neotraverse": ["neotraverse@0.6.18", "", {}, ""],

    "nlcst-to-string": ["nlcst-to-string@4.0.0", "", { "dependencies": { "@types/nlcst": "^2.0.0" } }, ""],

    "node-domexception": ["node-domexception@1.0.0", "", {}, "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ=="],

    "node-fetch": ["node-fetch@2.7.0", "", { "dependencies": { "whatwg-url": "^5.0.0" }, "peerDependencies": { "encoding": "^0.1.0" }, "optionalPeers": ["encoding"] }, "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A=="],

    "node-fetch-native": ["node-fetch-native@1.6.6", "", {}, ""],

    "node-mock-http": ["node-mock-http@1.0.0", "", {}, ""],

    "node-releases": ["node-releases@2.0.19", "", {}, ""],

    "normalize-path": ["normalize-path@3.0.0", "", {}, ""],

    "normalize-range": ["normalize-range@0.1.2", "", {}, ""],

    "object-assign": ["object-assign@4.1.1", "", {}, ""],

    "object-hash": ["object-hash@3.0.0", "", {}, ""],

    "ofetch": ["ofetch@1.4.1", "", { "dependencies": { "destr": "^2.0.3", "node-fetch-native": "^1.6.4", "ufo": "^1.5.4" } }, ""],

    "ohash": ["ohash@2.0.11", "", {}, "sha512-RdR9FQrFwNBNXAr4GixM8YaRZRJ5PUWbKYbE5eOsrwAjJW0q2REGcf79oYPsLyskQCZG1PLN+S/K1V00joZAoQ=="],

    "oniguruma-parser": ["oniguruma-parser@0.12.1", "", {}, "sha512-8Unqkvk1RYc6yq2WBYRj4hdnsAxVze8i7iPfQr8e4uSP3tRv0rpZcbGUDvxfQQcdwHt/e9PrMvGCsa8OqG9X3w=="],

    "oniguruma-to-es": ["oniguruma-to-es@4.3.3", "", { "dependencies": { "oniguruma-parser": "^0.12.1", "regex": "^6.0.1", "regex-recursion": "^6.0.2" } }, "sha512-rPiZhzC3wXwE59YQMRDodUwwT9FZ9nNBwQQfsd1wfdtlKEyCdRV0avrTcSZ5xlIvGRVPd/cx6ZN45ECmS39xvg=="],

    "openai": ["openai@4.97.0", "", { "dependencies": { "@types/node": "^18.11.18", "@types/node-fetch": "^2.6.4", "abort-controller": "^3.0.0", "agentkeepalive": "^4.2.1", "form-data-encoder": "1.7.2", "formdata-node": "^4.3.2", "node-fetch": "^2.6.7" }, "peerDependencies": { "ws": "^8.18.0", "zod": "^3.23.8" }, "optionalPeers": ["ws", "zod"], "bin": { "openai": "bin/cli" } }, "sha512-LRoiy0zvEf819ZUEJhgfV8PfsE8G5WpQi4AwA1uCV8SKvvtXQkoWUFkepD6plqyJQRghy2+AEPQ07FrJFKHZ9Q=="],

    "p-limit": ["p-limit@6.2.0", "", { "dependencies": { "yocto-queue": "^1.1.1" } }, ""],

    "p-queue": ["p-queue@8.1.0", "", { "dependencies": { "eventemitter3": "^5.0.1", "p-timeout": "^6.1.2" } }, ""],

    "p-timeout": ["p-timeout@6.1.4", "", {}, ""],

    "package-json-from-dist": ["package-json-from-dist@1.0.1", "", {}, ""],

    "package-manager-detector": ["package-manager-detector@1.1.0", "", {}, ""],

    "pako": ["pako@0.2.9", "", {}, "sha512-NUcwaKxUxWrZLpDG+z/xZaCgQITkA/Dv4V/T6bw7VON6l1Xz/VnrBqrYjZQ12TamKHzITTfOEIYUj48y2KXImA=="],

    "parse-entities": ["parse-entities@4.0.2", "", { "dependencies": { "@types/unist": "^2.0.0", "character-entities-legacy": "^3.0.0", "character-reference-invalid": "^2.0.0", "decode-named-character-reference": "^1.0.0", "is-alphanumerical": "^2.0.0", "is-decimal": "^2.0.0", "is-hexadecimal": "^2.0.0" } }, "sha512-GG2AQYWoLgL877gQIKeRPGO1xF9+eG1ujIb5soS5gPvLQ1y2o8FL90w2QWNdf9I361Mpp7726c+lj3U0qK1uGw=="],

    "parse-latin": ["parse-latin@7.0.0", "", { "dependencies": { "@types/nlcst": "^2.0.0", "@types/unist": "^3.0.0", "nlcst-to-string": "^4.0.0", "unist-util-modify-children": "^4.0.0", "unist-util-visit-children": "^3.0.0", "vfile": "^6.0.0" } }, ""],

    "parse-node-version": ["parse-node-version@1.0.1", "", {}, "sha512-3YHlOa/JgH6Mnpr05jP9eDG254US9ek25LyIxZlDItp2iJtwyaXQb57lBYLdT3MowkUFYEV2XXNAYIPlESvJlA=="],

    "parse5": ["parse5@7.2.1", "", { "dependencies": { "entities": "^4.5.0" } }, ""],

    "path-key": ["path-key@3.1.1", "", {}, ""],

    "path-parse": ["path-parse@1.0.7", "", {}, ""],

    "path-scurry": ["path-scurry@1.11.1", "", { "dependencies": { "lru-cache": "^10.2.0", "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0" } }, ""],

    "picocolors": ["picocolors@1.1.1", "", {}, ""],

    "picomatch": ["picomatch@4.0.2", "", {}, ""],

    "pify": ["pify@4.0.1", "", {}, "sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g=="],

    "pirates": ["pirates@4.0.6", "", {}, ""],

    "postcss": ["postcss@8.5.3", "", { "dependencies": { "nanoid": "^3.3.8", "picocolors": "^1.1.1", "source-map-js": "^1.2.1" } }, ""],

    "postcss-import": ["postcss-import@15.1.0", "", { "dependencies": { "postcss-value-parser": "^4.0.0", "read-cache": "^1.0.0", "resolve": "^1.1.7" }, "peerDependencies": { "postcss": "^8.0.0" } }, ""],

    "postcss-js": ["postcss-js@4.0.1", "", { "dependencies": { "camelcase-css": "^2.0.1" }, "peerDependencies": { "postcss": "^8.4.21" } }, ""],

    "postcss-load-config": ["postcss-load-config@4.0.2", "", { "dependencies": { "lilconfig": "^3.0.0", "yaml": "^2.3.4" }, "peerDependencies": { "postcss": ">=8.0.9", "ts-node": ">=9.0.0" }, "optionalPeers": ["ts-node"] }, ""],

    "postcss-nested": ["postcss-nested@6.2.0", "", { "dependencies": { "postcss-selector-parser": "^6.1.1" }, "peerDependencies": { "postcss": "^8.2.14" } }, ""],

    "postcss-selector-parser": ["postcss-selector-parser@6.0.10", "", { "dependencies": { "cssesc": "^3.0.0", "util-deprecate": "^1.0.2" } }, ""],

    "postcss-value-parser": ["postcss-value-parser@4.2.0", "", {}, ""],

    "prettier": ["prettier@3.5.3", "", { "bin": "bin/prettier.cjs" }, ""],

    "prettier-plugin-astro": ["prettier-plugin-astro@0.14.1", "", { "dependencies": { "@astrojs/compiler": "^2.9.1", "prettier": "^3.0.0", "sass-formatter": "^0.7.6" } }, ""],

    "prettier-plugin-tailwindcss": ["prettier-plugin-tailwindcss@0.6.9", "", { "peerDependencies": { "@ianvs/prettier-plugin-sort-imports": "*", "@prettier/plugin-pug": "*", "@shopify/prettier-plugin-liquid": "*", "@trivago/prettier-plugin-sort-imports": "*", "@zackad/prettier-plugin-twig-melody": "*", "prettier": "^3.0", "prettier-plugin-astro": "*", "prettier-plugin-css-order": "*", "prettier-plugin-import-sort": "*", "prettier-plugin-jsdoc": "*", "prettier-plugin-marko": "*", "prettier-plugin-multiline-arrays": "*", "prettier-plugin-organize-attributes": "*", "prettier-plugin-organize-imports": "*", "prettier-plugin-sort-imports": "*", "prettier-plugin-style-order": "*", "prettier-plugin-svelte": "*" }, "optionalPeers": ["@ianvs/prettier-plugin-sort-imports", "@prettier/plugin-pug", "@shopify/prettier-plugin-liquid", "@trivago/prettier-plugin-sort-imports", "@zackad/prettier-plugin-twig-melody", "prettier-plugin-css-order", "prettier-plugin-import-sort", "prettier-plugin-jsdoc", "prettier-plugin-marko", "prettier-plugin-multiline-arrays", "prettier-plugin-organize-attributes", "prettier-plugin-organize-imports", "prettier-plugin-sort-imports", "prettier-plugin-style-order", "prettier-plugin-svelte"] }, ""],

    "prismjs": ["prismjs@1.30.0", "", {}, ""],

    "prompts": ["prompts@2.4.2", "", { "dependencies": { "kleur": "^3.0.3", "sisteransi": "^1.0.5" } }, ""],

    "prop-types": ["prop-types@15.8.1", "", { "dependencies": { "loose-envify": "^1.4.0", "object-assign": "^4.1.1", "react-is": "^16.13.1" } }, "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg=="],

    "property-information": ["property-information@7.0.0", "", {}, ""],

    "prr": ["prr@1.0.1", "", {}, "sha512-yPw4Sng1gWghHQWj0B3ZggWUm4qVbPwPFcRG8KyxiU7J2OHFSoEHKS+EZ3fv5l1t9CyCiop6l/ZYeWbrgoQejw=="],

    "queue-microtask": ["queue-microtask@1.2.3", "", {}, ""],

    "radix3": ["radix3@1.1.2", "", {}, ""],

    "rdndmb-html5-to-touch": ["rdndmb-html5-to-touch@8.1.2", "", { "dependencies": { "dnd-multi-backend": "^8.1.2", "react-dnd-html5-backend": "^16.0.1", "react-dnd-touch-backend": "^16.0.1" } }, "sha512-efi3MaXYxWaLMd5xzF1bVvmX8erTMhYHSlaMjQe+tynf4IdtgRYfKLwYg+4Z5eq4k7idrjKHQOIMDE6D8LjnOA=="],

    "react": ["react@19.0.0", "", {}, "sha512-V8AVnmPIICiWpGfm6GLzCR/W5FXLchHop40W4nXBmdlEceh16rCN8O8LNWm5bh5XUX91fh7KpA+W0TgMKmgTpQ=="],

    "react-confetti": ["react-confetti@6.4.0", "", { "dependencies": { "tween-functions": "^1.2.0" }, "peerDependencies": { "react": "^16.3.0 || ^17.0.1 || ^18.0.0 || ^19.0.0" } }, "sha512-5MdGUcqxrTU26I2EU7ltkWPwxvucQTuqMm8dUz72z2YMqTD6s9vMcDUysk7n9jnC+lXuCPeJJ7Knf98VEYE9Rg=="],

    "react-dnd": ["react-dnd@16.0.1", "", { "dependencies": { "@react-dnd/invariant": "^4.0.1", "@react-dnd/shallowequal": "^4.0.1", "dnd-core": "^16.0.1", "fast-deep-equal": "^3.1.3", "hoist-non-react-statics": "^3.3.2" }, "peerDependencies": { "@types/hoist-non-react-statics": ">= 3.3.1", "@types/node": ">= 12", "@types/react": ">= 16", "react": ">= 16.14" }, "optionalPeers": ["@types/hoist-non-react-statics", "@types/node", "@types/react"] }, "sha512-QeoM/i73HHu2XF9aKksIUuamHPDvRglEwdHL4jsp784BgUuWcg6mzfxT0QDdQz8Wj0qyRKx2eMg8iZtWvU4E2Q=="],

    "react-dnd-html5-backend": ["react-dnd-html5-backend@16.0.1", "", { "dependencies": { "dnd-core": "^16.0.1" } }, "sha512-Wu3dw5aDJmOGw8WjH1I1/yTH+vlXEL4vmjk5p+MHxP8HuHJS1lAGeIdG/hze1AvNeXWo/JgULV87LyQOr+r5jw=="],

    "react-dnd-multi-backend": ["react-dnd-multi-backend@8.1.2", "", { "dependencies": { "dnd-multi-backend": "^8.1.2", "react-dnd-preview": "^8.1.2" }, "peerDependencies": { "dnd-core": "^16.0.1", "react": "^16.14.0 || ^17.0.2 || ^18.0.0", "react-dnd": "^16.0.1", "react-dom": "^16.14.0 || ^17.0.2 || ^18.0.0" } }, "sha512-Ecj+gwr5B7zRiWqkDU5sUvUmufcu97WnsZFHnqHrWFJhTXAXQnhrperHLFktNP2CnQYtAgbucodr1if0MWpEaA=="],

    "react-dnd-preview": ["react-dnd-preview@8.1.2", "", { "peerDependencies": { "react": "^16.14.0 || ^17.0.2 || ^18.0.0", "react-dnd": "^16.0.1" } }, "sha512-j5M1NcQBItOCYXONRbCNs6MzW7u4KygeOGZlztNNguTs1/f2d7q1fRnQjFLjCpgeg5Gy/JrTFrbRThZglJP5dg=="],

    "react-dnd-touch-backend": ["react-dnd-touch-backend@16.0.1", "", { "dependencies": { "@react-dnd/invariant": "^4.0.1", "dnd-core": "^16.0.1" } }, "sha512-NonoCABzzjyWGZuDxSG77dbgMZ2Wad7eQiCd/ECtsR2/NBLTjGksPUx9UPezZ1nQ/L7iD130Tz3RUshL/ClKLA=="],

    "react-dom": ["react-dom@19.0.0", "", { "dependencies": { "scheduler": "^0.25.0" }, "peerDependencies": { "react": "^19.0.0" } }, "sha512-4GV5sHFG0e/0AD4X+ySy6UJd3jVl1iNsNHdpad0qhABJ11twS3TTBnseqsKurKcsNqCEFeGL3uLpVChpIO3QfQ=="],

    "react-icons": ["react-icons@5.5.0", "", { "peerDependencies": { "react": "*" } }, "sha512-MEFcXdkP3dLo8uumGI5xN3lDFNsRtrjbOEKDLD7yv76v4wpnEq2Lt2qeHaQOr34I/wPN3s3+N08WkQ+CW37Xiw=="],

    "react-is": ["react-is@16.13.1", "", {}, "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="],

    "react-lifecycles-compat": ["react-lifecycles-compat@3.0.4", "", {}, "sha512-fBASbA6LnOU9dOU2eW7aQ8xmYBSXUIWr+UmF9b1efZBazGNO+rcXT/icdKnYm2pTwcRylVUYwW7H1PHfLekVzA=="],

    "react-markdown": ["react-markdown@10.1.0", "", { "dependencies": { "@types/hast": "^3.0.0", "@types/mdast": "^4.0.0", "devlop": "^1.0.0", "hast-util-to-jsx-runtime": "^2.0.0", "html-url-attributes": "^3.0.0", "mdast-util-to-hast": "^13.0.0", "remark-parse": "^11.0.0", "remark-rehype": "^11.0.0", "unified": "^11.0.0", "unist-util-visit": "^5.0.0", "vfile": "^6.0.0" }, "peerDependencies": { "@types/react": ">=18", "react": ">=18" } }, "sha512-qKxVopLT/TyA6BX3Ue5NwabOsAzm0Q7kAPwq6L+wWDwisYs7R8vZ0nRXqq6rkueboxpkjvLGU9fWifiX/ZZFxQ=="],

    "react-modal": ["react-modal@3.16.3", "", { "dependencies": { "exenv": "^1.2.0", "prop-types": "^15.7.2", "react-lifecycles-compat": "^3.0.0", "warning": "^4.0.3" }, "peerDependencies": { "react": "^0.14.0 || ^15.0.0 || ^16 || ^17 || ^18 || ^19", "react-dom": "^0.14.0 || ^15.0.0 || ^16 || ^17 || ^18 || ^19" } }, "sha512-yCYRJB5YkeQDQlTt17WGAgFJ7jr2QYcWa1SHqZ3PluDmnKJ/7+tVU+E6uKyZ0nODaeEj+xCpK4LcSnKXLMC0Nw=="],

    "react-mosaic-component": ["react-mosaic-component@6.1.1", "", { "dependencies": { "classnames": "^2.3.2", "immutability-helper": "^3.1.1", "lodash": "^4.17.21", "prop-types": "^15.8.1", "rdndmb-html5-to-touch": "^8.0.0", "react-dnd": "^16.0.1", "react-dnd-html5-backend": "^16.0.1", "react-dnd-multi-backend": "^8.0.0", "react-dnd-touch-backend": "^16.0.1", "uuid": "^9.0.0" }, "peerDependencies": { "react": ">=16" } }, "sha512-Ivuj6AxRDlo/H8OiEDU1mdgivxuKbwGOa5Ub6Yf+bHcu0JWioT7ttlpCWF63/gKrJBlRMB6fW9/eNOXINg9+Gg=="],

    "react-refresh": ["react-refresh@0.14.2", "", {}, "sha512-jCvmsr+1IUSMUyzOkRcvnVbX3ZYC6g9TDrDbFuFmRDq7PD4yaGbLKNQL6k2jnArV8hjYxh7hVhAZB6s9HDGpZA=="],

    "react-remove-scroll": ["react-remove-scroll@2.6.3", "", { "dependencies": { "react-remove-scroll-bar": "^2.3.7", "react-style-singleton": "^2.2.3", "tslib": "^2.1.0", "use-callback-ref": "^1.3.3", "use-sidecar": "^1.1.3" }, "peerDependencies": { "@types/react": "*", "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-pnAi91oOk8g8ABQKGF5/M9qxmmOPxaAnopyTHYfqYEwJhyFrbbBtHuSgtKEoH0jpcxx5o3hXqH1mNd9/Oi+8iQ=="],

    "react-remove-scroll-bar": ["react-remove-scroll-bar@2.3.8", "", { "dependencies": { "react-style-singleton": "^2.2.2", "tslib": "^2.0.0" }, "peerDependencies": { "@types/react": "*", "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0" }, "optionalPeers": ["@types/react"] }, "sha512-9r+yi9+mgU33AKcj6IbT9oRCO78WriSj6t/cF8DWBZJ9aOGPOTEDvdUDz1FwKim7QXWwmHqtdHnRJfhAxEG46Q=="],

    "react-style-singleton": ["react-style-singleton@2.2.3", "", { "dependencies": { "get-nonce": "^1.0.0", "tslib": "^2.0.0" }, "peerDependencies": { "@types/react": "*", "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-b6jSvxvVnyptAiLjbkWLE/lOnR4lfTtDAl+eUC7RZy+QQWc6wRzIV2CE6xBuMmDxc2qIihtDCZD5NPOFl7fRBQ=="],

    "react-universal-interface": ["react-universal-interface@0.6.2", "", { "peerDependencies": { "react": "*", "tslib": "*" } }, "sha512-dg8yXdcQmvgR13RIlZbTRQOoUrDciFVoSBZILwjE2LFISxZZ8loVJKAkuzswl5js8BHda79bIb2b84ehU8IjXw=="],

    "react-use": ["react-use@17.6.0", "", { "dependencies": { "@types/js-cookie": "^2.2.6", "@xobotyi/scrollbar-width": "^1.9.5", "copy-to-clipboard": "^3.3.1", "fast-deep-equal": "^3.1.3", "fast-shallow-equal": "^1.0.0", "js-cookie": "^2.2.1", "nano-css": "^5.6.2", "react-universal-interface": "^0.6.2", "resize-observer-polyfill": "^1.5.1", "screenfull": "^5.1.0", "set-harmonic-interval": "^1.0.1", "throttle-debounce": "^3.0.1", "ts-easing": "^0.2.0", "tslib": "^2.1.0" }, "peerDependencies": { "react": "*", "react-dom": "*" } }, "sha512-OmedEScUMKFfzn1Ir8dBxiLLSOzhKe/dPZwVxcujweSj45aNM7BEGPb9BEVIgVEqEXx6f3/TsXzwIktNgUR02g=="],

    "read-cache": ["read-cache@1.0.0", "", { "dependencies": { "pify": "^2.3.0" } }, ""],

    "readdirp": ["readdirp@3.6.0", "", { "dependencies": { "picomatch": "^2.2.1" } }, ""],

    "redux": ["redux@4.2.1", "", { "dependencies": { "@babel/runtime": "^7.9.2" } }, "sha512-LAUYz4lc+Do8/g7aeRa8JkyDErK6ekstQaqWQrNRW//MY1TvCEpMtpTWvlQ+FPbWCx+Xixu/6SHt5N0HR+SB4w=="],

    "regenerator-runtime": ["regenerator-runtime@0.14.1", "", {}, ""],

    "regex": ["regex@6.0.1", "", { "dependencies": { "regex-utilities": "^2.3.0" } }, "sha512-uorlqlzAKjKQZ5P+kTJr3eeJGSVroLKoHmquUj4zHWuR+hEyNqlXsSKlYYF5F4NI6nl7tWCs0apKJ0lmfsXAPA=="],

    "regex-recursion": ["regex-recursion@6.0.2", "", { "dependencies": { "regex-utilities": "^2.3.0" } }, "sha512-0YCaSCq2VRIebiaUviZNs0cBz1kg5kVS2UKUfNIx8YVs1cN3AV7NTctO5FOKBA+UT2BPJIWZauYHPqJODG50cg=="],

    "regex-utilities": ["regex-utilities@2.3.0", "", {}, ""],

    "rehype": ["rehype@13.0.2", "", { "dependencies": { "@types/hast": "^3.0.0", "rehype-parse": "^9.0.0", "rehype-stringify": "^10.0.0", "unified": "^11.0.0" } }, ""],

    "rehype-katex": ["rehype-katex@7.0.1", "", { "dependencies": { "@types/hast": "^3.0.0", "@types/katex": "^0.16.0", "hast-util-from-html-isomorphic": "^2.0.0", "hast-util-to-text": "^4.0.0", "katex": "^0.16.0", "unist-util-visit-parents": "^6.0.0", "vfile": "^6.0.0" } }, "sha512-OiM2wrZ/wuhKkigASodFoo8wimG3H12LWQaH8qSPVJn9apWKFSH3YOCtbKpBorTVw/eI7cuT21XBbvwEswbIOA=="],

    "rehype-parse": ["rehype-parse@9.0.1", "", { "dependencies": { "@types/hast": "^3.0.0", "hast-util-from-html": "^2.0.0", "unified": "^11.0.0" } }, ""],

    "rehype-raw": ["rehype-raw@7.0.0", "", { "dependencies": { "@types/hast": "^3.0.0", "hast-util-raw": "^9.0.0", "vfile": "^6.0.0" } }, ""],

    "rehype-stringify": ["rehype-stringify@10.0.1", "", { "dependencies": { "@types/hast": "^3.0.0", "hast-util-to-html": "^9.0.0", "unified": "^11.0.0" } }, ""],

    "remark-gfm": ["remark-gfm@4.0.1", "", { "dependencies": { "@types/mdast": "^4.0.0", "mdast-util-gfm": "^3.0.0", "micromark-extension-gfm": "^3.0.0", "remark-parse": "^11.0.0", "remark-stringify": "^11.0.0", "unified": "^11.0.0" } }, ""],

    "remark-math": ["remark-math@6.0.0", "", { "dependencies": { "@types/mdast": "^4.0.0", "mdast-util-math": "^3.0.0", "micromark-extension-math": "^3.0.0", "unified": "^11.0.0" } }, "sha512-MMqgnP74Igy+S3WwnhQ7kqGlEerTETXMvJhrUzDikVZ2/uogJCb+WHUg97hK9/jcfc0dkD73s3LN8zU49cTEtA=="],

    "remark-parse": ["remark-parse@11.0.0", "", { "dependencies": { "@types/mdast": "^4.0.0", "mdast-util-from-markdown": "^2.0.0", "micromark-util-types": "^2.0.0", "unified": "^11.0.0" } }, ""],

    "remark-rehype": ["remark-rehype@11.1.1", "", { "dependencies": { "@types/hast": "^3.0.0", "@types/mdast": "^4.0.0", "mdast-util-to-hast": "^13.0.0", "unified": "^11.0.0", "vfile": "^6.0.0" } }, ""],

    "remark-smartypants": ["remark-smartypants@3.0.2", "", { "dependencies": { "retext": "^9.0.0", "retext-smartypants": "^6.0.0", "unified": "^11.0.4", "unist-util-visit": "^5.0.0" } }, ""],

    "remark-stringify": ["remark-stringify@11.0.0", "", { "dependencies": { "@types/mdast": "^4.0.0", "mdast-util-to-markdown": "^2.0.0", "unified": "^11.0.0" } }, ""],

    "resize-observer-polyfill": ["resize-observer-polyfill@1.5.1", "", {}, "sha512-LwZrotdHOo12nQuZlHEmtuXdqGoOD0OhaxopaNFxWzInpEgaLWoVuAMbTzixuosCx2nEG58ngzW3vxdWoxIgdg=="],

    "resolve": ["resolve@1.22.10", "", { "dependencies": { "is-core-module": "^2.16.0", "path-parse": "^1.0.7", "supports-preserve-symlinks-flag": "^1.0.0" }, "bin": "bin/resolve" }, ""],

    "restructure": ["restructure@3.0.2", "", {}, "sha512-gSfoiOEA0VPE6Tukkrr7I0RBdE0s7H1eFCDBk05l1KIQT1UIKNc5JZy6jdyW6eYH3aR3g5b3PuL77rq0hvwtAw=="],

    "retext": ["retext@9.0.0", "", { "dependencies": { "@types/nlcst": "^2.0.0", "retext-latin": "^4.0.0", "retext-stringify": "^4.0.0", "unified": "^11.0.0" } }, ""],

    "retext-latin": ["retext-latin@4.0.0", "", { "dependencies": { "@types/nlcst": "^2.0.0", "parse-latin": "^7.0.0", "unified": "^11.0.0" } }, ""],

    "retext-smartypants": ["retext-smartypants@6.2.0", "", { "dependencies": { "@types/nlcst": "^2.0.0", "nlcst-to-string": "^4.0.0", "unist-util-visit": "^5.0.0" } }, ""],

    "retext-stringify": ["retext-stringify@4.0.0", "", { "dependencies": { "@types/nlcst": "^2.0.0", "nlcst-to-string": "^4.0.0", "unified": "^11.0.0" } }, ""],

    "reusify": ["reusify@1.1.0", "", {}, ""],

    "rollup": ["rollup@4.36.0", "", { "dependencies": { "@types/estree": "1.0.6" }, "optionalDependencies": { "@rollup/rollup-darwin-x64": "4.36.0", "fsevents": "~2.3.2" }, "bin": "dist/bin/rollup" }, ""],

    "rtl-css-js": ["rtl-css-js@1.16.1", "", { "dependencies": { "@babel/runtime": "^7.1.2" } }, "sha512-lRQgou1mu19e+Ya0LsTvKrVJ5TYUbqCVPAiImX3UfLTenarvPUl1QFdvu5Z3PYmHT9RCcwIfbjRQBntExyj3Zg=="],

    "run-parallel": ["run-parallel@1.2.0", "", { "dependencies": { "queue-microtask": "^1.2.2" } }, ""],

    "s.color": ["s.color@0.0.15", "", {}, ""],

    "safe-buffer": ["safe-buffer@5.2.1", "", {}, "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="],

    "safer-buffer": ["safer-buffer@2.1.2", "", {}, "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="],

    "sass-formatter": ["sass-formatter@0.7.9", "", { "dependencies": { "suf-log": "^2.5.3" } }, ""],

    "sax": ["sax@1.4.1", "", {}, "sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg=="],

    "scheduler": ["scheduler@0.25.0", "", {}, "sha512-xFVuu11jh+xcO7JOAGJNOXld8/TcEHK/4CituBUeUb5hqxJLj9YuemAEuvm9gQ/+pgXYfbQuqAkiYu+u7YEsNA=="],

    "screenfull": ["screenfull@5.2.0", "", {}, "sha512-9BakfsO2aUQN2K9Fdbj87RJIEZ82Q9IGim7FqM5OsebfoFC6ZHXgDq/KvniuLTPdeM8wY2o6Dj3WQ7KeQCj3cA=="],

    "secure-json-parse": ["secure-json-parse@2.7.0", "", {}, "sha512-6aU+Rwsezw7VR8/nyvKTx8QpWH9FrcYiXXlqC4z5d5XQBDRqtbfsRjnwGyqbi3gddNtWHuEk9OANUotL26qKUw=="],

    "semver": ["semver@7.7.1", "", { "bin": "bin/semver.js" }, ""],

    "set-harmonic-interval": ["set-harmonic-interval@1.0.1", "", {}, "sha512-AhICkFV84tBP1aWqPwLZqFvAwqEoVA9kxNMniGEUvzOlm4vLmOFLiTT3UZ6bziJTy4bOVpzWGTfSCbmaayGx8g=="],

    "sharp": ["sharp@0.33.5", "", { "dependencies": { "color": "^4.2.3", "detect-libc": "^2.0.3", "semver": "^7.6.3" }, "optionalDependencies": { "@img/sharp-darwin-x64": "0.33.5", "@img/sharp-libvips-darwin-x64": "1.0.4" } }, ""],

    "shebang-command": ["shebang-command@2.0.0", "", { "dependencies": { "shebang-regex": "^3.0.0" } }, ""],

    "shebang-regex": ["shebang-regex@3.0.0", "", {}, ""],

    "shiki": ["shiki@3.3.0", "", { "dependencies": { "@shikijs/core": "3.3.0", "@shikijs/engine-javascript": "3.3.0", "@shikijs/engine-oniguruma": "3.3.0", "@shikijs/langs": "3.3.0", "@shikijs/themes": "3.3.0", "@shikijs/types": "3.3.0", "@shikijs/vscode-textmate": "^10.0.2", "@types/hast": "^3.0.4" } }, "sha512-j0Z1tG5vlOFGW8JVj0Cpuatzvshes7VJy5ncDmmMaYcmnGW0Js1N81TOW98ivTFNZfKRn9uwEg/aIm638o368g=="],

    "signal-exit": ["signal-exit@4.1.0", "", {}, ""],

    "simple-swizzle": ["simple-swizzle@0.2.2", "", { "dependencies": { "is-arrayish": "^0.3.1" } }, ""],

    "sisteransi": ["sisteransi@1.0.5", "", {}, ""],

    "smol-toml": ["smol-toml@1.3.1", "", {}, ""],

    "source-map": ["source-map@0.6.1", "", {}, "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="],

    "source-map-js": ["source-map-js@1.2.1", "", {}, ""],

    "space-separated-tokens": ["space-separated-tokens@2.0.2", "", {}, ""],

    "stack-generator": ["stack-generator@2.0.10", "", { "dependencies": { "stackframe": "^1.3.4" } }, "sha512-mwnua/hkqM6pF4k8SnmZ2zfETsRUpWXREfA/goT8SLCV4iOFa4bzOX2nDipWAZFPTjLvQB82f5yaodMVhK0yJQ=="],

    "stackframe": ["stackframe@1.3.4", "", {}, "sha512-oeVtt7eWQS+Na6F//S4kJ2K2VbRlS9D43mAlMyVpVWovy9o+jfgH8O9agzANzaiLjclA0oYzUXEM4PurhSUChw=="],

    "stacktrace-gps": ["stacktrace-gps@3.1.2", "", { "dependencies": { "source-map": "0.5.6", "stackframe": "^1.3.4" } }, "sha512-GcUgbO4Jsqqg6RxfyTHFiPxdPqF+3LFmQhm7MgCuYQOYuWyqxo5pwRPz5d/u6/WYJdEnWfK4r+jGbyD8TSggXQ=="],

    "stacktrace-js": ["stacktrace-js@2.0.2", "", { "dependencies": { "error-stack-parser": "^2.0.6", "stack-generator": "^2.0.5", "stacktrace-gps": "^3.0.4" } }, "sha512-Je5vBeY4S1r/RnLydLl0TBTi3F2qdfWmYsGvtfZgEI+SCprPppaIhQf5nGcal4gI4cGpCV/duLcAzT1np6sQqg=="],

    "string-width": ["string-width@7.2.0", "", { "dependencies": { "emoji-regex": "^10.3.0", "get-east-asian-width": "^1.0.0", "strip-ansi": "^7.1.0" } }, ""],

    "string-width-cjs": ["string-width@4.2.3", "", { "dependencies": { "emoji-regex": "^8.0.0", "is-fullwidth-code-point": "^3.0.0", "strip-ansi": "^6.0.1" } }, ""],

    "stringify-entities": ["stringify-entities@4.0.4", "", { "dependencies": { "character-entities-html4": "^2.0.0", "character-entities-legacy": "^3.0.0" } }, ""],

    "strip-ansi": ["strip-ansi@7.1.0", "", { "dependencies": { "ansi-regex": "^6.0.1" } }, ""],

    "strip-ansi-cjs": ["strip-ansi@6.0.1", "", { "dependencies": { "ansi-regex": "^5.0.1" } }, ""],

    "style-to-js": ["style-to-js@1.1.16", "", { "dependencies": { "style-to-object": "1.0.8" } }, "sha512-/Q6ld50hKYPH3d/r6nr117TZkHR0w0kGGIVfpG9N6D8NymRPM9RqCUv4pRpJ62E5DqOYx2AFpbZMyCPnjQCnOw=="],

    "style-to-object": ["style-to-object@1.0.8", "", { "dependencies": { "inline-style-parser": "0.2.4" } }, "sha512-xT47I/Eo0rwJmaXC4oilDGDWLohVhR6o/xAQcPQN8q6QBuZVL8qMYL85kLmST5cPjAorwvqIA4qXTRQoYHaL6g=="],

    "stylis": ["stylis@4.3.6", "", {}, "sha512-yQ3rwFWRfwNUY7H5vpU0wfdkNSnvnJinhF9830Swlaxl03zsOjCfmX0ugac+3LtK0lYSgwL/KXc8oYL3mG4YFQ=="],

    "sucrase": ["sucrase@3.35.0", "", { "dependencies": { "@jridgewell/gen-mapping": "^0.3.2", "commander": "^4.0.0", "glob": "^10.3.10", "lines-and-columns": "^1.1.6", "mz": "^2.7.0", "pirates": "^4.0.1", "ts-interface-checker": "^0.1.9" }, "bin": { "sucrase": "bin/sucrase", "sucrase-node": "bin/sucrase-node" } }, ""],

    "suf-log": ["suf-log@2.5.3", "", { "dependencies": { "s.color": "0.0.15" } }, ""],

    "supports-preserve-symlinks-flag": ["supports-preserve-symlinks-flag@1.0.0", "", {}, ""],

    "swr": ["swr@2.3.3", "", { "dependencies": { "dequal": "^2.0.3", "use-sync-external-store": "^1.4.0" }, "peerDependencies": { "react": "^16.11.0 || ^17.0.0 || ^18.0.0 || ^19.0.0" } }, "sha512-dshNvs3ExOqtZ6kJBaAsabhPdHyeY4P2cKwRCniDVifBMoG/SVI7tfLWqPXriVspf2Rg4tPzXJTnwaihIeFw2A=="],

    "tailwind-merge": ["tailwind-merge@3.2.0", "", {}, "sha512-FQT/OVqCD+7edmmJpsgCsY820RTD5AkBryuG5IUqR5YQZSdj5xlH5nLgH7YPths7WsLPSpSBNneJdM8aS8aeFA=="],

    "tailwindcss": ["tailwindcss@3.4.17", "", { "dependencies": { "@alloc/quick-lru": "^5.2.0", "arg": "^5.0.2", "chokidar": "^3.6.0", "didyoumean": "^1.2.2", "dlv": "^1.1.3", "fast-glob": "^3.3.2", "glob-parent": "^6.0.2", "is-glob": "^4.0.3", "jiti": "^1.21.6", "lilconfig": "^3.1.3", "micromatch": "^4.0.8", "normalize-path": "^3.0.0", "object-hash": "^3.0.0", "picocolors": "^1.1.1", "postcss": "^8.4.47", "postcss-import": "^15.1.0", "postcss-js": "^4.0.1", "postcss-load-config": "^4.0.2", "postcss-nested": "^6.2.0", "postcss-selector-parser": "^6.1.2", "resolve": "^1.22.8", "sucrase": "^3.35.0" }, "bin": { "tailwind": "lib/cli.js", "tailwindcss": "lib/cli.js" } }, ""],

    "tailwindcss-animate": ["tailwindcss-animate@1.0.7", "", { "peerDependencies": { "tailwindcss": ">=3.0.0 || insiders" } }, "sha512-bl6mpH3T7I3UFxuvDEXLxy/VuFxBk5bbzplh7tXI68mwMokNYd1t9qPBHlnyTwfa4JGC4zP516I1hYYtQ/vspA=="],

    "thenify": ["thenify@3.3.1", "", { "dependencies": { "any-promise": "^1.0.0" } }, ""],

    "thenify-all": ["thenify-all@1.6.0", "", { "dependencies": { "thenify": ">= 3.1.0 < 4" } }, ""],

    "throttle-debounce": ["throttle-debounce@3.0.1", "", {}, "sha512-dTEWWNu6JmeVXY0ZYoPuH5cRIwc0MeGbJwah9KUNYSJwommQpCzTySTpEe8Gs1J23aeWEuAobe4Ag7EHVt/LOg=="],

    "throttleit": ["throttleit@2.1.0", "", {}, "sha512-nt6AMGKW1p/70DF/hGBdJB57B8Tspmbp5gfJ8ilhLnt7kkr2ye7hzD6NVG8GGErk2HWF34igrL2CXmNIkzKqKw=="],

    "throttles": ["throttles@1.0.1", "", {}, ""],

    "tiny-inflate": ["tiny-inflate@1.0.3", "", {}, "sha512-pkY1fj1cKHb2seWDy0B16HeWyczlJA9/WW3u3c4z/NiWDsO3DOU5D7nhTLE9CF0yXv/QZFY7sEJmj24dK+Rrqw=="],

    "tinyexec": ["tinyexec@0.3.2", "", {}, ""],

    "tinyglobby": ["tinyglobby@0.2.12", "", { "dependencies": { "fdir": "^6.4.3", "picomatch": "^4.0.2" } }, ""],

    "to-regex-range": ["to-regex-range@5.0.1", "", { "dependencies": { "is-number": "^7.0.0" } }, ""],

    "toggle-selection": ["toggle-selection@1.0.6", "", {}, "sha512-BiZS+C1OS8g/q2RRbJmy59xpyghNBqrr6k5L/uKBGRsTfxmu3ffiRnd8mlGPUVayg8pvfi5urfnu8TU7DVOkLQ=="],

    "tr46": ["tr46@0.0.3", "", {}, "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="],

    "trim-lines": ["trim-lines@3.0.1", "", {}, ""],

    "trough": ["trough@2.2.0", "", {}, ""],

    "ts-easing": ["ts-easing@0.2.0", "", {}, "sha512-Z86EW+fFFh/IFB1fqQ3/+7Zpf9t2ebOAxNI/V6Wo7r5gqiqtxmgTlQ1qbqQcjLKYeSHPTsEmvlJUDg/EuL0uHQ=="],

    "ts-interface-checker": ["ts-interface-checker@0.1.13", "", {}, ""],

    "tsconfck": ["tsconfck@3.1.5", "", { "peerDependencies": { "typescript": "^5.0.0" }, "bin": "bin/tsconfck.js" }, ""],

    "tslib": ["tslib@2.8.1", "", {}, "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w=="],

    "tween-functions": ["tween-functions@1.2.0", "", {}, "sha512-PZBtLYcCLtEcjL14Fzb1gSxPBeL7nWvGhO5ZFPGqziCcr8uvHp0NDmdjBchp6KHL+tExcg0m3NISmKxhU394dA=="],

    "type-fest": ["type-fest@4.37.0", "", {}, ""],

    "typescript": ["typescript@5.8.2", "", { "bin": { "tsc": "bin/tsc", "tsserver": "bin/tsserver" } }, ""],

    "ufo": ["ufo@1.5.4", "", {}, ""],

    "ultrahtml": ["ultrahtml@1.6.0", "", {}, "sha512-R9fBn90VTJrqqLDwyMph+HGne8eqY1iPfYhPzZrvKpIfwkWZbcYlfpsb8B9dTvBfpy1/hqAD7Wi8EKfP9e8zdw=="],

    "uncrypto": ["uncrypto@0.1.3", "", {}, ""],

    "undici-types": ["undici-types@6.21.0", "", {}, "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ=="],

    "unicode-properties": ["unicode-properties@1.4.1", "", { "dependencies": { "base64-js": "^1.3.0", "unicode-trie": "^2.0.0" } }, "sha512-CLjCCLQ6UuMxWnbIylkisbRj31qxHPAurvena/0iwSVbQ2G1VY5/HjV0IRabOEbDHlzZlRdCrD4NhB0JtU40Pg=="],

    "unicode-trie": ["unicode-trie@2.0.0", "", { "dependencies": { "pako": "^0.2.5", "tiny-inflate": "^1.0.0" } }, "sha512-x7bc76x0bm4prf1VLg79uhAzKw8DVboClSN5VxJuQ+LKDOVEW9CdH+VY7SP+vX7xCYQqzzgQpFqz15zeLvAtZQ=="],

    "unified": ["unified@11.0.5", "", { "dependencies": { "@types/unist": "^3.0.0", "bail": "^2.0.0", "devlop": "^1.0.0", "extend": "^3.0.0", "is-plain-obj": "^4.0.0", "trough": "^2.0.0", "vfile": "^6.0.0" } }, ""],

    "unifont": ["unifont@0.4.1", "", { "dependencies": { "css-tree": "^3.0.0", "ohash": "^2.0.0" } }, "sha512-zKSY9qO8svWYns+FGKjyVdLvpGPwqmsCjeJLN1xndMiqxHWBAhoWDMYMG960MxeV48clBmG+fDP59dHY1VoZvg=="],

    "unist-util-find-after": ["unist-util-find-after@5.0.0", "", { "dependencies": { "@types/unist": "^3.0.0", "unist-util-is": "^6.0.0" } }, ""],

    "unist-util-is": ["unist-util-is@6.0.0", "", { "dependencies": { "@types/unist": "^3.0.0" } }, ""],

    "unist-util-modify-children": ["unist-util-modify-children@4.0.0", "", { "dependencies": { "@types/unist": "^3.0.0", "array-iterate": "^2.0.0" } }, ""],

    "unist-util-position": ["unist-util-position@5.0.0", "", { "dependencies": { "@types/unist": "^3.0.0" } }, ""],

    "unist-util-remove-position": ["unist-util-remove-position@5.0.0", "", { "dependencies": { "@types/unist": "^3.0.0", "unist-util-visit": "^5.0.0" } }, ""],

    "unist-util-stringify-position": ["unist-util-stringify-position@4.0.0", "", { "dependencies": { "@types/unist": "^3.0.0" } }, ""],

    "unist-util-visit": ["unist-util-visit@5.0.0", "", { "dependencies": { "@types/unist": "^3.0.0", "unist-util-is": "^6.0.0", "unist-util-visit-parents": "^6.0.0" } }, ""],

    "unist-util-visit-children": ["unist-util-visit-children@3.0.0", "", { "dependencies": { "@types/unist": "^3.0.0" } }, ""],

    "unist-util-visit-parents": ["unist-util-visit-parents@6.0.1", "", { "dependencies": { "@types/unist": "^3.0.0", "unist-util-is": "^6.0.0" } }, ""],

    "unstorage": ["unstorage@1.15.0", "", { "dependencies": { "anymatch": "^3.1.3", "chokidar": "^4.0.3", "destr": "^2.0.3", "h3": "^1.15.0", "lru-cache": "^10.4.3", "node-fetch-native": "^1.6.6", "ofetch": "^1.4.1", "ufo": "^1.5.4" }, "peerDependencies": { "@azure/app-configuration": "^1.8.0", "@azure/cosmos": "^4.2.0", "@azure/data-tables": "^13.3.0", "@azure/identity": "^4.6.0", "@azure/keyvault-secrets": "^4.9.0", "@azure/storage-blob": "^12.26.0", "@capacitor/preferences": "^6.0.3", "@deno/kv": ">=0.9.0", "@netlify/blobs": "^6.5.0 || ^7.0.0 || ^8.1.0", "@planetscale/database": "^1.19.0", "@upstash/redis": "^1.34.3", "@vercel/blob": ">=0.27.1", "@vercel/kv": "^1.0.1", "aws4fetch": "^1.0.20", "db0": ">=0.2.1", "idb-keyval": "^6.2.1", "ioredis": "^5.4.2", "uploadthing": "^7.4.4" }, "optionalPeers": ["@azure/app-configuration", "@azure/cosmos", "@azure/data-tables", "@azure/identity", "@azure/keyvault-secrets", "@azure/storage-blob", "@capacitor/preferences", "@deno/kv", "@netlify/blobs", "@planetscale/database", "@upstash/redis", "@vercel/blob", "@vercel/kv", "aws4fetch", "db0", "idb-keyval", "ioredis", "uploadthing"] }, ""],

    "update-browserslist-db": ["update-browserslist-db@1.1.3", "", { "dependencies": { "escalade": "^3.2.0", "picocolors": "^1.1.1" }, "peerDependencies": { "browserslist": ">= 4.21.0" }, "bin": "cli.js" }, ""],

    "use-callback-ref": ["use-callback-ref@1.3.3", "", { "dependencies": { "tslib": "^2.0.0" }, "peerDependencies": { "@types/react": "*", "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-jQL3lRnocaFtu3V00JToYz/4QkNWswxijDaCVNZRiRTO3HQDLsdu1ZtmIUvV4yPp+rvWm5j0y0TG/S61cuijTg=="],

    "use-sidecar": ["use-sidecar@1.1.3", "", { "dependencies": { "detect-node-es": "^1.1.0", "tslib": "^2.0.0" }, "peerDependencies": { "@types/react": "*", "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc" }, "optionalPeers": ["@types/react"] }, "sha512-Fedw0aZvkhynoPYlA5WXrMCAMm+nSWdZt6lzJQ7Ok8S6Q+VsHmHpRWndVRJ8Be0ZbkfPc5LRYH+5XrzXcEeLRQ=="],

    "use-sync-external-store": ["use-sync-external-store@1.5.0", "", { "peerDependencies": { "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0" } }, "sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A=="],

    "util-deprecate": ["util-deprecate@1.0.2", "", {}, ""],

    "uuid": ["uuid@9.0.1", "", { "bin": { "uuid": "dist/bin/uuid" } }, "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA=="],

    "vfile": ["vfile@6.0.3", "", { "dependencies": { "@types/unist": "^3.0.0", "vfile-message": "^4.0.0" } }, ""],

    "vfile-location": ["vfile-location@5.0.3", "", { "dependencies": { "@types/unist": "^3.0.0", "vfile": "^6.0.0" } }, ""],

    "vfile-message": ["vfile-message@4.0.2", "", { "dependencies": { "@types/unist": "^3.0.0", "unist-util-stringify-position": "^4.0.0" } }, ""],

    "vite": ["vite@6.3.4", "", { "dependencies": { "esbuild": "^0.25.0", "fdir": "^6.4.4", "picomatch": "^4.0.2", "postcss": "^8.5.3", "rollup": "^4.34.9", "tinyglobby": "^0.2.13" }, "optionalDependencies": { "fsevents": "~2.3.3" }, "peerDependencies": { "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0", "jiti": ">=1.21.0", "less": "*", "lightningcss": "^1.21.0", "sass": "*", "sass-embedded": "*", "stylus": "*", "sugarss": "*", "terser": "^5.16.0", "tsx": "^4.8.1", "yaml": "^2.4.2" }, "optionalPeers": ["@types/node", "jiti", "less", "lightningcss", "sass", "sass-embedded", "stylus", "sugarss", "terser", "tsx", "yaml"], "bin": { "vite": "bin/vite.js" } }, "sha512-BiReIiMS2fyFqbqNT/Qqt4CVITDU9M9vE+DKcVAsB+ZV0wvTKd+3hMbkpxz1b+NmEDMegpVbisKiAZOnvO92Sw=="],

    "vitefu": ["vitefu@1.0.6", "", { "peerDependencies": { "vite": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0" } }, ""],

    "warning": ["warning@4.0.3", "", { "dependencies": { "loose-envify": "^1.0.0" } }, "sha512-rpJyN222KWIvHJ/F53XSZv0Zl/accqHR8et1kpaMTD/fLCRxtV8iX8czMzY7sVZupTI3zcUTg8eycS2kNF9l6w=="],

    "web-namespaces": ["web-namespaces@2.0.1", "", {}, ""],

    "web-streams-polyfill": ["web-streams-polyfill@4.0.0-beta.3", "", {}, "sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug=="],

    "webidl-conversions": ["webidl-conversions@3.0.1", "", {}, "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="],

    "whatwg-url": ["whatwg-url@5.0.0", "", { "dependencies": { "tr46": "~0.0.3", "webidl-conversions": "^3.0.0" } }, "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw=="],

    "which": ["which@2.0.2", "", { "dependencies": { "isexe": "^2.0.0" }, "bin": { "node-which": "bin/node-which" } }, ""],

    "which-pm-runs": ["which-pm-runs@1.1.0", "", {}, ""],

    "widest-line": ["widest-line@5.0.0", "", { "dependencies": { "string-width": "^7.0.0" } }, ""],

    "wrap-ansi": ["wrap-ansi@9.0.0", "", { "dependencies": { "ansi-styles": "^6.2.1", "string-width": "^7.0.0", "strip-ansi": "^7.1.0" } }, ""],

    "wrap-ansi-cjs": ["wrap-ansi@7.0.0", "", { "dependencies": { "ansi-styles": "^4.0.0", "string-width": "^4.1.0", "strip-ansi": "^6.0.0" } }, ""],

    "ws": ["ws@8.18.2", "", { "peerDependencies": { "bufferutil": "^4.0.1", "utf-8-validate": ">=5.0.2" }, "optionalPeers": ["bufferutil", "utf-8-validate"] }, "sha512-DMricUmwGZUVr++AEAe2uiVM7UoO9MAVZMDu05UQOaUII0lp+zOzLLU4Xqh/JvTqklB1T4uELaaPBKyjE1r4fQ=="],

    "xxhash-wasm": ["xxhash-wasm@1.1.0", "", {}, ""],

    "yallist": ["yallist@3.1.1", "", {}, "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g=="],

    "yaml": ["yaml@2.7.0", "", { "bin": "bin.mjs" }, ""],

    "yargs-parser": ["yargs-parser@21.1.1", "", {}, ""],

    "yocto-queue": ["yocto-queue@1.2.0", "", {}, ""],

    "yocto-spinner": ["yocto-spinner@0.2.1", "", { "dependencies": { "yoctocolors": "^2.1.1" } }, ""],

    "yoctocolors": ["yoctocolors@2.1.1", "", {}, ""],

    "zod": ["zod@3.24.2", "", {}, ""],

    "zod-to-json-schema": ["zod-to-json-schema@3.24.5", "", { "peerDependencies": { "zod": "^3.24.1" } }, "sha512-/AuWwMP+YqiPbsJx5D6TfgRTc4kTLjsh5SOcd4bLsfUg2RcEXrFMJl1DGgdHy2aCfsIA/cr/1JM0xcB2GZji8g=="],

    "zod-to-ts": ["zod-to-ts@1.2.0", "", { "peerDependencies": { "typescript": "^4.9.4 || ^5.0.2", "zod": "^3" } }, ""],

    "zwitch": ["zwitch@2.0.4", "", {}, ""],

    "@ai-sdk/ui-utils/zod-to-json-schema": ["zod-to-json-schema@3.24.4", "", { "peerDependencies": { "zod": "^3.24.1" } }, ""],

    "@astrojs/react/ultrahtml": ["ultrahtml@1.5.3", "", {}, ""],

    "@astrojs/react/vite": ["vite@6.2.2", "", { "dependencies": { "esbuild": "^0.25.0", "postcss": "^8.5.3", "rollup": "^4.30.1" }, "optionalDependencies": { "fsevents": "~2.3.3" }, "peerDependencies": { "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0", "jiti": ">=1.21.0", "less": "*", "lightningcss": "^1.21.0", "sass": "*", "sass-embedded": "*", "stylus": "*", "sugarss": "*", "terser": "^5.16.0", "tsx": "^4.8.1", "yaml": "^2.4.2" }, "optionalPeers": ["@types/node", "less", "lightningcss", "sass", "sass-embedded", "stylus", "sugarss", "terser", "tsx"], "bin": "bin/vite.js" }, ""],

    "@babel/core/semver": ["semver@6.3.1", "", { "bin": "bin/semver.js" }, "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA=="],

    "@babel/helper-compilation-targets/lru-cache": ["lru-cache@5.1.1", "", { "dependencies": { "yallist": "^3.0.2" } }, "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w=="],

    "@babel/helper-compilation-targets/semver": ["semver@6.3.1", "", { "bin": "bin/semver.js" }, "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA=="],

    "@isaacs/cliui/string-width": ["string-width@5.1.2", "", { "dependencies": { "eastasianwidth": "^0.2.0", "emoji-regex": "^9.2.2", "strip-ansi": "^7.0.1" } }, ""],

    "@isaacs/cliui/wrap-ansi": ["wrap-ansi@8.1.0", "", { "dependencies": { "ansi-styles": "^6.1.0", "string-width": "^5.0.1", "strip-ansi": "^7.0.1" } }, ""],

    "@rollup/pluginutils/estree-walker": ["estree-walker@2.0.2", "", {}, ""],

    "ansi-align/string-width": ["string-width@4.2.3", "", { "dependencies": { "emoji-regex": "^8.0.0", "is-fullwidth-code-point": "^3.0.0", "strip-ansi": "^6.0.1" } }, ""],

    "anymatch/picomatch": ["picomatch@2.3.1", "", {}, ""],

    "chokidar/glob-parent": ["glob-parent@5.1.2", "", { "dependencies": { "is-glob": "^4.0.1" } }, ""],

    "fast-glob/glob-parent": ["glob-parent@5.1.2", "", { "dependencies": { "is-glob": "^4.0.1" } }, ""],

    "hast-util-to-parse5/property-information": ["property-information@6.5.0", "", {}, ""],

    "make-dir/semver": ["semver@5.7.2", "", { "bin": { "semver": "bin/semver" } }, "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g=="],

    "micromatch/picomatch": ["picomatch@2.3.1", "", {}, ""],

    "nano-css/css-tree": ["css-tree@1.1.3", "", { "dependencies": { "mdn-data": "2.0.14", "source-map": "^0.6.1" } }, "sha512-tRpdppF7TRazZrjJ6v3stzv93qxRcSsFmW6cX0Zm2NVKpxE1WV1HblnghVv9TreireHkqI/VDEsfolRF1p6y7Q=="],

    "openai/@types/node": ["@types/node@18.19.87", "", { "dependencies": { "undici-types": "~5.26.4" } }, "sha512-OIAAu6ypnVZHmsHCeJ+7CCSub38QNBS9uceMQeg7K5Ur0Jr+wG9wEOEvvMbhp09pxD5czIUy/jND7s7Tb6Nw7A=="],

    "parse-entities/@types/unist": ["@types/unist@2.0.11", "", {}, "sha512-CmBKiL6NNo/OqgmMn95Fk9Whlp2mtvIv+KNpQKN2F4SjvrEesubTRWGYSg+BnWZOnlCaSTU1sMpsBOzgbYhnsA=="],

    "postcss-nested/postcss-selector-parser": ["postcss-selector-parser@6.1.2", "", { "dependencies": { "cssesc": "^3.0.0", "util-deprecate": "^1.0.2" } }, ""],

    "prompts/kleur": ["kleur@3.0.3", "", {}, ""],

    "read-cache/pify": ["pify@2.3.0", "", {}, ""],

    "readdirp/picomatch": ["picomatch@2.3.1", "", {}, ""],

    "stacktrace-gps/source-map": ["source-map@0.5.6", "", {}, "sha512-MjZkVp0NHr5+TPihLcadqnlVoGIoWo4IBHptutGh9wI3ttUYvCG26HkSuDi+K6lsZ25syXJXcctwgyVCt//xqA=="],

    "string-width-cjs/emoji-regex": ["emoji-regex@8.0.0", "", {}, ""],

    "string-width-cjs/strip-ansi": ["strip-ansi@6.0.1", "", { "dependencies": { "ansi-regex": "^5.0.1" } }, ""],

    "strip-ansi-cjs/ansi-regex": ["ansi-regex@5.0.1", "", {}, ""],

    "sucrase/commander": ["commander@4.1.1", "", {}, ""],

    "tailwindcss/postcss-selector-parser": ["postcss-selector-parser@6.1.2", "", { "dependencies": { "cssesc": "^3.0.0", "util-deprecate": "^1.0.2" } }, ""],

    "unstorage/chokidar": ["chokidar@4.0.3", "", { "dependencies": { "readdirp": "^4.0.1" } }, ""],

    "vite/fdir": ["fdir@6.4.4", "", { "peerDependencies": { "picomatch": "^3 || ^4" }, "optionalPeers": ["picomatch"] }, "sha512-1NZP+GK4GfuAv3PqKvxQRDMjdSRZjnkq7KfhlNrCNNlZ0ygQFpebfrnfnq/W7fpUnAv9aGWmY1zKx7FYL3gwhg=="],

    "vite/tinyglobby": ["tinyglobby@0.2.13", "", { "dependencies": { "fdir": "^6.4.4", "picomatch": "^4.0.2" } }, "sha512-mEwzpUgrLySlveBwEVDMKk5B57bhLPYovRfPAXD5gA/98Opn0rCDj3GtLwFvCvH5RK9uPCExUROW5NjDwvqkxw=="],

    "wrap-ansi-cjs/ansi-styles": ["ansi-styles@4.3.0", "", { "dependencies": { "color-convert": "^2.0.1" } }, ""],

    "wrap-ansi-cjs/string-width": ["string-width@4.2.3", "", { "dependencies": { "emoji-regex": "^8.0.0", "is-fullwidth-code-point": "^3.0.0", "strip-ansi": "^6.0.1" } }, ""],

    "wrap-ansi-cjs/strip-ansi": ["strip-ansi@6.0.1", "", { "dependencies": { "ansi-regex": "^5.0.1" } }, ""],

    "@isaacs/cliui/string-width/emoji-regex": ["emoji-regex@9.2.2", "", {}, ""],

    "ansi-align/string-width/emoji-regex": ["emoji-regex@8.0.0", "", {}, ""],

    "ansi-align/string-width/strip-ansi": ["strip-ansi@6.0.1", "", { "dependencies": { "ansi-regex": "^5.0.1" } }, ""],

    "nano-css/css-tree/mdn-data": ["mdn-data@2.0.14", "", {}, "sha512-dn6wd0uw5GsdswPFfsgMp5NSB0/aDe6fK94YJV/AJDYXL6HVLWBsxeq7js7Ad+mU2K9LAlwpk6kN2D5mwCPVow=="],

    "openai/@types/node/undici-types": ["undici-types@5.26.5", "", {}, "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA=="],

    "string-width-cjs/strip-ansi/ansi-regex": ["ansi-regex@5.0.1", "", {}, ""],

    "unstorage/chokidar/readdirp": ["readdirp@4.1.2", "", {}, ""],

    "wrap-ansi-cjs/string-width/emoji-regex": ["emoji-regex@8.0.0", "", {}, ""],

    "wrap-ansi-cjs/strip-ansi/ansi-regex": ["ansi-regex@5.0.1", "", {}, ""],

    "ansi-align/string-width/strip-ansi/ansi-regex": ["ansi-regex@5.0.1", "", {}, ""],
  }
}


---
./package.json
---
{
  "name": "aadishv.github.io",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "astro dev --host",
    "start": "astro dev",
    "build": "astro build",
    "preview": "astro preview",
    "format": "prettier --write --plugin-search-dir=. **/*.{cjs,mjs,ts,md,json,astro,css} --ignore-path .gitignore"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.2",
    "astro": "^5.7.10",
    "autoprefixer": "^10.4.13",
    "less": "^4.3.0",
    "postcss": "^8.4.20",
    "prettier": "^3.4.2",
    "prettier-plugin-astro": "0.14.1",
    "prettier-plugin-tailwindcss": "0.6.9",
    "tailwindcss": "^3.3.3",
    "tailwindcss-animate": "^1.0.7"
  },
  "dependencies": {
    "@ai-sdk/google": "^1.2.14",
    "@astrojs/prefetch": "^0.4.1",
    "@astrojs/react": "^4.2.1",
    "@astrojs/tailwind": "^5.1.3",
    "@google/genai": "^0.12.0",
    "@google/generative-ai": "^0.24.1",
    "@radix-ui/react-accordion": "^1.2.8",
    "@radix-ui/react-dialog": "^1.1.11",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.2.2",
    "@radix-ui/react-tabs": "^1.1.9",
    "@types/node": "^22.15.3",
    "@types/react": "^19.0.12",
    "@types/react-dom": "^19.0.4",
    "@xstate/store": "^3.4.1",
    "@yaireo/relative-time": "^1.0.5",
    "ai": "^4.3.13",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^2.28.0",
    "fuse.js": "^7.1.0",
    "hanzi-writer": "^3.7.2",
    "katex": "^0.16.22",
    "lucide-react": "^0.503.0",
    "openai": "^4.97.0",
    "react": "^19.0.0",
    "react-confetti": "^6.4.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.5.0",
    "react-markdown": "^10.1.0",
    "react-modal": "^3.16.3",
    "react-mosaic-component": "^6.1.1",
    "react-use": "^17.6.0",
    "rehype-katex": "^7.0.1",
    "remark-math": "^6.0.0",
    "tailwind-merge": "^3.2.0"
  },
  "packageManager": "npm@11.2.0"
}


---
./postcss.config.js
---
const path = require("path");

module.exports = {
  plugins: {
    tailwindcss: {
      config: path.join(__dirname, "tailwind.config.cjs"), // update this if your path differs!
    },
    autoprefixer: {},
  },
};


---
./runner.sh
---
bun run dev


---
./sandbox.config.json
---
{
  "infiniteLoopProtection": true,
  "hardReloadOnChange": false,
  "view": "browser",
  "template": "node",
  "container": {
    "port": 3000,
    "startScript": "start",
    "node": "14"
  }
}


---
./tailwind.config.cjs
---
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: ["./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue,svg}"],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        lora: ["Lora", "American Typewriter"],
      },
      colors: {
        header: "#0851D0",
        header2: "#82A9E5",
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        rollin: {
          "0%": {
            transform: "translateY(10%)",
            opacity: "0",
          },
          "100%": {
            transform: "translateY(0) rotateX(0deg)",
            opacity: "1",
          },
        },
        "chinese-widen": {
          "0%": {
            width: "0px",
            opacity: 0,
          },
          "75%": {
            width: "1.75rem",
            opacity: 0.2,
          },
          "100%": {
            width: "1.75rem",
            opacity: 1,
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "roll-in": "rollin 1s linear",
        "chinese-widen": "chinese-widen 0.6s linear",
      },
    },
  },
  plugins: [require("@tailwindcss/typography"), require("tailwindcss-animate")],
};


---
./tsconfig.json
---
{
  "extends": "astro/tsconfigs/base",
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "react",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
  // You might need to update the alias in:
  // - .eslintrc.cjs
  // - vite.config.ts
}


---
./test/genai-test.js
---


---
./public/favicon.svg
---
<svg version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
  <circle cx="50" cy="50" r="40" fill="#0851D0"/>
</svg>

---
./src/env.d.ts
---
/// <reference path="../.astro/types.d.ts" />
/// <reference types="astro/client" />

---
./src/content/posts/aoc-24.md
---
---
date: "2025-02-22"
title: "Takeaways from Advent of Code 2024"
description: "Coding puzzles fun"
readMore: true
---

## Introduction

[please ignore how late this is]

This (last? 2024's) winter, I completed the Advent of Code (AoC) 2024 puzzles every night from December 1 through December 25. It was a bit easier for me than for the poor chaps on the East Coast as the puzzles were released at 9:00 pm PT (midnight Eastern time) and I could often have them solved and go to sleep by 10:00 pm. Anyways, here are a few scattered thoughts on what I learned and gained.

This was my first year doing AoC, I only discovered it because of a group of AoC competitors at OHS.

## My setup

- All of my original solutions are in Python. I used the [`advent-of-code-data`](https://github.com/wimglenn/advent-of-code-data) package with a custom runner script to get puzzle input. The runner script basically continuously reran my program with a 5s wait in between in each run. It used `exec` to run my solution so it could declare the puzzle input as a variable and then let my solution access it -- this, of course, ended up not being the best option chiefly because of naming conflicts between the runner script and solutions, but it worked.
- I used the [Zed](https://zed.dev) editor for my solutions, as I have for all of my coding projects for the past year or so. (Sorry VSCode, but I know an Electron app when I see it -- Zed is unimaginably fast)
- For the first few days, I used [Supermaven](https://supermaven.com) code completion because I had it enabled by default and it definitely sped up the process, but stopped after realizing it violated the AoC rules.
- I used a [utilities file](https://github.com/aadishv/aoc/blob/main/utils.py), which basically just stored useful functions and data structures. This ended up being a godsend despite me having to rewrite it about 2-3 times.
  This included vector2 and grid classes, a myriad group of list-related utilities, tools for parsing inputs, and many other random things. The most useful utilities by a long shot were the vector and grid classes -- see [this meme](https://www.reddit.com/r/adventofcode/comments/1heuw9l/2024_day_15_im_tired_boss/) to understand. The vast majority of my solutions actually no longer work 😂 because of how often I changed my utilities file. Updating them wouldn't be too hard but I'm too lazy to do so.

## Stuff I learned

I learned _so much_ stuff through doing AoC. Here are the highlights:

**Python-specific**

- How to properly structure a Python project. I haven't done many large Python things in a while, so this was a bit of a refresher.
- Regex! Believe it or not I had near zero experience with regex before AoC, so learning it through a handful of tutorials and getting practice with the `re` library in Python was nice.
- At the time I didn't understand Dijkstra's algorithm or A\* (and would be too lazy to implement them even if I did know them) so I gained a lot of experience using the `networkx` library.
- The Python STD libraries like `itertools`, `functools`, `copy`, and `collections`.

**More generally**

- Problem-solving skills. After (or during) solving a day's puzzle, us OHSers would often trade optimizations and ideas for solutions, which not only helped me solve the tasks but also taught me algorithmic thinking yada yada.
- Thinking about a 2D grid and vectors/vector transformaions - believe me, it becomes much easier to visualize a grid after solving 20 AoC problems about them.
- Patiently waiting for code to finish executing.
- General algorithms -- probably the coolest I learned was dynamic programming (to solve [Day 19](https://adventofcode.com/2024/day/19)).
- A bunch of other things that I'm not willing to explain.

## Standout puzzles

1. My initial solution for [Day 6](https://adventofcode.com/2024/day/6) part 2 didn't work; I still don't know why. I submitted the wrong answer something like 5 times in a row. I eventually (23 hours later, one hour before the next puzzle) buckled down and rewrote it.
2. All of [Day 8](https://adventofcode.com/2024/day/8) was honestly a pain for me, especially since I didn't have good grid or vector utilities then. I would keep on messing up my pluses or minuses or doing a similar silly mistake. It took me a while to do it, despite the problem itself being relatively simple.
3. In [Day 9](https://adventofcode.com/2024/day/8), it took me a while to realize that numbers could be longer than 1 digit 😭.
4. I spent hours pondering [Day 13](https://adventofcode.com/2024/day/13), even rewatching a linear algebra series, before realizing that it was a simple linear equation...
5. [Day 20](https://adventofcode.com/2024/day/20) was an absolute mess, took an hour just for me to understand the problem. Even just using the optimized networkx implementation of Dijkstra's wasn't enough and I had to use a lot of optimizations for part 2.
6. There were around three puzzles that I had to take a hint from the subreddit from, and [Day 21](https://adventofcode.com/2024/day/21) Part 2 was probably the toughest of them. I spent a lot of time figuring out how to create a recursive memoized function for it.
7. Many puzzles in Advent of Code were challenging, but [Day 24](https://adventofcode.com/2024/day/24) Part 2 was the holy grail of AoC problems for me. It took me ages to just find my bearings; I ended up using a hybrid approach using a program to detect errors, manually fixing and noting them, and continuing until it worked. I actually solved Day 24 Part 2 after solving Day 25 Part 1, as I needed to have solved every other problem in order to complete Day 25 Part 2

## Rust!

AoC was a great way to spent my December (perhaps not the best way to spend my finals week) but I quickly got bored as winter break set in and AoC finished. In order to not die of said boredom I decided to learn Rust - a language that I've been wanting to learn for a while (because it looks like Swift, which I love, but is actually cross-platform) but seemed daunting. Welp, I had a lot of free time and nothing else to do, so I YOLOed it and learned Rust.

To be honest, I still only somewhat understand Rust's memory management but just the elegance of the language is amazing -- probably the best DX I've experienced (especially the notion of a unified build tool with `cargo`). In order to gain a better understanding of the language and learn helpful functions, I decided to start redoing some AoC24 puzzles in Rust. I'm only up to day 9 and am currently on a break from them but it was definitely a fun learning experience.

Through the AoC puzzles, I got experience with:

- The Rust compiler
- Cargo's package management (for importing the regex library)
- Using the standard IO crate
- Quirks of Rust (&str vs. String, iterators vs. Vec, etc.)
- More optimizations, especially when rewriting my grid utilities in Rust. Specifically, I tried out storing coordinates as a u16 where the first 8 bits were the x-coordinate and the last 8 bis the y-coordinate, which improved performance a lot :)
- Much much more

Definitely worth my time!

## Conclusion

Just for fun, here is my performance on AoC for the initial (Python) run -- pretty mediocre but still a blast.
![leaderboard](/assets/aoc-24/leaderboard.png)

Check out my [code](https://github.com/aadishv/aoc), including some problems with 2015, 2019, and 2023 for practice, and my [Rust code](https://github.com/aadishv/aoc/tree/main/aoc_rust).

Thanks for reading and following along with this adventure!


---
./src/content/posts/ekudos.md
---
---
date: "2025-03-24"
title: "Using code to simplify a repetitive task"
description: "OHS rules"
readMore: true
---

The post I wrote yesterday was quite the best, so today I'll keep it short :)

**The problem**

Halfway through each semester, before a break, OHS has a spirit week, where grades compete to win the most points. Last fall, us middle schoolers dominated, but this spring, we were demoted to third place 😭

_Anyways_, one way to earn points for your grade is to send eKudos to your friends (or anyone, or teachers, etc.). This year, I am volunteering on OHS's Board of Communications, where we made a Google Form to collect the messages. Now we have a spreadsheet of about 1700 messages to send.

Clearly, the manual way to do this is not ideal.

1. Choose a person.
2. Make a list of all of the messages sent to that person.
3. Copy and paste those messages into a template.
4. Copy and paste the template into an email.
5. Send the email.
6. Repeat steps 1-5 for the ~700 people an eKudo was sent to.

Somehow, our fabulous board chair, Piper, managed to do this all herself last fall, but this is 2025, we shouldn't have to subject humans to doing this kind of thing.

**Code to the rescue**

This is obviously a match for a simple script. As usual for these small projects, I used Python with `uv`. We start off by exporting the spreadsheet to a TSV file, which looks something like this:

```TSV
fakeuser1@ohs.stanford.edu	Hey! Hope you're having a great week. Thanks for being such a positive influence in class!
fakeuser2@ohs.stanford.edu	Just wanted to say you're doing awesome! Keep up the great work.
fakeuser3@ohs.stanford.edu	Thanks for always being willing to help out. You're a true friend!
fakeuser4@ohs.stanford.edu	I really appreciate your insights in our discussions. You bring a unique perspective.
fakeuser5@ohs.stanford.edu	You're so creative! I love seeing your projects and ideas.
fakeuser6@ohs.stanford.edu	Thanks for making me laugh every day. You're hilarious!
fakeuser7@ohs.stanford.edu	I admire your dedication and hard work. You're an inspiration.
fakeuser8@ohs.stanford.edu	You're a great listener. Thanks for always being there when I need to talk.
fakeuser9@ohs.stanford.edu	Just wanted to send some positive vibes your way! Have a fantastic day.
fakeuser10@ohs.stanford.edu	You're such a kind and caring person. The world needs more people like you.
fakeuser11@ohs.stanford.edu	Thanks for being a great team member. I appreciate your contributions.
fakeuser12@ohs.stanford.edu	You're so talented! I'm always impressed by your skills.
fakeuser13@ohs.stanford.edu	Just wanted to let you know you're appreciated. Keep shining!
```

(the real messages were, of course, slightly more unhinged)

Luckily for me, the TSV was sorted by alphabetical order, meaning each email's messages were grouped together. Thus, a simple for-loop was enough. For a first try, I quickly hacked together a script which used `mailto:` urls that one could click on to open Gmail, with the recipient, message title, and body already filled out, with just the send button waiting to be pressed. It also put each message in a HTML `a` tag so I could upload it to Codepen and share it that way. This worked great on my end, but...

![uh-oh](/assets/ekudos.png)

Ah yes, the classic Microsoft frustrations. I asked Copilot what I could do to make it work, and it told me that Gmail had its own `mailto` equivalent which directly sent the user to gmail (instead of a random mail app). This quick change made the script work perfectly! :D

The script itself is very simple:

<script src="https://gist.github.com/aadishv/0f3698ec722997d69beaf060a45f5d91.js"></script>

Much of it is ai-generated but the core `for` loop at the end is handwritten. Of course this could be refactored in 10 different ways, but it did the job.

**Epilogue**

This ended up dramatically speeding up the process of sending the eKudos! It feels nice to be able to make the world a little bit better, even if it's just with a 30-line, hacked-together Python script. Thanks for reading!


---
./src/content/posts/i-built-a-thing.md
---
+++
date = '2025-03-03'
draft = false
title = 'I built a thing'
description = 'Small tools that make our lives a little bit easier'
tags = ["programming", "javascript", "html"]
+++

I recently made two new tools that improve my life, and hopefully a few other lives:

## Aadish's Periodic Table

This is a very simple periodic table, similar to one to one I built using SwiftUI for Mac a few months ago, but this time with web technologies to make it more accessible.

![Aadish's Periodic Table](/assets/i-built-a-thing/periodic.png)

This was mainly designed for those in the OHS class OC005 (Principles of Chemistry), so it has things like (pretty!) colors to separate types of elements, electron configurations (both full and abbreviated), atomic masses, electronegativities, and fun facts.

## LaTeX to Markdown

All of the Markdown editors I use don't support LaTeX, and there's already a tool to convert LaTeX to an image, and images are (obviously) supported by Markdown, so I just combined them into a very simple tool. (This can also be used in something like Google Docs, etc.)

![LaTeX to Markdown](/assets/i-built-a-thing/latex.png)

## How I built them

These were very simple projects, so no need for a build step of any type (i.e., TypeScript/React/Astro/etc. were not needed). All it took
was HTML and Javascript. I also used some inline CSS, but mostly Tailwind CSS. These were my first projects using Tailwind CSS, and I've found myself really loving it. Note that I did import Tailwind using the CDN, which isn't recommended for production use, but eh, it's fine for a small project like this.

The JavaScript for the periodic table was fairly interesting; I basically have a hierarchy of elements that generates the HTML for the table, which is then inserted into the DOM. Each element has an id which is how I attach the click event listeners. I also embed Fuse.js for the fuzzy search functionality.

## The end!

There are definitely a lot of features that I would love to add to these tools, but honestly they are fine for my use and I've got bigger fish (coding projects) to fry, so I probably won't work on them in the near future. Thanks for reading!


---
./src/content/posts/robotics1.md
---
---
date: "2025-03-23"
title: "Robotics 1: 315P"
description: "Mostly just me nerding out"
readMore: true
---

For much of the Over Under and High Stakes seasons of the VEX V5 Robotics Competition, I served as the lead coder for the middle school team 315P. This post is a collection of my thoughts about working on it :) I might be writing a sequel to this in the coming months about my continued journey with robotics.

## Season 1: Over Under<!-- {"fold":true} -->

_Note from 2025: The following is an unedited copy of a blog post, titled “My Experience Playing in the VEX V5 Robotics Competition” I wrote about my time on the team during Over Under. It was written at the behest of my coach during the beginning of the summer of 2024. 🚨CRINGE ALERT🚨_

The VEX V5 Robotics Competition (V5RC) is a student-centered robotics program which educates teams on crucial skills and techniques. The game for the 2023-2024 season was called _Over Under._ This article is about my experience playing Over Under as part of the team 315P.
![](/assets/robotics/post1/1.png)
_The team receiving the Amaze Award at the world championships. From left to right: Sanvi, Dyuthi, Aadish._

### The Game<!-- {"fold":true} -->

![](/assets/robotics/post1/2.png)
_The V5RC Over Under match field._

Over Under is a soccer-like game, played by two competing alliances (an alliance consists of two teams, each of which builds and competes with one robot) There is a central barrier dividing the field (whose ground is made of foam tiles) into two halves; each half contains a goal to score oddly-shaped triballs in. Each game starts with a few trials on the field and team members can introduce triballs onto a robot under certain conditions (this is called match loading). There are two alliance-specific climbing locations where robots can elevate themselves on poles in the last few seconds of the match to earn a climbing bonus. A match consists of a 15-second autonomous period where robots move on their own and a 1 minute, 45 second driver controlled period. 

Teams can compete in tournaments, in which they play numerous games against other teams. The best performing team at a tournament is crowned tournament champion. By creating an engineering notebook (which details a team’s design process for their robot) and completing an interview, teams also have the opportunity to win various judge’s awards.

Finally, robots can also participate in skills challenges, in which only one robot is on the field (in contrast with the four robots of regular matches) and has one minute to score as highly as possible. The team at a tournament with the highest skills score is crowned skills champion.

### The Team

I was lucky to be part of team 315P, a member of the Paradigm club. Paradigm is an organization of teams in Northern California; all Paradigm teams have team numbers that start with 315. Member teams of Paradigm help out, practice with, and provide parts to one another. 315P is one of Paradigm’s four middle school teams. (V5RC is mostly centered around the high school division, but there are also many middle school teams. There are around 40% less middle school teams.) During Over Under, 315P was a three-person team (including me). I am extremely fortunate to have been able to join mid-season, which is very uncommon amongst V5RC teams. Every member had important designated roles:

- Sanvi, the driver. Sanvi designed and guided our robot build, and contributed the most towards the hardware. She was in charge of every component except the catapult, and often put in a lot of extra work to earn top-tier driver skills.
- Dyuthi, the strategist. Dyuthi partially coded some of the team’s autonomous routines and built and maintained our fabulous catapult. She also worked hand-in-hand with Sanvi to analyze dozens of our past matches before every tournament, allowing the team to develop a dynamic and high-performance game strategy.
- And I, Aadish, a coder. I developed the core autonomous architecture and many of the team’s autonomous programs. I also communicated with our alliance during and before matches; this was a key method the team used to maximize our synergy with alliance partners. 

Overall, each team member had an important role in the team, custom-fit for our ability while also teaching us various life skills. These roles, of course, were not set in stone; it would be a common occurrence to see an all-team discussion on various important aspects of our strategy, from the motions of the robot to size of a component.

### The Robot & Strategy

![](/assets/robotics/post1/3.png)

_Above: our robot, Friday_

The initial “meta” strategy (a meta in robotics is used to describe a trend) was to build a high-performance catapult, which could then shoot triballs over the barrier. There, an alliance partner’s robot could easily sweep triballs into the goal. In order to do this, we built our second robot, named Friday. (I wasn’t there to witness our first robot, Jarvis.) Friday was a simple robot, with a drivetrain that was fairly slow but high-torque, a claw-style intake to hold triballs, a slow but reliable catapult, one set of pneumatic “wings” to push multiple triballs at once, and a motor-powered climb mechanism.
![](/assets/robotics/post1/4.png)
![](/assets/robotics/post1/5.png)
_Above two pictures: our robot, Marvin_

Eventually, though, the game became more defensive. Some smart cookie somewhere realized that with specially shaped wings, robots could easily push over and score triballs catapulted by the opponent alliance. This strategy initiated the rise of robots which, like leeches, stole opponents’ triballs instead of introducing their own. In order to avoid such effective strategies, triball control became the name of the game. This evolved into two main meta strategies. The first is one-by-ones, in which a single triball is placed into a robot’s intake; then, the robot drives over or around the barrier to score it. One-by-ones are almost completely resistant to defense (only inferior to specialized robots which are designed to steal triballs from intakes), but fairly slow in scoring. The second strategy is bowling, in which numerous triballs are placed in front of a robot, which then drives around the barrier to push all of them into the goal. Bowling can easily score one hundred points in a minute, but is more prone to getting disrupted by defense. Most teams, including us, used a combination of the two, in which the strategist makes a choice about which strategy to use based on the state of the match. In order to facilitate this change in game strategy, we built our second robot, Marvin. Marvin maintained the same drivetrain, but added two motors to improve torque (the number of motors doesn’t impact speed). Marvin also had a dramatically improved flex-wheel intake, which eventually became the intake of choice among teams. We also made the catapult faster (however, from that point on, we made the decision to only use the catapult in skills runs, where there was no opponent). Finally, because we moved motors from the climber to the drivetrain, we redesigned our climbing mechanism to be a fast and effective pneumatic hang. We maintained the same wings, as they were super effective in pushing around triballs, but added a second air tank to accommodate the climb. It was with Marvin that we won a tournament for the first (and, unfortunately, last) time.
![](/assets/robotics/post1/6.png)

In the weeks preceding the world championship, as the team reviewed previous matches to finalize the robot design for the final complete rebuild, we noticed a slight shift in strategy yet once more. The best teams began to prioritize a few key elements while removing resources from other components. Specifically, super fast yet high-torque drivetrains became prevalent, a focus was put on optimizing the intake, and a few teams had two sets of wings (each with different designs) for use in particular tasks. Using this information, we built our final bot of the Over Under season, Luna. Luna had a powerful drivetrain, containing the vast majority of our robot’s motors as well as a carefully chosen gear ratio. Luna’s intake was one of the biggest areas of change, though. Through participating in numerous scrimmages (mock tournaments) and reviewing our gameplay, we slowly fine-tuned the flex wheel intake to match the ideal strategy. Thus was created an intake which could effectively intake, outtake, matchload, and score, all within half a second. We added two sets of wings and improved our climb mech using newly available pistons. Also, we made the catapult detachable (since we weren’t planning to use it in matches) and lowered the robot’s center of mass to avoid getting tipped. Luna was the best and final iteration of 315P’s robot, and the design we took to the world championships.

### The Competitions

We went to numerous tournaments and learned a huge amount from each. Here’s a run-down of the key competitions the team had over the season.

- We took Friday to a small, middle school-only tournament in Granite Bay, California during November ’23. There, we made it to the finals and learned a lot about game strategy.
- Our next major event was at the University of California, Berkeley. This was a massive tournament with over one hundred teams from both the middle and high school divisions. We didn’t fare well, and failed to make it to the elimination rounds. However, it was at Berkeley that the team took ideas from the strategies/designs of some of the best high school teams in the world. Unfortunately, I wasn’t able to attend Berkeley :(
- We took a looooooooong winter break to allow for some vacationing and completely revamp our strategy. It was then that we shifted our top priority from just getting practice into qualifying to the regional championship (which we referred to as states, since it had an equivalent purpose as a state championship). States was the next event through which we could qualify to the world championship, and thus we began devotedly attending every local tournament in a feverish hope to qualify.
- We started off by attending two tournaments at the local India Community Center (ICC). They were medium tournaments (around 40-60 teams); because they were combined (high school + middle school) tournaments, the team mostly treated them as practice and opportunities for scouting (that is, identifying possible alliance partners for the state championships). We didn’t do relatively well at either of them.
- After taking notes on so many other teams’ gameplay and robot designs, we finally felt it was the right time. We spent about a week building and familiarizing ourselves with Marvin, with the changes listed above. 
- Next, we went to a Sacramento tournament. This one was a medium-sized one that was middle school-only. With a much more level playing field, we gave it our all and received a just result. We won the tournament, having allianced with the same team which we’d finalized with. This qualified us for the state championships.
- The final major tournament we attended before the state championship was a massive middle-school event, about the same size as Berkeley. We didn’t perform that well, and thus began overhauling our robot starting the very next day.
- Our team realized that the most important way we were going to qualify to the world championships is through skills, and began a long path to improve our skills score by over one hundred points. We improved the catapult, the autonomous code, and the driver strategy; rewrote the driver controls to make them more intuitive; practiced our match loading and wrote specialized code to support it. This all paid off…
- …at the state championship. In matches, we did okay, getting to quarterfinals. In skills, though, we got to second place; since the first place in skills (that is, the skills champion) had already qualified to worlds, we received the qualification that they would have gotten for skills champion. We had, just barely, qualified for the world championship.

### The World Championship<!-- {"fold":true} -->

In a blink of an eye, we were loading the robot onto a plane to Dallas for the world championships. We’d spent hundreds of hours at this point on our final rebuild of the robot, Luna. Luna was a robot that combined all of our previous learnings about robot design into a beast: lightweight, powerful, and efficient. We attended every scrimmage that Paradigm had to offer, playing against our sibling teams in a bid to learn from each other. And, finally, we spent just as much time obsessing over the hundreds of lines of software and the complex game strategy. 

Quick summary of how the world championship worked: about 480 teams attended worlds, which was a 3-day event. We were split into 6 divisions with about 80 teams each. Each division functioned as their own tournament, with independent awards, rankings, etc. The winners of each division would progress into the sports-stadium-like _Dome,_ where they’d compete to crown the world champion.

We had a simple strategy. It could be summarized into one word: _win_. During qualifications, which comprised the vast majority of worlds, our single goal was to have the #1 ranking. Our ranking was based on two main factors: winning matches, and the Autonomous Win Point (AWP, which the robot could earn by completing a set of tasks during the autonomous period). The coach assigned me a single role: getting that autonomous win point.

Qualifications were just absolute mayhem. I was the first person to talk with each of our alliances. For every single match, I’d have to drag out our future alliances into the practice field to test their autonomous programs and compare against ours. This would take about ten minutes; I would then spend anywhere from 5 to 40 more minutes fine-tuning our programs. I would then wheel the robot along with a dozen pounds of support equipment all the way back to our team pit. During matches, I had a less important, yet still vital role: communicating with our alliance to ensure everyone collaborated effectively. After matches, I’d go back to the pit, help my teammates fix and improve the robot, and then pore over footage of our alliance’s and opponent’s matches to determine their game and autonomous strategy. Then, I’d find our future alliance to discuss strategy with. And thus the cycle would start all over again. We ended qualifications ranked fifth out of the 80-some teams, having won 9 out of our 10 matches.

Eliminations were fun, albeit our performance left a bit to be desired. We allianced with one of our sibling teams, 3177B. (I know, they don’t have a 315 team number, but Paradigm considers them to be a member.) Again, I spent another half-hour coordinating autonomous and game strategy with them. By now, I was utterly exhausted, and elimination games offered me some rest. We lost in the quarterfinals, but I am still really happy with how we did. We performed to the best of our ability, and for a team with two rookie members (that is, team members who are competing in their first year of V5RC), I was honestly pretty surprised with that degree of ability. An added bonus was that our team received the Amaze award, which was the highest award in our division. This judged-award represented our team’s admirable conduct in matches, skills, interviews, and engineering notebook submissions.

The world championships were, of course, the highlight of the trip, but I want to take a moment to appreciate the magnificent city of Dallas. The Kay Bailey Hutchison Convention Center, where the championships were held, is massive, and deserving to be a city of its own. (No wonder I walked more than 20,000 steps every day!) After getting the awards, the team headed to the dome (also part of the convention center) to watch the world finals. We were delighted to see a team we knew well from our region (1698Y) make it to the world finals, and the following reveal of the next game for V5RC only added to the experience. My dad and I even took one day after worlds to just go sightseeing around Dallas: from the Tex-Mex cuisine to the John F. Kennedy memorial museum to the Reunion Tower to a giant eyeball(?), there were so many amazing sights. The trip to Dallas was definitely worth it.

### Conclusion

I would definitely recommend trying out V5RC or an equivalent competitive robotics program. Over the course of the season, I made new friends, learned life skills, and found out the difference between aluminum and steel screws. It was an overall enlightening experience, and one that I’m excited to continue next season.

_Note from 2025: this ends my blog post_

## Season 2: High Stakes<!-- {"fold":true} -->

Luckily for whoever is still reading this, there are no more cringe blog posts for you read 🥳

After we had finished celebrating our awards, we began working on our robot for the next season, High Stakes. I won’t bother going through the game or the evolution of our robot again, but for reference, [here is a description of the game.](https://www.vexrobotics.com/v5/competition/vrc-current-game) I’m not going to write a sonnet about my time on the team again, but I’d instead like to dive a little more into some technical details in this section. I’ll go in order from the bare metal to the code I wrote.

### Kernel

Any and all code I write for the robot runs on the VEX V5 brain:
![](/assets/robotics/post1/7.png)
This runs VEXos, which is not a full-fledged operating system, per se, but enables the execution of custom binaries which can interface with I/O. I/O on the V5 brain includes quite a few things, most of which come from either the screen, the smart ports (pictured above on either vertical side of the screen), or the three-wire ports (not shown above).

- Inputs
  - Touch events on the brain screen
  - Sensing inputs from any smart ports (including motor readings)
  - Sensing inputs from any three-wire ports
  - Battery levels
  - Reading files from the SD slot
  - Serial over the USB port
- Outputs
  - Displaying things on the brain screen
  - Actuators (mostly motors)
  - Pneumatics over three-wire ports
  - Writing files onto the SD slot
  - Serial over the USB port

Typically, these binaries are built and uploaded through VEX’s proprietary IDE, [VEXcode](https://www.vexrobotics.com/vexcode), or its corresponding VScode extension. However, there is also a division of VRC called VEXU, which is a collegiate-level version of the competition with more coding, two robots per team, and a few other different things. It turns out that Purdue University has a VEXU team, BLRS the Purdue ACM SIGBots (one of my all-time favorite teams :D), and _clearly_ college students have too much time because they wrote their own operating system for the V5…

### PROS<!-- {"fold":true} -->

[PROS](https://pros.cs.purdue.edu/) (either Purdue Robotics Operating System, or the infamously recursive PROS Robotics Operating System) is a custom RTOS built on top of the V5’s VEXos kernel by the Purdue Sigbots team. It looks something like this:

- You write C++ code that calls PROS APIs
- PROS uses a custom build tool to build it into a binary that accesses the correct I/O on the V5
- You upload the binary (or a differential patch to the binary) to the V5, which then runs it using its kernel
- Voila! Your robot does things

“Wait but this is just what VEXcode does 🤓”… yes, that is true. However, PROS is chosen by the top teams for a number of reasons:

- Documentation. PROS has actually well-documented APIs compared to the mess of VEX APIs. For example, VEX only somewhat [documented their APIs a few months ago](https://api.vex.com/) — even though they’ve existed for years!
- External libraries. VEXcode’s tough integration with other tools makes it hard to have a proper package management system. In contrast, PROS has a robust library ecosystem with hundreds if not more packages ready to install via their CLI (another thing that VEXcode doesn’t have).
- IDE integration. While PROS has a recommended VSCode plugin, its extensible CLI means you can code in it from everywhere (including [Zed](https://zed.dev), my favorite code editor). VEXcode can only be used from their proprietary app or VSCode extension. Also, VEXcode has _very_ weird code structure, while PROS’ is just regular C++ with cpp and header files.
- PROS is open-source! All of VEXCode’s APIs and protocols are closed-source (although the SIGbots team got access to it under a NDA to develop PROS) while every single bit of PROS is open-source and on [Github](https://github.com/purduesigbots/pros). This has enabled the community to do a bunch of cool things. The coolest of these, in my opinion, is [vexide](https://vexide.dev/), which is a runtime like PROS for the V5, with two major differences. 1) It supports async. But wait, C++ doesn’t have async. And then we have 2) _It’s written in Rust!_

This is hopefully enough to convice anyone to switch to PROS! Time to go one abstraction level higher.

### VOSS<!-- {"fold":true} -->

[VOSS](https://github.com/purduesigbots/VOSS) is a PROS library which includes utilities for robots. It contains quite a few utilities:

- Motion, including custom path planning, PID, motion controllers, etc.
- An autonomous routine selector (wait a little bit more to learn what that means!)
- Odometry. This is basically some math that takes in sensor readings (namely, from inertial movement units and unpowered tracking wheels) and does trigonometry to determine the robot’s position and orientation.

Each of these things on its own isn’t super hard, but VOSS packages them all neatly into one, well, package. There are other libraries in this space, like [LemLib](https://github.com/LemLib/LemLib), but I chose VOSS for our codebase because 1) it supported the newest PROS version (4.0), 2) it was written by Purdue SIGbots, who also maintained PROS, and 3) it had an intuitive and well-structured API that put my code to shame. VOSS is truly magic; it replaces about two hundred lines of odometry code, followed by dozens of lines of path planning math, followed by another hundred lines of PID controls, with this:

```cpp
chassis.move({1.0, 1.0, 30}, 100, voss::Flags::RELATIVE);
```

It’s honestly insane how much thought the SIGbots team put into this, so please give them a ⭐ on Github :)

### My code

All of the above work is either of VEX or the SIGbots, so it’s finally time to dive into _my_ code! All of the code I’m talking about is from [this repo](https://github.com/aadishv/HighStakes). My code is honestly very simple, less than 500 lines, so this overview ought to be pretty short.

**Level 1: Wrappers**

VOSS provides an excellent API surface to build off of, but at the time of writing the initial codebase, the team was considering adding another coder, and to simplify their onboarding, I decided to write yet another wrapper over VOSS which abstracts even more away. Namely, it handles the motor setup, odometry parameters, etc., and limits the number of functions that could be called (as a means of enforcing that other coders wrote appropriate code). Here is a basic header containing basically the entire wrapper API:

```cpp
// before this, there are about 50-100 `#define`s which store the config parameters for all of our code.
// all `#include` or `use` calls are omitted
// [a number of internal functions]

namespace robot {
    void rumble(const char* sequence);
    void log(std::string message, std::string end = "\n");
    void log_pose(std::string end = "\n");
    enum class Direction;
    extern pros::Controller controller;
}

namespace robot::selector {
    void init(std::map<std::string, void(*)()> game_autons, VoidFn skills_auton, int default_auton, bool show_graphics = true);
    void run_auton();
}

namespace robot::auton {
    void start(voss::Pose starting_pose);
    void checkpoint(std::optional<std::string> point = std::nullopt);
    void end();
}

namespace robot::drive {
    extern bool mirrored; // false = red
    void init();
    void face(double angle, double speed = 100);
    void go(double distance, float speed = 100);
    void swing(double angle, bool reversed = false);
    void set_mirroring(bool state);
    void set_position(voss::Pose position);
}

namespace robot::subsys {
    void init();
    extern Direction intake_state;
    void intake(Direction direction, float speed = 1);
    void wsm(Direction direction, float speed = 1);
}
```

This is quite the shortening from the ~100 public functions that could be called from VOSS. If I wanted to execute a particularly customized motion in a routine, however, I would directly call a VOSS function. A briefly explanation of what each namespace contains:

- `robot` — the root namespace
  - A number of logging functions (including `rumble`, which vibrates the controller according to a specific pattern)
  - `selector` — the autonomous selector
    - Initialize the selector with a `map` matching various routine names to their corresponding functions
    - `run_auton` which ran the selected routine
  - `drive` — the chassis code
    - `set_mirroring` — sets the mirroring of the drivetrain, this will be explained more later
    - The others are fairly self-explanatory, just a collection of simple functions to move the robot around
  - `subsys` — code for controlling other systems on the robot \* Functions for changing the state of other subsystems

Now that this is all out of the way, let’s explain a bit more about the autonomous selector.

**Level 2: The autonomous selector and autonomous routines**

As noted in the first blog post, V5RC matches start with a 15-second autonomous period. This is where the code I write gets executed (there are only ~50 LOC dedicated to running in the driver control period). Strategy in High Stakes is very important; for example, if teams do not coordinate their autonomous strategies, both robots could try to score on their alliance stake at the same time and clash, preventing either one from scoring and messing up the rest of the autonomous routines. Thus, a number of different routines, colloquially known as “autons”, are needed. There is, of course, also a need to choose two things at the beginning of a match: which auton to run, and what side the robot is on (blue or red). The latter is important because in High Stakes, the field is symmetric by reflection (while the Over Under field was symmetric by rotation), creating the need to “mirror” the turns of an autonomous routine if it switches sides. This was handled by our selector, which ended up looking like this:

![](/assets/robotics/post1/8.png)
(ignore the thing at the bottom that says “Skills”.)

When the field control told the robot to run its autonomous, whichever routine had last been clicked on was run. The code for autons themselves look something like this:

```cpp
// code/src/autons.cpp
#include "pros/rtos.hpp"
#include "robot/basics.hpp"
#include "robot/robot.hpp"

using namespace robot;
using namespace robot::drive;
using namespace robot::subsys;
using namespace voss;
// ...
namespace autons::shared {
    /**
     * @brief An auton whose only goal is to gain the Autonomous Win Point (AWP).
     *
     * @note This auton was designed with intake raise and odom.
     *
     * @details
     * Starting position: NR starting position
     * 1. Aligns with alliance wall stake & scores preload
     * 2. Gets mogo
     * 3. Get NR square rings
     * 4. Touch ladder
    //  */
    void awp() {
        auton::start({0,0,180}); // UTB mirrored ? 0 : 180 ; please test auto mirroring
        /**
         * Align with alliance wall stake & score preload
         */
        go(-16);
        face(90);
        go(-9);
        go(-2);
        go(1.75);
        intake(Direction::FORWARD);
        pros::delay(550);
        /**
         * Get mogo
         */
        go(10);
        face(-49);
        mogo.extend();
        go(-27);
        intake(Direction::STOP);
        go(-10, 30);
        mogo.retract();
        pros::delay(800);

        auton::checkpoint("Got mogo");
        /**
         * Get NR square ring
         */
        face(139);
        intake(Direction::FORWARD);
        go(17.5);
        pros::delay(400);
        /**
         * Get ring from stack next to square
         */
        swing(-32, true);
        go(20);
        pros::delay(400);

        auton::checkpoint("Got da goods");
        /**
         * Touch ladder
         */
        go(-25);
        go(-5, 60);

        auton::checkpoint("Touched ladder");
        auton::end();
    }}
// ...
```

That’s basically all I have to say about the robot’s codebase. Hope some of these details were helpful!

## Epilogue<!-- {"fold":true} -->

Due to internal frustrations with how the team was being managed and the lack of focus on coding, I left the team in October 2024. As for the future of the team, they recently qualified to the World Championships by getting a design award at states. Unfortunately, their coding is in limbo at the moment as multiple other coders have left the team or are busy with other extracurriculars. As noted above, to preserve my original code (entirely written by me, with no external authors), I have cloned the repository at the time of my leaving the team in this MIT-licensed [repo](https://github.com/aadishv/HighStakes). Hope this post was helpful/inspiring/something!


---
./src/content/posts/using-chinese.md
---
---
date: "2025-04-10"
title: "Using Aadish's Chinese practice"
description: "A comprehensive guide to using the Chinese practice application"
hidden: true
---

_Aadish's Chinese practice_ is a little tool I've created to help me practice my Chinese.

<span class="underline text-red-500">Warning!</span> This help article was AI-generated with minor edits from me (Aadish). If you still have questions, please feel free to reach out to me (contact details at bottom). Also note this is still in development so there _will_ be breaking changes.

# Using Aadish's Chinese Practice

## Introduction

Aadish's Chinese Practice is an interactive tool designed to help learners practice Chinese characters and pinyin pronunciation. This application offers two distinct practice modes, comprehensive progress tracking, and an intuitive interface to enhance your Chinese language learning experience. All sentences are from the Integrated Chinese textbook and were scraped using Gemini 2.5 Pro Experimental 03-25. All data is stored in local storage, which means I cannot see any of your data.

## Getting Started

### Selecting Practice Mode

The application offers two primary practice modes:

1. **Chinese Character Writing Practice (Default)** - Practice writing Chinese characters stroke by stroke
2. **Pinyin Practice** - Practice typing the correct pinyin with tone marks for given characters

To switch between modes, use the settings menu by clicking the "settings" button in the bottom left corner of the interface. Your selection will persist across sessions.

### Understanding the Interface

The main interface consists of:

- **Sentence Information** - Shows the current lesson and has a clickable English translation
- **Character Practice Area** - Displays characters to practice writing or typing
- **Navigation Options** - Located at the bottom of the screen

## The Traffic Light System

The traffic light indicators are central to tracking your learning progress:

### How Traffic Lights Work

Each character's status is represented by a colored indicator:

- **Green** - Mastered (completed with minimal assistance)
- **Yellow** - Partially learned (completed with moderate assistance)
- **Red** - Needs review (completed with significant assistance)

### State Transitions

Your traffic light status changes based on two factors:

1. **Number of mistakes made**:

   - **Green to Yellow**: After approximately 5 mistakes in character writing mode or 2 mistakes in pinyin mode
   - **Yellow to Red**: After approximately 7 additional mistakes in character writing mode or 2 additional mistakes in pinyin mode

2. **Level of hints requested**:
   - **Green to Yellow**: Automatically transitions when you request "Show outline" (in character mode) or "Show letters" (in pinyin mode)
   - **Yellow to Red**: Automatically transitions when you request "Show solution" in either mode

Once a character reaches the red status, it indicates you should focus additional practice on this character in future sessions.

## Character Writing Practice

In this mode, you practice writing Chinese characters using proper stroke order.

### How to Practice Writing

1. Observe the character and its pinyin displayed above the writing area
2. Draw the character stroke by stroke in the correct order within the writing box
3. If you make a mistake, the application will alert you and allow you to try again
4. Once successfully completed, the system will animate the character to reinforce learning

### Using Hints

If you need assistance:

1. Click **"Show outline"** to display the character outline as a guide (changes status to yellow)
2. Click **"Show solution"** to see an animation of the proper stroke order (changes status to red)
3. Click **"Replay"** after completion to see the animation again (does not affect status)

## Pinyin Practice

In this mode, you practice typing the correct pinyin with tone marks for given characters.

### How to Type Pinyin

1. View the Chinese character displayed
2. Type the correct pinyin with appropriate tone marks in the input field below
3. Press Enter or click the ⏎ button to submit your answer
4. The system will verify your input and provide feedback

### Using Hints

If you need assistance:

1. Click **"Show letters"** to reveal the pinyin without tone marks (changes status to yellow)
2. Click **"Show solution"** to display the complete pinyin with tone marks (changes status to red)

### Input Methods

You can enter pinyin in two formats:

1. **Standard pinyin** with tone marks (e.g., "nǐ")
2. **Number notation** where the number indicates the tone (e.g., "ni3")

Both input methods are accepted by the system.

## Lesson Selection

You can customize which lessons you want to practice:

### Selecting Lessons

1. Click the **"settings"** button at the bottom of the screen
2. In the Settings modal, you'll see a list of all available lessons
3. Check or uncheck lessons according to your learning needs
4. Click **"Select All"** or **"Deselect All"** to quickly modify your selection
5. When no lessons are selected, all lessons will be used by default

## Progress Tracking

### Viewing History

To view your learning history:

1. Click the **"history"** button at the bottom of the screen
2. A modal will display all characters you've practiced with:
   - Traffic light indicators showing mastery level
   - The relative time since last practice
   - Session identifiers for tracking purposes
3. Toggle between "Characters" and "Pinyin" tabs to view your progress in each mode

### Clearing Data

If you wish to reset your progress:

1. Click the **"history"** button to open the history modal
2. Click **"Clear Data"** at the bottom of the modal
3. Confirm the deletion when prompted

## Navigation and Controls

- **help** - Opens this help documentation
- **history** - Shows your learning progress and history
- **settings** - Opens the settings panel to configure mode and lessons
- **skip/continue** - Proceeds to the next sentence without completing the current one or after completion

## Tips for Effective Learning

1. **Practice regularly** - Short, consistent sessions are more effective than occasional long ones
2. **Alternate between modes** - Switch between character writing and pinyin practice for comprehensive learning
3. **Review your history** - Regularly check your progress to identify characters that need extra attention
4. **Use hints strategically** - Try without hints first to maintain a green status, using more assistance only when necessary
5. **Pay attention to traffic lights** - Focus additional practice on characters that consistently show yellow or red status
6. **Select appropriate lessons** - Focus on specific lessons that align with your current learning goals

## Troubleshooting

- If characters don't display correctly, ensure you're using a modern browser with Chinese font support
- If writing recognition seems too strict, try writing more deliberately and following standard stroke order
- Clear your browser cache if you experience unusual behavior or if the application fails to save your progress
- If the application becomes unresponsive, try refreshing the page (your progress is automatically saved)

---

For additional assistance or to report issues, please contact me (Aadish) at [aadish@ohs.stanford.edu](mailto:aadish@ohs.stanford.edu)

All code is open-source. Find the most stable release [here](https://github.com/aadishv/aadishv.github.io/tree/main/src/components/chinese).


---
./src/content/projects/periodic.md
---
---
date: "2025-03-21"
title: "Aadish's Periodic Table"
description: "A feature-rich and widely-used periodic table website"
link: /tools/periodic/
github: https://github.com/aadishv/aadishv.github.io/blob/main/src/components/PeriodicTable.jsx
image: "/assets/projects/periodic/thumbnail.png"
readMore: true
---

This started off as a simple project to try out web technologies, Tailwind CSS, and JS best practices -- and to fulfill my dire need for an actually well-designed periodic table. It eventually grew quite a bit, with many more features than initially imagined and several of my classmates using it.

**Features**

- (Obviously) all 118 elements
- Colorful elements based on the scheme of the [Google Arts Experiments periodic table ↗](https://artsexperiments.withgoogle.com/periodic-table/)
- Click on an element to see a bunch of cool details about it:
  - Electron configuration (abbreviated and extended)
  - Atomic mass
  - Electronegativity
  - Oxidation states
  - Fun fact
- Fuzzy search that lets it read your mind and know you meant to type "praseodymium" instead of "preasdfdtyuhguim"
- _Super_-helpful formula mass calculator for any compound
- A reference tab full of helpful images to have in a chem class

**Tech stack**

- React (mainly for the component hierarchy with a few `useState` hooks)
- Tailwind CSS (for styling)
- Astro (for static site generation, SSR, and preloading, as well as the header components)
- Fun fact: the entire codebase is in one JSX file! (send help)

# Changelog

This only includes major releases (~every 5-15 commits).

## v1.0: Full launch

_03/21/25_
[Check out the code](https://github.com/aadishv/aadishv.github.io/blob/main/src/components/PeriodicTable.jsx)

<br>
This was a complete rewrite of the periodic table to accompany the launch of my redesigned, Astro-based website. The old one looked a little terrible and had incoherent design (not to mention the incompatible design choices with the rest of my sites), but this has a very unified structure across my entire website. For example, it now sticks to just two fonts and two colors. The last release used Shoelace web components, which were nice for their simple and elegant design + DX, but now I've switched to custom-built components for better styling. This release doesn't add much functionality, per se, but it's still a major overhaul in terms of design and usability.

**New features**

- Added a reference tab full of helpful images to have in a chem class

**Improvements**

- Much faster page loading thanks to some Astro magic
- Improved accessibility with better keyboard navigation and screen reader support
- As alluded to above, vastly improved styling choices

## v0.2: HTML website

_01/01/25_
[Check out the code](https://github.com/aadishv/aadishv.github.io/tree/astro-rewrite/static/periodic)

<br>
(Note that v0.1 was a small SwiftUI prototype.)

This is a soft launch of a public version of my periodic table, featuring a simple design mirroring the SwiftUI version and going beyond with Shoelace web components. It's a bit more polished than the previous version, with better styling and more features.

**Features**

- Can now use "tab" to navigate between elements
- Works on web 👑
- Basic formula mass calculator
- A fun random element button! 🎲

**Tech stack**

- Raw HTML and JS
- Tailwind imported through the CDN
- No build step


---
./src/content/inprog/christmas-cards.md
---
---
date: "2025-01-31"

title: "Christmas Cards"

description: "Making animated Christmas cards for my family"

readMore: true
---

## Introduction

Over the recent holiday season, I decided that gifts were not in vogue anymore, and that virtual gifts would be cheaper, easier to make, and less useful!

[spoiler: they were a nightmare. do not try this at home.]

## Overall

This is what the overall project ended up looking lie

```
├── assets
│     └── [...]
├── card.html
├── script.js
└── style.css
```

The final website also had an `index.html` file, but that was just a mirror of `card.html` to make the QR code stuff easier.

## Anatomy of an animated Christmas card [and overview of the coding process]

### Stars

As any winter-themed card does, this card will have twinkling stars in the background. This is not supposed to be super fancy or anything, so I'll just have a small orange square (with a shadow) that fades in and out and changes position between opacity cycles.

This project is mainly just an exercise in learning to code in Javascript a bit more efficiently, so I'll use objects to structure the stars.

```js
const newStar = (i) => {
  return {
    id: i,
    time: 1000 * Math.random() * 2 + 1000,
    init: function () {
      const x = Math.random();
      setTimeout(() => {
        var element = document.createElement("div");
        element.id = `star${this.id}`;
        element.className = "star";
        element.style.animation = `twinkle ${this.time}ms infinite`;
        document.getElementById("background").appendChild(element);
        this.updateTimeout(x);
      }, x * 1000);
    },
    updateTimeout: function (x) {
      var element = document.getElementById(`star${this.id}`);
      element.style.left = `${x * 100}vw`;
      element.style.top = `${Math.random() * 200}vh`;
      setTimeout(() => this.updateTimeout(x), this.time);
    },
  };
};
```

Each star has an `id` value, which is used to identify the DOM element to update in the animation, and a `time` value, which represents the length of the opacity cycle (which is different for each star). Notice that each star is initialized at a time that increases with its initial x-value, so that the stars will initially fade in from left to right. Every refresh of the opacity cycle, the only thing changed is the element's position (which we use `element.style.left` and `element.style.top` to do).

The stars are initialized in a div of the website's body:

```html
<!doctype html>
<html lang="en">
  <!-- [...] -->
  <body>
    <div id="background"></div>
    <!-- [...] -->
  </body>
</html>
```

Now let's do some basic styling.

```css
/* To add contrast for the stars, and a holiday feel */
body {
  background: linear-gradient(to left top, #432052, #0e1036) fixed;
}
/* To make a tall background (will be used later) */
#background {
  top: 0;
  left: 0;
  width: 100vw;
  height: 150vh;
  pointer-events: none;
}
/* Animations */
@keyframes twinkle {
  0% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}
/* Stars */
#background {
  position: absolute;
  top: 0;
  left: 0;
  width: 100vw;
  height: 150vh;
  pointer-events: none;
}

.star {
  position: absolute;
  width: 0.5vw;
  height: 0.5vw;
  background-color: orange;
  border-radius: 20%;
  box-shadow: 0 0 10px orange;
}
```

And, finally, to spawn in the stars:

```js
const spawnStars = (n) => {
  Array.from({ length: n }, (_, i) => newStar(i).init());
};
spawnStars(300);
```

There we go!

![Stars background animation](/assets/christmas-cards/stars1.gif)

### Personalization

This card would be pretty boring if it was the exact same for each person. In order to customize it for each family member dynamically withouth having to create entirely new code for each of them, I have a `people` constant in my script which stores information about each person.

```js
const people = {
  /// [... many other family members ...]
  DA: {
    name: "Daddy",
    colors: ["#7a1c34", "#6e011d"],
    emojis: ["💻", "🧑‍💻", "☕", "🚗", "🔊"],
    awards: [
      "World's Best Dad",
      "World's Best Money Saver",
      "World's Best Hot Chocolate Maker",
    ],
    font: "Fragment Mono",
  },
};
```

Each person has an associated name (of course), colors (to form a gradient text color when I show their names), font (also to style their names), relevant emojis, and a list of "awards" (which we'll find a use for soon). The object itself is stored as a dictionary where each person is assigned a unique "person code" (e.g. my dad, who will be the test subject today, has the code "DA").

The person code of the person whose card will be shown is encoded as a URL parameter, e.g. https://aadishv.github.io/christmas/?p=MA. Let's use some basic JS to capture the parameter and update CSS values.

```js
const myperson = new URLSearchParams(window.location.search).get("p");
const people = {
  /* [...] */
};
const person = people[myperson.toUpperCase()];
const personalize = () => {
  document.documentElement.style.setProperty(
    "--gradient",
    `linear-gradient(90deg, ${person.colors[0]} 0%, white 50%, ${person.colors[1]} 100%)`,
  );
  document.documentElement.style.setProperty(
    "--font",
    `"${person.font}", sans-serif`,
  );
};
if (person !== null) personalize();
```

All of the other properties of our person need not be used by CSS and thus can just be referenced directly in other JS code.

Let's also set some suitable defaults, and while we're at it, might as well set a default font for non-personalized stuff:

```css
/* Import the personalized font */
@import url("https://fonts.googleapis.com/css2?family=Fragment+Mono:ital@0;1&family=Lobster&display=swap");

/* General Styles */
* {
  font-family:
    "Helvetica Neue", HelveticaNeue, "TeX Gyre Heros", TeXGyreHeros, FreeSans,
    "Nimbus Sans L", "Liberation Sans", Arimo, Helvetica, Arial, sans-serif;
}

:root {
  --gradient: linear-gradient(90deg, lightblue 0%, white 50%, lightblue 100%);
  --font: sans-serif;
}
```

There we go, personalization done!

### Holiday greeting

I'd like the card to introduce a bit of cheer by saying, "Happy Christmas, [name]!" As noted above, I'd like the name to be personalized with a color gradient and font (I'm only using two fonts: one for the cursive-loving, and one for the programming type).

Let's start by updating the HTML to add a div to store the actual page content, and do basic styling.

```html
<!doctype html>
<html lang="en">
  <head>
    <!-- [...] -->
  </head>
  <body>
    <div id="background"></div>
    <div id="content">
      <h1 class="greeting">
        Merry Christmas,
        <span class="name"></span>
      </h1>
    </div>
  </body>
</html>
```

Notice that the name is empty. We'll be fixing that in a little bit.

Now for the CSS!

```css
/* Animation */
@keyframes typing {
  from {
    width: 0%;
  }
  to {
    width: 100%;
  }
}
/* Greetings */
#content {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 50vh;
  width: 100vw;
}

.greeting {
  position: fixed;
  color: white;
  font-size: 10vw;
}

.name {
  overflow: hidden;
  display: block;
  animation: typing 2s forwards;
  font-family: var(--font);
  background: var(--gradient);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-size: 12vw;
}
```

This also adds a simple writing effect with a shimmer (sort of). It's very simple - we just slowly widen the span with the name in it from 0 to 100%, ensuring that the text overflows. We also add white in the middle of each person's gradient so that, as the text widens, the white area will move to the right, creating the shimmer.

Finally, let's ensure that the span tag containing the name doesn't end up empty. Let's fill it in the `personalize` function:

```js
const personalize = () => {
  // [...]
  document.querySelector(".name").innerHTML = person.name;
};
```

That looks awesome!

![Final card greeting](/assets/christmas-cards/name2.gif)


---
./src/utils/get-slug-from-path.ts
---
export const getSlugFromPath = (path: string): string => {
  return path.split("/").at(-1).replace(".md", "");
};


---
./src/utils/periodic.js
---
[OMITTED FOR LENGTH]
---
./src/style/blog.css
---
h1,
h2,
h3 {
  @apply mb-4 font-lora font-bold;
}
h1 {
  @apply text-2xl;
}
h2 {
  @apply text-xl;
}
h3 {
  @apply text-lg;
}
main,
a {
  @apply font-mono;
  font-size: 1rem;
}
a {
  @apply decoration-header2 !important;
}
a:hover {
  @apply decoration-header !important;
}
img {
  @apply p-5;
}


---
./src/style/global.css
---
/* src/styles/global.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

.font-kaishu {
  font-family: "KaiTi", "STKaiti", "KaiTi_GB2312", serif;
}

@font-face {
  font-family: "Lora";
  src: url("/fonts/lora.woff2") format("woff2");
  font-weight: 200;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Zed Sans";
  src: url("/fonts/zedsans.woff2") format("woff2");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
.bg-stripes-header2 {
  background: repeating-linear-gradient(
    45deg,
    rgba(130, 169, 229, 0.25) 0px,
    rgba(130, 169, 229, 0.25) 1.5px,
    rgba(255, 255, 255, 0.25) 1.5px,
    rgba(255, 255, 255, 0.25) 5px
  );
}
.font-mono {
  font-family: "Zed Sans", monospace !important;
}
a {
  @apply font-lora text-header underline decoration-header2 hover:decoration-header;
}
@layer base {
  body {
    @apply antialiased;
  }
  .bg-blend {
    background-image: linear-gradient(
      to top,
      rgba(232, 220, 255, 1) 0%,
      rgba(232, 220, 255, 0.3) 50%,
      rgba(232, 220, 255, 0.15) 65%,
      rgba(232, 220, 255, 0.075) 75.5%,
      rgba(232, 220, 255, 0.037) 82.85%,
      rgba(232, 220, 255, 0.019) 88%,
      rgba(232, 220, 255, 0) 100%
    );
  }

  .animated-bg {
    background-image: url(/assets/animated-bg.svg);
    background-size: cover;
  }
}
@layer utilities {
  .animation-delay-2000 {
    animation-delay: 2s;
  }
  .animation-delay-4000 {
    animation-delay: 4s;
  }
}
/**
 * a11y-dark theme for JavaScript, CSS, and HTML
 * Based on the okaidia theme: https://github.com/PrismJS/prism/blob/gh-pages/themes/prism-okaidia.css
 * @author ericwbailey
 */
/*
code[class*="language-"],
pre[class*="language-"] {
  color: #f4f4f5;
  background: none;
  font-family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.5;

  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;

  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
} */

/* Code blocks */
/* pre[class*="language-"] {
  padding: 1em;
  margin: 0.5em 0;
  overflow: auto;
  border-radius: 0.3em;
}

:not(pre) > code[class*="language-"],
pre[class*="language-"] {
} */

/* Inline code */
/* :not(pre) > code[class*="language-"] {
  padding: 0.1em;
  border-radius: 0.3em;
  white-space: normal;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: #d4d0ab;
}

.token.punctuation {
  color: #fefefe;
}

.token.property,
.token.tag,
.token.constant,
.token.symbol,
.token.deleted {
  color: #ffa07a;
}

.token.boolean,
.token.number {
  color: #00e0e0;
}

.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
  color: #abe338;
}

.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string,
.token.variable {
  color: #00e0e0;
}

.token.atrule,
.token.attr-value,
.token.function {
  color: #ffd700;
}

.token.keyword {
  color: #00e0e0;
}

.token.regex,
.token.important {
  color: #ffd700;
}

.token.important,
.token.bold {
  font-weight: bold;
}

.token.italic {
  font-style: italic;
}

.token.entity {
  cursor: help;
}

@media screen and (-ms-high-contrast: active) {
  code[class*="language-"],
  pre[class*="language-"] {
    color: windowText;
    background: window;
  }

  :not(pre) > code[class*="language-"],
  pre[class*="language-"] {
    background: window;
  }

  .token.important {
    background: highlight;
    color: window;
    font-weight: normal;
  }

  .token.atrule,
  .token.attr-value,
  .token.function,
  .token.keyword,
  .token.operator,
  .token.selector {
    font-weight: bold;
  }

  .token.attr-value,
  .token.comment,
  .token.doctype,
  .token.function,
  .token.keyword,
  .token.operator,
  .token.property,
  .token.string {
    color: highlight;
  }

  .token.attr-value,
  .token.url {
    font-weight: normal;
  }
}

@supports (-webkit-touch-callout: none) {
  .h-screen {
    height: -webkit-fill-available;
  }
} */


---
./src/styles/globals.css
---
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer utilities {
  .glimmer {
    position: relative;
    overflow: hidden;
    color: transparent !important;
  }
  .glimmer::after {
    content: '';
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.3) 50%, transparent 100%);
    animation: shimmer 1.2s infinite;
    z-index: 1;
  }
  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }
}

---
./src/components/BlogPostPreview.astro
---
---
export interface Props {
  post: any;
}

import { getSlugFromPath } from "../utils/get-slug-from-path";
import { parseISO, format } from "date-fns";
import "../style/global.css";

const { post } = Astro.props;
const url = "/blog/" + getSlugFromPath(post.file);

const date = parseISO(post.frontmatter.date);
const formattedDate = format(date, "LLLL d, yyyy");
---

<div class="bg-stripes-header2 mb-4 flex flex-col border-2 border-header2 p-2">
  <h1>
    <a href={url} class="font-mono text-xl text-black hover:text-header">
      {post.frontmatter.title}
    </a>
  </h1>
  <div class="ml-auto font-lora text-header">{formattedDate}</div>
</div>


---
./src/components/Header.astro
---
---

---

<header
  class="bg-stripes-header2 fixed w-full border-2 border-b border-gray-200 bg-white/80 p-4 px-6 backdrop-blur-sm"
>
  <div class="flex items-center justify-between">
    <h1 class="font-lora text-2xl text-header">Aadish Verma</h1>
    <nav class="flex">
      <a href="/" class="pl-4 font-lora text-xl text-black">Home</a>
      <a href="/blog" class="pl-4 font-lora text-xl text-black">Blog</a>
      <a href="/projects" class="pl-4 font-lora text-xl text-black">Projects</a>
      <a href="/tools/periodic" class="pl-4 font-lora text-xl text-black"
        >Periodic Table</a
      >
    </nav>
  </div>
</header>


---
./src/components/LatexToImg.tsx
---
import React, { useState, useEffect, useRef } from "react";
import katex from "katex";

export default function LatexToImageApp() {
  const [latex, setLatex] = useState("\\text{Your equation here}");
  const [imageUrl, setImageUrl] = useState("");
  const [format, setFormat] = useState("svg"); // Default to SVG
  const previewRef = useRef(null);

  // Update the image URL and render LaTeX preview
  useEffect(() => {
    if (!previewRef.current) return;

    // Generate URL with selected format
    const value =
      latex.trim().length === 0 ? "\\text{Your equation here}" : latex;
    const url = `https://latex.codecogs.com/${format}.image?${encodeURIComponent(value)}`;
    setImageUrl(url);

    // Clear previous content before rendering
    previewRef.current.innerHTML = "";

    // Render KaTeX with only MathML output
    try {
      katex.render(value, previewRef.current, {
        displayMode: true,
        throwOnError: false,
        output: "mathml", // Specify MathML as the only output format
      });
    } catch (e) {
      previewRef.current.textContent = e.message;
    }
  }, [latex, format]);

  // Copy functions
  const copyImageUrl = async () => {
    await navigator.clipboard.writeText(imageUrl);
  };

  const copyMarkdown = async () => {
    await navigator.clipboard.writeText(`![LaTeX image](${imageUrl})`);
  };

  return (
    <div className="m-8">
      <div className="rounded-lg border-2 border-header p-6">
        <h1 className="mb-4 font-lora text-3xl text-header">LaTeX to Image</h1>

        <div className="flex flex-col gap-4">
          <input
            type="text"
            value={latex}
            onChange={(e) => setLatex(e.target.value)}
            placeholder="Type LaTeX here"
            className="w-full border-b-2 border-header p-2 font-mono text-xl focus:border-header focus:outline-none"
          />

          <div className="flex items-center gap-4">
            <span className="font-lora text-lg">Format:</span>
            <div className="flex font-mono">
              {["svg", "png", "gif"].map((formatOption) => (
                <button
                  key={formatOption}
                  className={`mr-4 h-8 px-2 text-xl ${
                    format === formatOption
                      ? "text-header underline decoration-header"
                      : "underline decoration-header2 hover:decoration-header"
                  }`}
                  onClick={() => setFormat(formatOption)}
                >
                  {formatOption}
                </button>
              ))}
            </div>
          </div>

          <div className="rounded-lg bg-gray-100 p-4">
            <a
              href={imageUrl}
              className="block break-all font-mono text-header underline"
              target="_blank"
              rel="noopener noreferrer"
            >
              {imageUrl}
            </a>
          </div>

          <div className="flex flex-wrap gap-4">
            <button
              onClick={copyImageUrl}
              className="font-lora text-xl underline decoration-header2 hover:decoration-header"
            >
              Copy image URL
            </button>
            <button
              onClick={copyMarkdown}
              className="font-lora text-xl underline decoration-header2 hover:decoration-header"
            >
              Copy image Markdown
            </button>
          </div>

          <div className="mt-4 overflow-auto rounded-lg border-2 border-header p-4 text-xl">
            <div ref={previewRef} className="flex items-center overflow-auto" />
          </div>
        </div>
      </div>
    </div>
  );
}


---
./src/components/ProjectPreview.astro
---
---
export interface Props {
  post: any;
}

import { getSlugFromPath } from "../utils/get-slug-from-path";
import { parseISO, format } from "date-fns";
import "../style/global.css";

const { post } = Astro.props;
const url = "/projects/" + getSlugFromPath(post.file);

const date = parseISO(post.frontmatter.date);
const formattedDate = format(date, "LLLL d, yyyy");
---

<div class="bg-stripes-header2 mb-4 flex flex-col border-2 border-header2 p-2">
  <h1>
    <a href={url} class="font-mono text-xl text-black hover:text-header">
      {post.frontmatter.title}
    </a>
  </h1>
  <div class="font-mono font-medium text-header">
    {post.frontmatter.description}
  </div>
  <div class="flex w-full gap-2 font-lora text-header">
    <a href={post.frontmatter.link}>Demo ↗</a>・
    <a href={post.frontmatter.github}>Github ↗</a>・
    <div>Last updated {formattedDate}</div>
  </div>
</div>


---
./src/components/Slide.tsx
---
import React from "react";
import { useState, useEffect, useCallback, useRef } from "react";
import Confetti from "react-confetti";
import useWindowSize from "react-use/lib/useWindowSize";

// --- Constants ---
const GRID_SIZE = 4;
const TILE_COUNT = GRID_SIZE * GRID_SIZE;
const EMPTY_INDEX = TILE_COUNT - 1; // Represents the empty space (index 15)
const TILE_DIMENSION_VW = 15; // Visual dimension of each tile in vw
const BOARD_DIMENSION_VW = TILE_DIMENSION_VW * GRID_SIZE; // Board size in vw
const CENTER_TILES = [6, 7, 10, 11]; // Numbers of the center tiles

// --- Default Image URL Placeholder ---
const DEFAULT_IMAGE_URL = "https://i.imgur.com/y2h8wno.png";
const PLACEHOLDER_DEFAULT_URL = "https://aadishv.github.io/s.jpeg"; // Store placeholder value for comparison

// --- Helper Functions ---

// Function to generate the solved state (numbers 1 to 15, null at end)
const generateSolvedTiles = () =>
  Array.from({ length: TILE_COUNT }, (_, i) =>
    i === EMPTY_INDEX ? null : i + 1,
  );

// Function to check if the puzzle is solved
const isSolved = (tiles) => {
  for (let i = 0; i < EMPTY_INDEX; i++) {
    if (tiles[i] !== i + 1) return false;
  }
  return tiles[EMPTY_INDEX] === null;
};

// Function to format time in milliseconds to MM:SS.ss
const formatTime = (milliseconds) => {
  const totalSeconds = Math.floor(milliseconds / 1000);
  const minutes = Math.floor(totalSeconds / 60);
  const seconds = totalSeconds % 60;
  const hundredths = Math.floor((milliseconds % 1000) / 10); // Get hundredths
  return `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}.${String(hundredths).padStart(2, "0")}`;
};

// Function to get row and column from index
const getCoords = (index) => ({
  row: Math.floor(index / GRID_SIZE),
  col: index % GRID_SIZE,
});

// Function to get index from row and column
const getIndex = (row, col) => row * GRID_SIZE + col;

// Function to swap two elements in an array
const swap = (arr, i, j) => {
  const newArr = [...arr];
  [newArr[i], newArr[j]] = [newArr[j], newArr[i]];
  return newArr;
};

// Function to calculate delay for shuffle animation (slow-fast-slow)
const calculateShuffleDelay = (step, totalSteps) => {
  const minDelay = 5; // Fastest delay (ms) in the middle
  const maxDelay = 50; // Slowest delay (ms) at start/end - Further Reduced
  const progress = step / totalSteps; // 0 to 1
  // Use a parabolic function: 4 * (x - 0.5)^2 gives 1 at ends, 0 in middle
  const parabola = 4 * Math.pow(progress - 0.5, 2);
  const delay = minDelay + (maxDelay - minDelay) * parabola;
  return Math.max(minDelay, delay); // Ensure delay doesn't go below minDelay
};

// --- Main App Component ---
function App() {
  // --- State ---
  const [tiles, setTiles] = useState(generateSolvedTiles()); // Logical state (numbers 1-15, null)
  const [moves, setMoves] = useState(0);
  const [timeElapsed, setTimeElapsed] = useState(0); // Timer state in milliseconds
  const [timerActive, setTimerActive] = useState(false); // Timer active state
  const [solved, setSolved] = useState(true); // Track solved state
  const [originalImageSrc, setOriginalImageSrc] = useState(null); // Store the uploaded or default image source
  const [tileImages, setTileImages] = useState([]); // Store dataURLs for each image tile piece
  const [isLoadingImage, setIsLoadingImage] = useState(false); // Loading indicator
  const [showResetConfirm, setShowResetConfirm] = useState(false); // State for reset confirmation
  const fileInputRef = useRef(null); // Ref for the file input
  const [animationDirection, setAnimationDirection] = useState(null);
  const [isFullscreen, setIsFullscreen] = useState(false); // State for fullscreen status
  const [isShuffling, setIsShuffling] = useState(false); // State for shuffle animation
  const appContainerRef = useRef(null); // Ref for the main component container
  const { width, height } = useWindowSize(); // Get window dimensions for confetti

  // --- Derived State ---
  const emptyIndex = tiles.indexOf(null); // Find the index of the empty tile
  const { row: emptyRow, col: emptyCol } = getCoords(emptyIndex);

  // --- Shuffling Logic --- (Defined before processImage as it's called by it)
  const shuffleBoard = useCallback(
    async (forceShuffle = false) => {
      // Added async
      if (isLoadingImage || isShuffling) return; // Prevent shuffle if loading or already shuffling
      if (!originalImageSrc && !forceShuffle) return;

      setIsShuffling(true); // Start shuffling animation
      setMoves(0);
      setTimeElapsed(0); // Reset timer
      setTimerActive(false); // Stop timer
      setSolved(false); // Board is not solved during shuffle

      let currentTiles = generateSolvedTiles();
      let currentEmptyIndex = EMPTY_INDEX;
      const shuffleMoves = 300; // Total number of shuffle steps - Increased

      setTiles(currentTiles); // Show solved state briefly before starting

      // Short initial delay before animation starts
      await new Promise((resolve) => setTimeout(resolve, 100));

      for (let i = 0; i < shuffleMoves; i++) {
        const { row: currentEmptyRow, col: currentEmptyCol } =
          getCoords(currentEmptyIndex);
        const possibleMoves = [];
        // Find valid neighboring tiles to swap with the empty space
        if (currentEmptyRow > 0)
          possibleMoves.push(getIndex(currentEmptyRow - 1, currentEmptyCol));
        if (currentEmptyRow < GRID_SIZE - 1)
          possibleMoves.push(getIndex(currentEmptyRow + 1, currentEmptyCol));
        if (currentEmptyCol > 0)
          possibleMoves.push(getIndex(currentEmptyRow, currentEmptyCol - 1));
        if (currentEmptyCol < GRID_SIZE - 1)
          possibleMoves.push(getIndex(currentEmptyRow, currentEmptyCol + 1));

        // Choose a random valid move
        const randomIndex = Math.floor(Math.random() * possibleMoves.length);
        const tileToMoveIndex = possibleMoves[randomIndex];

        // Perform the swap
        currentTiles = swap(currentTiles, currentEmptyIndex, tileToMoveIndex);
        currentEmptyIndex = tileToMoveIndex; // Update the empty index

        // Update the state to show the move
        setTiles(currentTiles);

        // Calculate and wait for the delay
        const delay = calculateShuffleDelay(i, shuffleMoves);
        await new Promise((resolve) => setTimeout(resolve, delay));
      }

      // Ensure final state is consistent
      setSolved(isSolved(currentTiles)); // Check if somehow solved (unlikely)
      setIsShuffling(false); // End shuffling animation
    },
    [originalImageSrc, isLoadingImage, isShuffling], // Add isShuffling dependency
  ); // Recreate if dependencies change

  // --- Image Processing Logic ---
  const processImage = useCallback(
    (imageSrc) => {
      if (isLoadingImage || !imageSrc) {
        if (!imageSrc)
          console.warn("Invalid image source provided for processing.");
        return;
      }
      if (imageSrc === PLACEHOLDER_DEFAULT_URL) {
        console.warn("Placeholder URL detected, cannot process.");
        if (!originalImageSrc) {
          shuffleBoard(true);
        }
        return;
      }

      setIsLoadingImage(true);
      const img = new Image();
      img.crossOrigin = "Anonymous";
      img.src = imageSrc;

      img.onload = () => {
        const canvas = document.createElement("canvas");
        const pieceWidth = img.width / GRID_SIZE;
        const pieceHeight = img.height / GRID_SIZE;
        canvas.width = pieceWidth;
        canvas.height = pieceHeight;
        const ctx = canvas.getContext("2d");
        const newTileImages = [];

        try {
          for (let i = 0; i < EMPTY_INDEX; i++) {
            const tileValue = i + 1;
            const solvedIndex = i;
            const { row, col } = getCoords(solvedIndex);

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(
              img,
              col * pieceWidth,
              row * pieceHeight,
              pieceWidth,
              pieceHeight,
              0,
              0,
              canvas.width,
              canvas.height,
            );
            newTileImages[tileValue - 1] = canvas.toDataURL();
          }

          setTileImages(newTileImages);
          setOriginalImageSrc(imageSrc);
          setIsLoadingImage(false);
          shuffleBoard(true);
        } catch (error) {
          console.error(
            "Error processing image with canvas (potentially CORS issue):",
            error,
          );
          alert(
            "Error processing image. It might be due to Cross-Origin (CORS) restrictions on the image server. Try uploading the image directly or use a different URL.",
          );
          setIsLoadingImage(false);
          if (imageSrc === DEFAULT_IMAGE_URL && !originalImageSrc) {
            shuffleBoard(true);
          }
        }
      };

      img.onerror = (error) => {
        console.error("Error loading image source:", imageSrc, error);
        alert(
          "Error loading the image. Please check the URL or file. If using a URL, ensure it's accessible and allows cross-origin requests.",
        );
        setIsLoadingImage(false);
        if (imageSrc === DEFAULT_IMAGE_URL && !originalImageSrc) {
          shuffleBoard(true);
        }
      };
    },
    [isLoadingImage, originalImageSrc, shuffleBoard],
  );

  // --- Image Upload Handler ---
  const handleImageUpload = (event) => {
    const file = event.target.files?.[0];
    if (file && !isLoadingImage) {
      const reader = new FileReader();
      reader.onload = (e) => {
        processImage(e.target.result);
      };
      reader.readAsDataURL(file);
    }
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  // --- Initial Load Effect ---
  useEffect(() => {
    if (DEFAULT_IMAGE_URL) {
      processImage(DEFAULT_IMAGE_URL);
    } else {
      shuffleBoard(true);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // --- Tile Click Logic ---
  const handleTileClick = (clickedIndex) => {
    // Disable clicks during shuffle animation
    if (solved || isLoadingImage || isShuffling || clickedIndex === emptyIndex)
      return;

    const { row: clickedRow, col: clickedCol } = getCoords(clickedIndex);
    let direction = null;
    let slideIndices = [];

    if (clickedRow === emptyRow) {
      // Horizontal move potential
      direction = clickedCol < emptyCol ? "right" : "left";
      const startCol = Math.min(clickedCol, emptyCol);
      const endCol = Math.max(clickedCol, emptyCol);
      for (let c = startCol; c <= endCol; c++)
        slideIndices.push(getIndex(clickedRow, c));
    } else if (clickedCol === emptyCol) {
      // Vertical move potential
      direction = clickedRow < emptyRow ? "down" : "up";
      const startRow = Math.min(clickedRow, emptyRow);
      const endRow = Math.max(clickedRow, emptyRow);
      for (let r = startRow; r <= endRow; r++)
        slideIndices.push(getIndex(r, clickedCol));
    } else {
      return; // Invalid move (not same row/col)
    }

    if (slideIndices.length === 0 || !slideIndices.includes(clickedIndex)) {
      console.warn("Invalid move calculation prevented.");
      return;
    }

    // --- Perform the slide ---
    let newTiles = [...tiles];
    const emptyValue = null;

    if (direction === "right") {
      // Empty moves right
      setAnimationDirection("right");
      for (let i = slideIndices.length - 1; i > 0; i--)
        newTiles[slideIndices[i]] = newTiles[slideIndices[i - 1]];
      newTiles[slideIndices[0]] = emptyValue;
    } else if (direction === "left") {
      // Empty moves left
      setAnimationDirection("left");
      for (let i = 0; i < slideIndices.length - 1; i++)
        newTiles[slideIndices[i]] = newTiles[slideIndices[i + 1]];
      newTiles[slideIndices[slideIndices.length - 1]] = emptyValue;
    } else if (direction === "down") {
      // Empty moves down
      setAnimationDirection("down");
      for (let i = slideIndices.length - 1; i > 0; i--)
        newTiles[slideIndices[i]] = newTiles[slideIndices[i - 1]];
      newTiles[slideIndices[0]] = emptyValue;
    } else if (direction === "up") {
      // Empty moves up
      setAnimationDirection("up");
      for (let i = 0; i < slideIndices.length - 1; i++)
        newTiles[slideIndices[i]] = newTiles[slideIndices[i + 1]];
      newTiles[slideIndices[slideIndices.length - 1]] = emptyValue;
    }

    const newSolvedState = isSolved(newTiles);

    setTiles(newTiles);
    setMoves(moves + 1);
    setSolved(newSolvedState);

    // Start timer on first move
    if (moves === 0 && !timerActive) {
      setTimerActive(true);
    }

    // Stop timer if solved
    if (newSolvedState) {
      setTimerActive(false);
    }

    setTimeout(() => {
      setAnimationDirection(null);
    }, 300);
  };

  // --- Fullscreen Logic ---
  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      appContainerRef.current?.requestFullscreen().catch((err) => {
        alert(
          `Error attempting to enable full-screen mode: ${err.message} (${err.name})`,
        );
      });
    } else {
      document.exitFullscreen();
    }
  };

  // Effect to listen for fullscreen changes (e.g., ESC key)
  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };

    document.addEventListener("fullscreenchange", handleFullscreenChange);

    // Cleanup listener on component unmount
    return () => {
      document.removeEventListener("fullscreenchange", handleFullscreenChange);
    };
  }, []); // Empty dependency array ensures this runs only once on mount

  // --- Timer Effect ---
  useEffect(() => {
    let interval = null;
    const intervalDuration = 10; // Update every 10ms for hundredths
    if (timerActive) {
      interval = setInterval(() => {
        // Increment by the interval duration
        setTimeElapsed((prevTime) => prevTime + intervalDuration);
      }, intervalDuration);
    } else if (!timerActive && timeElapsed !== 0) {
      // Timer stopped but has a value, clear interval
      clearInterval(interval);
    }
    return () => clearInterval(interval); // Cleanup interval on unmount or timer stop
  }, [timerActive, timeElapsed]); // Rerun effect if timerActive changes

  // --- Rendering with Periodic Table Styling ---
  return (
    // Add ref and conditional background for fullscreen
    <div
      ref={appContainerRef}
      className={`flex min-h-screen flex-col items-center justify-center p-4 font-mono ${isFullscreen ? "bg-white dark:bg-gray-900" : ""}`} // Add background in fullscreen
    >
      {/* Conditionally render confetti when solved */}
      {solved && (
        <Confetti
          width={width}
          height={height}
          recycle={false} // Stop confetti after a bit
          numberOfPieces={300} // Adjust number of pieces
          gravity={0.3} // Adjust gravity
        />
      )}
      {/* Controls Row styled like periodic table controls */}
      <div className="flex" style={{ margin: "2vw" }}>
        {/* Search bar styled component replacement */}
        <div className="flex-grow">
          <div className="flex items-center">
            <label className="m-0 mr-4 h-8 border-b-2 border-header2 p-0 font-lora text-xl hover:border-header">
              <span className="cursor-pointer">Upload Image</span>
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                className="hidden"
                onChange={handleImageUpload}
              />
            </label>
          </div>
        </div>

        {/* Game stats */}
        <div className="mr-4 flex items-end space-x-4">
          {" "}
          {/* Added space-x-4 */}
          <span className="m-0 h-8 border-b-2 border-header2 p-0 font-lora text-xl">
            Moves: {moves}
          </span>
          <span className="m-0 h-8 border-b-2 border-header2 p-0 font-lora text-xl">
            Time: {formatTime(timeElapsed)}
          </span>
        </div>

        {/* Reset/shuffle button, confirmation, or shuffling indicator */}
        <div className="flex h-8 items-end">
          {" "}
          {/* Ensure consistent height */}
          {isShuffling ? (
            <span className="m-0 border-b-2 border-header2 p-0 font-lora text-xl text-gray-500">
              Shuffling...
            </span>
          ) : !showResetConfirm ? (
            <button
              onClick={() => setShowResetConfirm(true)} // Show confirmation on click
              className="m-0 h-8 border-b-2 border-header2 p-0 font-lora text-xl hover:border-header disabled:cursor-not-allowed disabled:opacity-50" // Added disabled styles
              disabled={isLoadingImage} // Only disable if loading, shuffling handled above
            >
              Reset / Shuffle
            </button>
          ) : (
            <div className="flex items-center space-x-2 rounded bg-yellow-100 p-1">
              <span className="text-sm text-yellow-800">Are you sure?</span>
              <button
                onClick={() => {
                  shuffleBoard(true); // This is now async, but we don't need to await it here
                  setShowResetConfirm(false); // Hide confirmation after action
                }}
                className="rounded bg-red-500 px-2 py-0.5 text-sm text-white hover:bg-red-600"
              >
                Confirm
              </button>
              <button
                onClick={() => setShowResetConfirm(false)} // Hide confirmation on cancel
                className="rounded bg-gray-300 px-2 py-0.5 text-sm hover:bg-gray-400"
              >
                Cancel
              </button>
            </div>
          )}
        </div>

        {/* Fullscreen button */}
        <div className="ml-4 flex items-end">
          <button
            onClick={toggleFullscreen}
            className="m-0 h-8 border-b-2 border-header2 p-0 font-lora text-xl hover:border-header"
            title={isFullscreen ? "Exit Fullscreen" : "Enter Fullscreen"}
          >
            {isFullscreen ? "Exit Fullscreen" : "Fullscreen"}
          </button>
        </div>
      </div>

      {/* Game Board Area - Keep it similar but with periodic table card styling */}
      <div className="flex">
        <div className="flex-grow overflow-x-auto p-4">
          <div className="min-w-max">
            <div
              className="relative overflow-hidden rounded-lg border-2 border-header2 shadow-lg"
              style={{
                // Use vh in fullscreen for better scaling, keep vw otherwise
                width: isFullscreen ? `calc(90vh)` : `${BOARD_DIMENSION_VW}vw`,
                height: isFullscreen ? `calc(90vh)` : `${BOARD_DIMENSION_VW}vw`,
                maxWidth: "90vw", // Prevent excessive width on wide screens in fullscreen
                maxHeight: "90vh", // Ensure it fits vertically
                background: `repeating-linear-gradient(45deg, #F3E7FE 0px, #F3E7FE 2px, white 2px, white 5px)`,
              }}
            >
              {/* Absolutely Positioned Tiles Container - Keep the original styling */}
              <div className="absolute inset-0">
                {tiles.map((tileValue, currentVisualIndex) => {
                  const { row, col } = getCoords(currentVisualIndex);
                  const isEmpty = tileValue === null;
                  const tileHasImage =
                    originalImageSrc && tileImages[tileValue - 1];
                  const isCenterTile = CENTER_TILES.includes(tileValue);

                  // Calculate visual position as percentage
                  const visualTopPercent = row * (100 / GRID_SIZE);
                  const visualLeftPercent = col * (100 / GRID_SIZE);

                  let bgClass = "";
                  // Keep border for visual separation, it will act as the minimal gap
                  if (isEmpty) {
                    bgClass = "bg-transparent border-none shadow-none";
                  } else if (tileHasImage) {
                    bgClass = "bg-transparent border-gray-500"; // Keep border for image tiles
                  } else if (isCenterTile) {
                    bgClass = "bg-green-500 hover:bg-green-600 border-gray-500"; // Green for center numbers
                  } else {
                    bgClass = "bg-blue-400 hover:bg-blue-500 border-gray-500"; // Blue for other numbers
                  }

                  // Style for the tile piece
                  const tileStyle = {
                    // Set size to exactly fill the grid cell percentage
                    width: `calc(${100 / GRID_SIZE}%)`,
                    height: `calc(${100 / GRID_SIZE}%)`,
                    // Position precisely at the percentage offset (no extra gap pixels)
                    top: `calc(${visualTopPercent}%)`,
                    left: `calc(${visualLeftPercent}%)`,
                    transform: `translateZ(0)`, // Promote layer for smoother animation
                    // Use CSS transition for smooth movement of top/left properties
                    transition: "top 0.3s ease-in-out, left 0.3s ease-in-out",
                    visibility: (isEmpty ? "hidden" : "visible") as
                      | "hidden"
                      | "visible",
                    backgroundImage: tileHasImage
                      ? `url(${tileImages[tileValue - 1]})`
                      : "none",
                    backgroundSize: "cover",
                    backgroundPosition: "center",
                  };

                  return (
                    <div
                      key={currentVisualIndex}
                      className={`/* Ensure is included in size */ absolute box-border flex select-none items-center justify-center rounded border font-bold shadow-sm ${!isEmpty || isShuffling ? "cursor-default" : "cursor-pointer"} ${!tileHasImage && !isEmpty ? "text-xl text-white" : ""} ${bgClass} `} // Change cursor if shuffling
                      style={tileStyle}
                      onClick={() => handleTileClick(currentVisualIndex)} // Click handler already checks isShuffling
                    >
                      {!tileHasImage && !isEmpty && tileValue}
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;


---
./src/components/ui/accordion.tsx
---
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "../../lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


---
./src/components/ui/alert.tsx
---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "../../lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


---
./src/components/ui/button.tsx
---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "../../lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 gap-2 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


---
./src/components/ui/card.tsx
---
import * as React from "react"

import { cn } from "../../lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


---
./src/components/ui/dialog.tsx
---
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "../../lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


---
./src/components/ui/input.tsx
---
import * as React from "react"

import { cn } from "../../lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


---
./src/components/ui/switch.tsx
---
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "../../lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


---
./src/components/ui/tabs.tsx
---
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "../../lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


---
./src/components/periodic/App.tsx
---
// App.tsx
import React, { useState, useRef, useCallback, useEffect } from "react";
import Fuse from "fuse.js";
import Modal from "react-modal";
import PERIODIC_DATA from "../../utils/periodic";
import DetailsView from "./Details";
import { TableContent } from "./Table";
import { Controls } from "./Controls";
import ReferenceModal from "./Reference";
import { MassModal } from "./MassCalc";
import type { ElementType } from "./Utils";

// Initialize Fuse search
const fuseOptions = {
  keys: [
    { name: "name", weight: 0.7 },
    { name: "symbol", weight: 0.3 },
    { name: "number", weight: 0.1 },
  ],
};
const fuse = new Fuse(PERIODIC_DATA, fuseOptions);

export default function PeriodicTableApp() {
  const initialRandomElement =
    1 + Math.floor(Math.random() * PERIODIC_DATA.length);
  const [focusElement, setFocusElement] =
    useState<number>(initialRandomElement);
  const [showMassModal, setShowMassModal] = useState<boolean>(false);
  const [showReferenceModal, setShowReferenceModal] = useState<boolean>(false);
  const searchInputRef = useRef<HTMLInputElement>(null);

  const handleGlobalKeyDown = useCallback((e: KeyboardEvent) => {
    if ((e.metaKey || e.ctrlKey) && (e.key === "f" || e.key === "k")) {
      e.preventDefault();
      searchInputRef.current?.focus();
    }
  }, []);

  useEffect(() => {
    document.addEventListener("keydown", handleGlobalKeyDown);
    return () => {
      document.removeEventListener("keydown", handleGlobalKeyDown);
    };
  }, [handleGlobalKeyDown]);

  const handleSearch = useCallback((e: React.FormEvent) => {
    e.preventDefault();
    const target = e.target as HTMLFormElement;
    const query = (target.elements[0] as HTMLInputElement).value
      .trim()
      .toLowerCase();
    const results = fuse.search(query);
    if (results.length > 0) {
      const element = results[0].item as ElementType;
      const el = document.getElementById(`element-${element.number}`);
      if (el) {
        el.focus();
      }
    }
  }, []);

  const handleRandomClick = useCallback(() => {
    const randomElement = 1 + Math.floor(Math.random() * PERIODIC_DATA.length);
    setFocusElement(randomElement);
  }, []);

  // Check if current date is April 16 or 17, 2025
  const isDisabledDate = useCallback(() => {
    const today = new Date();
    const month = today.getMonth(); // 0-based index (April = 3)
    const day = today.getDate();
    const year = today.getFullYear();

    return year === 2025 && month === 3 && (day === 16 || day === 17);
  }, []);

  const handleMassModalToggle = useCallback(() => {
    setShowMassModal((prev) => !prev);
  }, []);

  const handleReferenceModalOpen = useCallback(() => {
    setShowReferenceModal(true);
  }, []);

  return (
    <>
      <Controls
        searchInputRef={searchInputRef}
        handleSearch={handleSearch}
        handleRandomClick={handleRandomClick}
        handleReferenceModalOpen={handleReferenceModalOpen}
        handleMassModalToggle={handleMassModalToggle}
        isDisabled={isDisabledDate()}
      />

      <MassModal
        isOpen={showMassModal}
        onClose={() => setShowMassModal(false)}
        periodicData={PERIODIC_DATA}
      />

      <ReferenceModal
        isOpen={showReferenceModal}
        onClose={() => setShowReferenceModal(false)}
      />

      <div className="flex">
        <div className="flex-grow overflow-x-auto p-4">
          <div className="min-w-max">
            <TableContent
              focusElement={focusElement}
              onSetFocusElement={setFocusElement}
              periodicData={PERIODIC_DATA}
            />
          </div>
        </div>
        <div className="flex-shrink-0">
          <DetailsView
            elementNumber={focusElement}
            periodicData={PERIODIC_DATA}
          />
        </div>
      </div>
    </>
  );
}


---
./src/components/periodic/Controls.tsx
---
import React, { useRef } from "react";

interface SearchBarProps {
  inputRef: React.RefObject<HTMLInputElement>;
  onSearch: (e: React.FormEvent) => void;
}

export const SearchBar = ({ inputRef, onSearch }: SearchBarProps) => {
  return (
    <form onSubmit={onSearch} className="flex">
      <input
        ref={inputRef}
        type="text"
        placeholder="Search... (Cmd+F)"
        className="border-b-2 border-header2 font-mono text-xl focus:border-header focus:outline-none"
        style={{ width: "56vw", marginRight: "2vw" }}
      />
      <button type="submit" className="sr-only">
        Submit
      </button>
    </form>
  );
};

interface RandomButtonProps {
  onClickRandom: () => void;
}

export const RandomButton = ({ onClickRandom }: RandomButtonProps) => {
  return (
    <div className="mr-4 flex items-end">
      <button
        className="m-0 h-8 justify-center truncate border-b-2 border-header2 p-0 font-lora text-xl hover:border-header"
        onClick={onClickRandom}
      >
        Random
      </button>
    </div>
  );
};

interface ReferenceButtonProps {
  onClickReference: () => void;
}

export const ReferenceButton = ({ onClickReference }: ReferenceButtonProps) => {
  return (
    <div className="mr-4 flex items-end">
      <button
        className="m-0 h-8 justify-center truncate border-b-2 border-header2 p-0 font-lora text-xl hover:border-header"
        onClick={onClickReference}
      >
        References
      </button>
    </div>
  );
};

interface ModalButtonProps {
  onClickModal: () => void;
  isDisabled?: boolean;
}

export const ModalButton = ({ onClickModal, isDisabled = false }: ModalButtonProps) => {
  const handleClick = () => {
    if (isDisabled) {
      alert("The formula mass calculator has been temporarily disabled on April 16-17, 2025 for the Stanford OHS OC005 quiz. Please try again after this date.");
      return;
    }
    onClickModal();
  };

  return (
    <div className="flex items-end">
      <button
        className={`m-0 h-8 justify-center truncate border-b-2 p-0 font-lora text-xl ${
          isDisabled
            ? "border-gray-300 text-gray-400 cursor-not-allowed"
            : "border-header2 hover:border-header"
        }`}
        onClick={handleClick}
        // Don't use the disabled attribute so we can still show the alert
      >
        Formula mass calculator
      </button>
    </div>
  );
};

export const Controls = ({
  searchInputRef,
  handleSearch,
  handleRandomClick,
  handleReferenceModalOpen,
  handleMassModalToggle,
  isDisabled = false
}) => {
  return (
    <div className="flex" style={{ margin: "2vw" }}>
      <SearchBar inputRef={searchInputRef} onSearch={handleSearch} />
      <div className="flex-grow" />
      <RandomButton onClickRandom={handleRandomClick} />
      <ReferenceButton onClickReference={handleReferenceModalOpen} />
      <ModalButton onClickModal={handleMassModalToggle} isDisabled={isDisabled} />
    </div>
  );
};

---
./src/components/periodic/Details.tsx
---
import React, { useState, useCallback, useEffect } from "react";
import {
  type ElementType,
  type ElementTypeString,
  BG_COLORS,
  TEXT_COLORS,
  getGradientStyle,
} from "./Utils";

interface DetailRowProps {
  name: string;
  value: string | number;
}

const DetailRow = ({ name, value }: DetailRowProps) => {
  const [iconName, setIconName] = useState<string>("copy");

  const handleCopy = useCallback(async () => {
    await navigator.clipboard.writeText(String(value));
    setIconName("check2");
    setTimeout(() => setIconName("copy"), 500);
  }, [value]);

  return (
    <span className="items-center p-1">
      <span className="mr-2 inline font-lora underline">{name}</span>
      <span className="inline font-mono">{value}</span>
      {/* Optionally, add a button/icon here that calls handleCopy */}
    </span>
  );
};

interface DetailsViewProps {
  elementNumber: number;
  periodicData: ElementType[];
}

const DetailsView = ({ elementNumber, periodicData }: DetailsViewProps) => {
  const element = periodicData[elementNumber - 1];
  const bgColor = BG_COLORS[element.type as ElementTypeString];
  const textColor = TEXT_COLORS[element.type as ElementTypeString];

  useEffect(() => {
    const el = document.getElementById(`element-${elementNumber}`);
    if (el) {
      el.focus();
    }
  }, [elementNumber]);

  return (
    <div
      id="details"
      className="w-25vw m-2 flex h-full flex-col rounded-lg border-2 p-3"
      style={{
        background: getGradientStyle(element.type),
        color: textColor,
        width: "25vw",
        borderColor: textColor,
      }}
    >
      <h1 className="bold flex w-full font-lora text-3xl">
        {element.name}
        <br />({element.number}, {element.symbol})
      </h1>
      <DetailRow
        name="Electron config"
        value={element.electron_configuration_semantic}
      />
      <DetailRow name="Full config" value={element.electron_configuration} />
      <DetailRow name="Group" value={element.type} />
      <DetailRow name="Atomic mass" value={element.atomic_mass} />
      <DetailRow
        name="Electronegativity"
        value={element.electronegativity_pauling ?? "N/A"}
      />
      <DetailRow
        name="Oxidation states"
        value={
          element.oxistates
            ?.map((state) => (state > 0 ? `+${state}` : state))
            .join(", ") ?? "N/A"
        }
      />
      <DetailRow
        name="Oxidation states (extended)"
        value={
          element.oxistates_extended
            ?.map((state) => (state > 0 ? `+${state}` : state))
            .join(", ") ?? "N/A"
        }
      />
      <DetailRow name="Fun fact" value={element.fun_fact} />
      <a
        href={`https://www.google.com/search?q=${encodeURIComponent(
          `${element.name} chemical element`,
        )}`}
        target="_blank"
        rel="noopener noreferrer"
        style={{ borderColor: textColor, color: textColor }}
      >
        Search on Google
      </a>
    </div>
  );
};

export default DetailsView;


---
./src/components/periodic/Element.tsx
---
import React, { memo } from "react";
import {
  type ElementType,
  type ElementTypeString,
  TEXT_COLORS,
  getGradientStyle,
} from "./Utils";

interface ElementComponentProps {
  x: number;
  y: number;
  data: ElementType[];
  onFocusElement: (elementNumber: number) => void;
}

// Element Component (memoized for performance)
const ElementComponent = memo(
  ({ x, y, data, onFocusElement }: ElementComponentProps) => {
    if (!Array.isArray(data)) return null;
    const element = data.find((item) => item.xpos === x && item.ypos === y);
    const elementType = element?.type || "";
    const gradientStyle = getGradientStyle(elementType);

    return (
      <div
        tabIndex={element?.number ?? -1}
        id={`element-${element ? element.number : ""}`}
        className="m-1 aspect-square h-14 w-14 border pl-1 pr-1 font-mono text-xl focus:border-2 focus:outline-none"
        style={{
          background: gradientStyle,
          color: TEXT_COLORS[elementType as ElementTypeString],
          borderColor: element
            ? TEXT_COLORS[elementType as ElementTypeString]
            : "transparent",
        }}
        onFocus={() => element && onFocusElement(element.number)}
      >
        <div className="flex flex-grow justify-start">
          {element?.number ?? ""}
        </div>
        <div className="flex flex-grow justify-end">
          {element?.symbol ?? ""}
        </div>
      </div>
    );
  },
);
ElementComponent.displayName = "ElementComponent";

export default ElementComponent;


---
./src/components/periodic/MassCalc.tsx
---
// MassCalculator.tsx
import React, { useRef, useCallback } from "react";
import Modal from "react-modal";
import { parseFormula } from "./Utils";

interface MassCalculatorProps {
  onClose: () => void;
  periodicData: any[]; // Replace with proper type
}

const calculateMass = (formula: string, periodicData: any[]): string => {
  const elementsFound = parseFormula(formula);
  let totalMass = 0;

  for (const [symbol, count] of Object.entries(elementsFound)) {
    const elementData = periodicData.find((e) => e.symbol === symbol);
    if (!elementData) {
      throw new Error(`Unknown element: ${symbol}`);
    }
    totalMass += elementData.atomic_mass * count;
  }
  return totalMass.toFixed(2);
};

const MassCalculator = ({ onClose, periodicData }: MassCalculatorProps) => {
  const inputRef = useRef<HTMLInputElement>(null);
  const outputRef = useRef<HTMLDivElement>(null);

  const calculateAndDisplayMass = useCallback(() => {
    if (!inputRef.current || !outputRef.current) return;

    const formula = inputRef.current.value;
    try {
      const mass = calculateMass(formula, periodicData);
      outputRef.current.innerText = `${mass} g/mol`;
    } catch (error) {
      if (error instanceof Error) {
        outputRef.current.innerText = error.message;
      } else {
        outputRef.current.innerText = "An unknown error occurred";
      }
    }
  }, [periodicData]);

  return (
    <div className="rounded bg-white">
      <div className="bg-stripes-header2 relative mx-auto max-w-md bg-opacity-100 p-6 pb-4">
        <div className="flex">
          <input
            ref={inputRef}
            type="text"
            placeholder="Type the chemical formula here"
            className="border-b-2 border-header2 bg-transparent font-lora text-xl focus:border-header focus:outline-none"
            style={{ width: "56vw", marginRight: "2vw" }}
            onChange={calculateAndDisplayMass}
          />
        </div>
        <div
          ref={outputRef}
          className="m-2 mt-4 text-center font-mono text-xl"
        ></div>
      </div>
    </div>
  );
};

interface MassModalProps {
  isOpen: boolean;
  onClose: () => void;
  periodicData: any[]; // Replace with proper type
}

export const MassModal = ({
  isOpen,
  onClose,
  periodicData,
}: MassModalProps) => {
  return (
    <Modal
      isOpen={isOpen}
      onRequestClose={onClose}
      shouldCloseOnOverlayClick
      shouldCloseOnEsc
      className="modal"
      overlayClassName="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex items-center justify-center p-4"
      ariaHideApp={false}
    >
      <MassCalculator onClose={onClose} periodicData={periodicData} />
    </Modal>
  );
};

export default MassCalculator;


---
./src/components/periodic/Reference.tsx
---
import React, { useState, useMemo } from "react";
import Modal from "react-modal";

interface ReferenceModalProps {
  isOpen: boolean;
  onClose: () => void;
}

interface TabInfo {
  name: string;
  imageSrc: string;
  alt: string;
}

const ReferenceModal = ({ isOpen, onClose }: ReferenceModalProps) => {
  const [activeTab, setActiveTab] = useState<number>(0);
  const tabs = useMemo<TabInfo[]>(
    () => [
      {
        name: "Aufbau Principle",
        imageSrc: "/chemutils/aufbau.jpg",
        alt: "Aufbau Principle",
      },
      {
        name: "Bonding",
        imageSrc: "/chemutils/bonding.avif",
        alt: "Chemical Bonding",
      },
      {
        name: "Solubility",
        imageSrc: "/chemutils/solubility.webp",
        alt: "Solubility Rules",
      },
      {
        name: "Transition metal charges",
        imageSrc: "/chemutils/transition_charges.avif",
        alt: "Common transition metal charges",
      },
    ],
    [],
  );

  return (
    <Modal
      isOpen={isOpen}
      onRequestClose={onClose}
      shouldCloseOnOverlayClick
      shouldCloseOnEsc
      className="modal"
      overlayClassName="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex items-center justify-center p-4"
      ariaHideApp={false}
    >
      <div className="rounded-lg bg-white">
        <div
          className="bg-stripes-header2 rounded-lg p-6"
          style={{ width: "80vw", height: "80vh", maxWidth: "1200px" }}
        >
          <div className="mb-4 flex font-mono">
            {tabs.map((tab, index) => (
              <button
                key={tab.name}
                className={`mr-4 h-8 border-b-2 px-2 text-xl ${
                  activeTab === index
                    ? "border-header text-header"
                    : "border-header2 hover:border-header"
                }`}
                onClick={() => setActiveTab(index)}
              >
                {tab.name}
              </button>
            ))}
          </div>
          <div className="h-[calc(80vh-140px)] overflow-auto">
            <img
              src={tabs[activeTab].imageSrc}
              alt={tabs[activeTab].alt}
              className="max-h-full max-w-full object-contain"
            />
          </div>
        </div>
      </div>
    </Modal>
  );
};

export default ReferenceModal;

---
./src/components/periodic/Table.tsx
---
import React from "react";
import ElementComponent from "./Element";
import type { ElementType } from "./Utils";

interface PeriodicTableProps {
  pdata: ElementType[];
  onSetFocus: (elementNumber: number) => void;
}

const PeriodicTable = ({ pdata, onSetFocus }: PeriodicTableProps) => {
  const columns = 18;
  const rows = 10;

  return (
    <>
      {Array.from({ length: rows }, (_, rowIndex) => (
        <div key={rowIndex} className="flex flex-row">
          {Array.from({ length: columns }, (_, colIndex) => (
            <ElementComponent
              key={`${colIndex}-${rowIndex}`}
              x={colIndex + 1}
              y={rowIndex + 1}
              data={pdata}
              onFocusElement={onSetFocus}
            />
          ))}
        </div>
      ))}
    </>
  );
};

interface TableContentProps {
  focusElement: number;
  onSetFocusElement: (elementNumber: number) => void;
  periodicData: ElementType[];
}

export const TableContent = ({
  focusElement,
  onSetFocusElement,
  periodicData,
}: TableContentProps) => {
  return (
    <div className="flex">
      <div className="flex-grow overflow-x-auto p-4">
        <div className="min-w-max">
          <PeriodicTable pdata={periodicData} onSetFocus={onSetFocusElement} />
        </div>
      </div>
      <div className="flex-shrink-0">
        {/* Import and use DetailsView here to avoid circular dependencies */}
        {/* This would be replaced with the actual import in the real implementation */}
        <div id="details-placeholder"></div>
      </div>
    </div>
  );
};

export default PeriodicTable;


---
./src/components/periodic/Utils.tsx
---
export interface ElementType {
  number: number;
  symbol: string;
  name: string;
  atomic_mass: number;
  xpos: number;
  ypos: number;
  type: string;
  electron_configuration: string;
  electron_configuration_semantic: string;
  electronegativity_pauling?: number;
  oxistates?: number[];
  oxistates_extended?: number[];
  fun_fact: string;
}

export interface ElementsDict {
  [key: string]: number;
}

export type ElementTypeString =
  | "Alkali Metal"
  | "Alkaline Earth Metal"
  | "Transition Metal"
  | "Post-transition Metal"
  | "Metalloid"
  | "Reactive Nonmetal"
  | "Noble Gas"
  | "Lanthanide"
  | "Actinide"
  | "Unknown Chemical Properties";

// Constants for colors
export const TEXT_COLORS: Record<ElementTypeString, string> = {
  "Alkali Metal": "#00768D",
  "Alkaline Earth Metal": "#D60024",
  "Transition Metal": "#6232EC",
  "Post-transition Metal": "#002C00",
  Metalloid: "#945801",
  "Reactive Nonmetal": "#0060F1",
  "Noble Gas": "#CD1D5F",
  Lanthanide: "#003356",
  Actinide: "#C73201",
  "Unknown Chemical Properties": "#3F3750",
};

export const BG_COLORS: Record<ElementTypeString, string> = {
  "Alkali Metal": "#D7F8FF",
  "Alkaline Earth Metal": "#FFE6E5",
  "Transition Metal": "#F3E7FE",
  "Post-transition Metal": "#D8F9E9",
  Metalloid: "#FEF8E2",
  "Reactive Nonmetal": "#E1EDFF",
  "Noble Gas": "#FFE6EA",
  Lanthanide: "#E1F3FF",
  Actinide: "#FFE7D7",
  "Unknown Chemical Properties": "#E7E7EA",
};

// Helper to generate gradient style for an element type.
export const getGradientStyle = (elementType: string): string => {
  const backgroundColor =
    BG_COLORS[elementType as ElementTypeString] || "white";
  return `repeating-linear-gradient(
    45deg,
    ${backgroundColor} 0px,
    ${backgroundColor} 2px,
    white 2px,
    white 5px
  )`;
};

export const parseFormula = (formula: string): ElementsDict => {
  const regex = /([A-Z][a-z]?)(\d*)/g;
  const elements: ElementsDict = {};
  let match: RegExpExecArray | null;

  while ((match = regex.exec(formula)) !== null) {
    const [, element, count] = match;
    elements[element] =
      (elements[element] || 0) + (count ? parseInt(count) : 1);
  }
  return elements;
};


---
./src/components/study/App.tsx
---
import { useState, useEffect } from "react";
import { Button } from "../ui/button";
import { Card, CardContent, CardHeader } from "../ui/card";
import { Alert, AlertDescription, AlertTitle } from "../ui/alert";
import { Input } from "../ui/input";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogClose
} from "../ui/dialog";
import {
  PlusCircle,
  Trash2,
  Info,
  Image as ImageIcon,
  FileText,
  File as FileIcon,
  FileType,
  FileCode,
  X,
  AlertCircle
} from "lucide-react";
import { processCardWithAI } from "../../lib/aiService";
import ReactMarkdown from 'react-markdown';
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';
import rehypeRaw from 'rehype-raw';
import 'katex/dist/katex.min.css';
import OpenAI from 'openai';

// Import config for model name
import config from "../../lib/config";
import { saveOpenAIApiKey } from "../../lib/config";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../ui/tabs";

interface FileData {
  name: string;
  type: string;
  data: string; // Base64 for images and PDFs, raw text for other files
  id: string;
}

interface StudyCard {
  id: string;
  content: string;
  type: 'text' | 'file';
  data?: string; // For text cards
  files?: FileData[]; // For file cards
}

interface AnalysisResult {
  cardId: string;
  descriptions: string[];
}

export default function StudyApp() {
  const [cards, setCards] = useState<StudyCard[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [results, setResults] = useState<AnalysisResult[]>([]);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [apiKeyDialogOpen, setApiKeyDialogOpen] = useState(false);
  const [openaiApiKey, setOpenaiApiKey] = useState('');
  const [selectedApiService, setSelectedApiService] = useState<'openai' | 'gemini'>('openai');
  const [geminiApiKey, setGeminiApiKey] = useState('');
  const [pdfProcessingError, setPdfProcessingError] = useState<string | null>(null);
  const [extraInstructions, setExtraInstructions] = useState('');
  const [numQuestions, setNumQuestions] = useState(3);
  const [selectedModel, setSelectedModel] = useState('gpt-4o');
  const [availableModels, setAvailableModels] = useState([
    { id: 'gpt-4o', label: 'OpenAI GPT-4o' },
    { id: 'gpt-4-turbo', label: 'OpenAI GPT-4 Turbo' },
    { id: 'gpt-3.5-turbo', label: 'OpenAI GPT-3.5 Turbo' },
    { id: 'gemini-2.5-flash-preview-04-17', label: 'Gemini 2.5 Flash' },
    { id: 'gemini-pro', label: 'Gemini Pro' },
    { id: 'gemini-1.5-flash', label: 'Gemini 1.5 Flash' },
    { id: 'gemini-1.5-flash-lite', label: 'Gemini 1.5 Flash Lite' },
    { id: 'gemini-2.0-flash', label: 'Gemini 2.0 Flash' },
    { id: 'gemini-2.0-flash-lite', label: 'Gemini 2.0 Flash Lite' },
  ]);

  const addCard = (type: 'text' | 'file') => {
    const newCard: StudyCard = {
      id: `card-${Date.now()}`,
      content: '',
      type,
      ...(type === 'text' ? { data: '' } : { files: [] }),
    };
    setCards([...cards, newCard]);
  };

  const deleteCard = (id: string) => {
    const cardToDelete = cards.find(card => card.id === id);

    // Check if card has content, data, or files before confirming deletion
    if (cardToDelete && (
      cardToDelete.content.trim() !== '' ||
      (cardToDelete.type === 'text' && cardToDelete.data && cardToDelete.data.trim() !== '') ||
      (cardToDelete.type === 'file' && cardToDelete.files && cardToDelete.files.length > 0)
    )) {
      if (!window.confirm("This card has content. Are you sure you want to delete it?")) {
        return;
      }
    }

    setCards(cards.filter(card => card.id !== id));
  };

  const updateCardContent = (id: string, content: string) => {
    setCards(
      cards.map(card =>
        card.id === id ? { ...card, content } : card
      )
    );
  };

  const updateCardData = (id: string, data: string) => {
    setCards(
      cards.map(card =>
        card.id === id && card.type === 'text' ? { ...card, data } : card
      )
    );
  };

  const addFileToCard = (cardId: string, fileData: FileData) => {
    setCards(
      cards.map(card =>
        card.id === cardId && card.type === 'file'
          ? {
              ...card,
              files: [...(card.files || []), fileData]
            }
          : card
      )
    );
  };

  const removeFileFromCard = (cardId: string, fileId: string) => {
    setCards(
      cards.map(card =>
        card.id === cardId && card.type === 'file' && card.files
          ? {
              ...card,
              files: card.files.filter(file => file.id !== fileId)
            }
          : card
      )
    );
  };

  // Load from localStorage on mount
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const savedNumQuestions = localStorage.getItem('num_questions');
      const savedExtraInstructions = localStorage.getItem('extra_instructions');
      const savedModel = localStorage.getItem('selected_model');
      if (savedNumQuestions) setNumQuestions(Number(savedNumQuestions));
      if (savedExtraInstructions) setExtraInstructions(savedExtraInstructions);
      if (savedModel) setSelectedModel(savedModel);
    }
  }, []);

  // Save to localStorage on change
  useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem('num_questions', String(numQuestions));
      localStorage.setItem('extra_instructions', extraInstructions);
      localStorage.setItem('selected_model', selectedModel);
    }
  }, [numQuestions, extraInstructions, selectedModel]);

  // Fetch models from OpenAI SDK on mount
  useEffect(() => {
    async function fetchModels() {
      try {
        const apiKey = localStorage.getItem('openai_api_key');
        if (!apiKey) return;
        const openai = new OpenAI({ apiKey, dangerouslyAllowBrowser: true });
        const response = await openai.models.list();
        if (response && response.data) {
          const filtered = response.data
            .filter((m: any) => typeof m.id === 'string' && (m.id.startsWith('gpt-') || m.id.startsWith('gemini-')))
            .map((m: any) => ({ id: m.id, label: m.id }));
          if (filtered.length > 0) setAvailableModels(filtered);
        }
      } catch (err) {
        // fallback to default list
      }
    }
    fetchModels();
  }, []);

  // Function to process cards with AI
  const processCards = async () => {
    // Only process if we have cards
    if (cards.length === 0) {
      alert("Please add at least one card to process.");
      return;
    }

    // Clear any previous errors
    setPdfProcessingError(null);

    // Check if appropriate API key is stored based on selected service
    let storedApiKey;
    if (selectedApiService === 'openai') {
      storedApiKey = localStorage.getItem('openai_api_key');
    } else {
      storedApiKey = localStorage.getItem('gemini_api_key');
    }

    if (!storedApiKey) {
      setApiKeyDialogOpen(true);
      return;
    }

    setIsProcessing(true);
    setResults([]);

    try {
      // Aggregate all card content and files
      let allText = '';
      let allFiles = [];
      cards.forEach(card => {
        if (card.type === 'text' && card.data) {
          allText += (allText ? '\n\n' : '') + card.data;
        } else if (card.type === 'file' && card.files && card.files.length > 0) {
          allFiles = allFiles.concat(card.files.map(file => ({
            name: file.name,
            type: file.type,
            data: file.data,
            id: file.id
          })));
        }
      });

      // Prepare a single cardData object for the AI
      const cardData = {
        type: (allFiles.length > 0 ? 'file' : 'text') as 'text' | 'file',
        content: cards.map(card => card.content).filter(Boolean).join(' | '),
        data: allFiles.length === 0 ? allText : undefined,
        files: allFiles.length > 0 ? allFiles : undefined,
        extraInstructions,
        numQuestions,
        selectedModel
      };

      try {
        // Process all cards as a single batch with AI
        const descriptions = await processCardWithAI(cardData);
        setResults([{ cardId: 'all', descriptions }]);
        setDialogOpen(true);
      } catch (cardError) {
        console.error('Error processing cards:', cardError);
        if (allFiles.some(f => f.type === 'application/pdf')) {
          setPdfProcessingError("There was an error processing PDF files. Make sure your API key has appropriate permissions.");
        }
        setResults([{ cardId: 'all', descriptions: [`Error: ${cardError.message || "Unknown error processing cards"}`] }]);
        setDialogOpen(true);
      }
    } catch (error) {
      console.error("Error processing cards:", error);
      alert(`There was an error processing your cards: ${error.message || "Unknown error"}. Please check your API key and try again.`);
    } finally {
      setIsProcessing(false);
    }
  };

  // Handle API key submission
  const handleApiKeySubmit = () => {
    const keyToSave = selectedApiService === 'openai' ? openaiApiKey : geminiApiKey;

    if (keyToSave.trim()) {
      // Save API key to localStorage based on selected service
      if (selectedApiService === 'openai') {
        localStorage.setItem('openai_api_key', keyToSave.trim());
      } else {
        localStorage.setItem('gemini_api_key', keyToSave.trim());
      }

      setApiKeyDialogOpen(false);
      // Process cards after setting API key
      setTimeout(() => processCards(), 100);
    }
  };

  // Check if API key exists
  const hasApiKey = (service: 'openai' | 'gemini') => {
    if (typeof window !== 'undefined') {
      if (service === 'openai') {
        return !!localStorage.getItem('openai_api_key');
      } else {
        return !!localStorage.getItem('gemini_api_key');
      }
    }
    return false;
  };

  // Clear API key from localStorage
  const clearApiKey = (service: 'openai' | 'gemini') => {
    if (typeof window !== 'undefined') {
      if (service === 'openai') {
        localStorage.removeItem('openai_api_key');
        setOpenaiApiKey('');
      } else {
        localStorage.removeItem('gemini_api_key');
        setGeminiApiKey('');
      }
      alert(`${service.toUpperCase()} API key has been removed`);
    }
  };

  // Open API key management dialog
  const openApiKeySettings = () => {
    // Get current API keys (but don't display them)
    if (hasApiKey('openai') && !openaiApiKey) {
      setOpenaiApiKey('••••••••••••••••'); // Placeholder for security
    }
    if (hasApiKey('gemini') && !geminiApiKey) {
      setGeminiApiKey('••••••••••••••••'); // Placeholder for security
    }
    setApiKeyDialogOpen(true);
  };

  // Handle when the user changes the AI provider selection
  const handleAIProviderChange = (provider: 'openai' | 'gemini') => {
    setSelectedApiService(provider);
    localStorage.setItem('selected_ai_provider', provider);
  };

  useEffect(() => {
    // Check for API keys on component mount
    if (hasApiKey('openai') && !openaiApiKey) {
      setOpenaiApiKey('••••••••••••••••'); // Placeholder for security
    }
    if (hasApiKey('gemini') && !geminiApiKey) {
      setGeminiApiKey('••••••••••••••••'); // Placeholder for security
    }

    // Load previously selected AI provider
    const savedProvider = localStorage.getItem('selected_ai_provider');
    if (savedProvider === 'openai' || savedProvider === 'gemini') {
      setSelectedApiService(savedProvider);
    }
  }, []);

  return (
    <div className="container mx-auto py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Study Cards</h1>
        <div className="flex gap-2 items-center">
          {(hasApiKey('openai') || hasApiKey('gemini')) && (
            <Button
              variant="ghost"
              size="sm"
              onClick={openApiKeySettings}
              className="text-muted-foreground"
              title="API Key Settings"
            >
              <span className="mr-1 text-xs">API Key</span>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M21 10h-4a2 2 0 1 0 0 4h4v2a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v2z" />
                <circle cx="7" cy="12" r="2" />
              </svg>
            </Button>
          )}
          <div className="flex gap-2">
            <Button variant="outline" onClick={() => addCard('text')}>
              <PlusCircle size={18} className="mr-1" />
              Text Card
            </Button>
            <Button variant="outline" onClick={() => addCard('file')}>
              <PlusCircle size={18} className="mr-1" />
              File Card
            </Button>
          </div>
        </div>
      </div>

      {cards.length === 0 ? (
        <Alert className="mb-4">
          <Info className="h-4 w-4" />
          <AlertTitle>No cards available</AlertTitle>
          <AlertDescription>
            Click the "Add Card" button above to create your first study card.
          </AlertDescription>
        </Alert>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {cards.map((card, index) => (
            <Card key={card.id} className="transition-all hover:shadow-md">
              <CardHeader className="relative pb-0">
                <div className="absolute top-2 right-2">
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => deleteCard(card.id)}
                    className="h-8 w-8 text-destructive hover:bg-destructive/10 hover:text-destructive"
                  >
                    <Trash2 size={16} />
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="pt-5">
                <div className="space-y-4">
                  <div className="space-y-2">
                    <label htmlFor={`type-${card.id}`} className="text-sm font-medium">
                      Type
                    </label>
                    <Input
                      id={`type-${card.id}`}
                      value={card.content}
                      onChange={(e) => updateCardContent(card.id, e.target.value)}
                      placeholder="Enter card type..."
                    />
                  </div>

                  {card.type === 'text' ? (
                    <div className="space-y-2">
                      <label htmlFor={`text-${card.id}`} className="text-sm font-medium">
                        Text Content
                      </label>
                      <textarea
                        id={`text-${card.id}`}
                        value={card.data}
                        onChange={(e) => updateCardData(card.id, e.target.value)}
                        placeholder="Paste or type text content here..."
                        className="flex min-h-[120px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 resize-y"
                      />
                    </div>
                  ) : (
                    <div className="space-y-2">
                      <div className="flex items-center justify-between mb-2">
                        <label htmlFor={`file-${card.id}`} className="text-sm font-medium">
                          Files
                        </label>
                        <span className="text-xs text-muted-foreground">
                          {card.files?.length || 0} file{card.files?.length !== 1 ? 's' : ''}
                        </span>
                      </div>

                      {/* File display area */}
                      {card.files && card.files.length > 0 && (
                        <div className="mb-3 space-y-2">
                          {card.files.map((file) => {
                            const getFileIcon = () => {
                              if (file.type.startsWith('image/')) return <ImageIcon size={16} />;
                              if (file.type === 'application/pdf') return <FileType size={16} />;
                              if (file.type.includes('text/')) return <FileText size={16} />;
                              if (file.type.includes('code') ||
                                  file.type.includes('javascript') ||
                                  file.type.includes('html') ||
                                  file.type.includes('css')) {
                                return <FileCode size={16} />;
                              }
                              return <FileIcon size={16} />;
                            };

                            return (
                              <div
                                key={file.id}
                                className="flex items-center justify-between rounded-full border border-input pl-3 pr-1 py-1 bg-background text-sm hover:border-primary"
                              >
                                <div className="flex items-center gap-2 overflow-hidden">
                                  {getFileIcon()}
                                  <span className="truncate max-w-[180px]">{file.name}</span>
                                </div>
                                <Button
                                  variant="ghost"
                                  size="icon"
                                  className="h-6 w-6 rounded-full hover:bg-destructive/10 hover:text-destructive"
                                  onClick={() => removeFileFromCard(card.id, file.id)}
                                >
                                  <X size={14} />
                                </Button>
                              </div>
                            );
                          })}
                        </div>
                      )}

                      {/* Drop zone */}
                      <div
                        className="border border-dashed border-input hover:border-primary rounded-md p-6 text-center cursor-pointer transition-colors"
                        onDragOver={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                        }}
                        onDrop={(e) => {
                          e.preventDefault();
                          e.stopPropagation();

                          if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
                            Array.from(e.dataTransfer.files).forEach(file => {
                              const reader = new FileReader();

                              reader.onload = (event) => {
                                if (event.target && event.target.result) {
                                  const newFile: FileData = {
                                    id: `file-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                                    name: file.name,
                                    type: file.type || 'application/octet-stream',
                                    data: event.target.result.toString()
                                  };
                                  addFileToCard(card.id, newFile);
                                }
                              };

                              if (file.type.startsWith('image/')) {
                                reader.readAsDataURL(file);
                              } else if (file.type === 'application/pdf') {
                                reader.readAsDataURL(file);
                              } else {
                                reader.readAsText(file);
                              }
                            });
                          }
                        }}
                        onClick={() => {
                          const input = document.getElementById(`file-input-${card.id}`);
                          if (input) {
                            input.click();
                          }
                        }}
                      >
                        <input
                          id={`file-input-${card.id}`}
                          type="file"
                          multiple
                          className="hidden"
                          onChange={(e) => {
                            if (e.target.files && e.target.files.length > 0) {
                              Array.from(e.target.files).forEach(file => {
                                const reader = new FileReader();

                                reader.onload = (event) => {
                                  if (event.target && event.target.result) {
                                    const newFile: FileData = {
                                      id: `file-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                                      name: file.name,
                                      type: file.type || 'application/octet-stream',
                                      data: event.target.result.toString()
                                    };
                                    addFileToCard(card.id, newFile);
                                  }
                                };

                                if (file.type.startsWith('image/')) {
                                  reader.readAsDataURL(file);
                                } else if (file.type === 'application/pdf') {
                                  reader.readAsDataURL(file);
                                } else {
                                  reader.readAsText(file);
                                }
                              });
                            }
                          }}
                        />

                        <div className="flex flex-col items-center justify-center text-muted-foreground">
                          <p>Drag and drop files here or click to browse</p>
                          <p className="text-xs mt-1">Supports images, PDFs, and text files</p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* PDF processing error alert */}
      {pdfProcessingError && (
        <Alert className="mt-4 bg-amber-50 border-amber-200">
          <AlertCircle className="h-4 w-4 text-amber-600" />
          <AlertTitle className="text-amber-600">PDF Processing Issue</AlertTitle>
          <AlertDescription className="text-amber-700">
            {pdfProcessingError}
          </AlertDescription>
        </Alert>
      )}

      {/* Submit button */}
      <div className="mt-8 flex flex-col items-center justify-center">
        <div className="mb-2 text-center">
          <div className="inline-flex items-center rounded-md border px-3 py-1 mb-2">
            <span className="text-sm font-medium mr-2">AI Provider:</span>
            <div className="flex items-center space-x-1">
              <Button
                variant={selectedApiService === 'openai' ? 'default' : 'outline'}
                size="sm"
                onClick={() => handleAIProviderChange('openai')}
                className="h-7 px-2"
              >
                OpenAI
              </Button>
              <Button
                variant={selectedApiService === 'gemini' ? 'default' : 'outline'}
                size="sm"
                onClick={() => handleAIProviderChange('gemini')}
                className="h-7 px-2"
              >
                Gemini
              </Button>
            </div>
          </div>
        </div>
        <div className="max-w-md w-full mx-auto mb-6 flex flex-col gap-4">
          <div>
            <label htmlFor="model-picker" className="block text-sm font-medium mb-1">Model</label>
            <select
              id="model-picker"
              value={selectedModel}
              onChange={e => setSelectedModel(e.target.value)}
              className="w-full border rounded-md px-2 py-1 text-sm"
            >
              {availableModels.map((m) => (
                <option key={m.id} value={m.id}>{m.label}</option>
              ))}
            </select>
          </div>
          <div>
            <label htmlFor="num-questions" className="block text-sm font-medium mb-1">Number of Questions</label>
            <Input
              id="num-questions"
              type="number"
              min={1}
              max={10}
              value={numQuestions}
              onChange={e => setNumQuestions(Number(e.target.value))}
              className="w-24"
            />
          </div>
          <div>
            <label htmlFor="extra-instructions" className="block text-sm font-medium mb-1">Extra Instructions (optional)</label>
            <textarea
              id="extra-instructions"
              value={extraInstructions}
              onChange={e => setExtraInstructions(e.target.value)}
              className="w-full min-h-[60px] rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
              placeholder="e.g. Focus on conceptual understanding, include diagrams, ..."
            />
          </div>
        </div>
        <Button
          onClick={processCards}
          disabled={isProcessing || cards.length === 0}
          className={`w-full max-w-md relative ${isProcessing ? 'glimmer' : ''}`}
        >
          <span className={isProcessing ? 'invisible' : ''}>
            {`Analyze Cards with ${selectedApiService === 'openai' ? 'OpenAI' : 'Gemini'}`}
          </span>
          {isProcessing && (
            <span className="absolute inset-0 flex items-center justify-center z-10 text-white font-semibold pointer-events-none">
              Analyzing...
            </span>
          )}
        </Button>
      </div>

      {/* Results Dialog */}
      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Practice Questions</DialogTitle>
            <DialogDescription>
              These questions are generated from all your study cards.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-6 my-4">
            {results.length > 0 && results[0].descriptions.map((description, index) => (
              <div key={index} className="p-3 rounded-md bg-muted/50">
                <div className="prose prose-neutral max-w-none text-sm">
                  <ReactMarkdown
                    remarkPlugins={[remarkMath]}
                    rehypePlugins={[rehypeKatex, rehypeRaw]}
                    components={{
                      p: (props) => <p {...props} className="my-2" />,
                      ul: (props) => <ul {...props} className="list-disc ml-6" />,
                      ol: (props) => <ol {...props} className="list-decimal ml-6" />,
                      code: (props) => <code {...props} className="bg-muted px-1 rounded" />,
                    }}
                  >
                    {description}
                  </ReactMarkdown>
                </div>
              </div>
            ))}
          </div>
          <DialogFooter>
            <DialogClose asChild>
              <Button>Close</Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* API Key Dialog */}
      <Dialog open={apiKeyDialogOpen} onOpenChange={setApiKeyDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>API Key Settings</DialogTitle>
            <DialogDescription>
              Configure API keys for AI providers. Your keys are stored securely in your browser.
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-4">
            <Tabs defaultValue={selectedApiService} onValueChange={(value) => setSelectedApiService(value as 'openai' | 'gemini')}>
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="openai">OpenAI</TabsTrigger>
                <TabsTrigger value="gemini">Gemini</TabsTrigger>
              </TabsList>
              <TabsContent value="openai" className="space-y-4 mt-4">
                <div className="space-y-2">
                  <label htmlFor="openai-api-key" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                    OpenAI API Key
                  </label>
                  <Input
                    id="openai-api-key"
                    type="password"
                    placeholder={hasApiKey('openai') ? "Enter new API key to replace current one" : "Enter your OpenAI API key"}
                    value={openaiApiKey}
                    onChange={(e) => setOpenaiApiKey(e.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">
                    Get an API key from <a href="https://platform.openai.com/api-keys" target="_blank" rel="noopener noreferrer" className="underline">OpenAI Platform</a>.
                    <br />
                    Make sure your API key has access to the <span className="font-mono text-xs">{config.openaiModelName}</span> model.
                  </p>
                </div>
                <div className="flex justify-between">
                  {hasApiKey('openai') && (
                    <Button type="button" variant="destructive" onClick={() => clearApiKey('openai')} size="sm">
                      Remove API Key
                    </Button>
                  )}
                  <Button
                    type="button"
                    onClick={handleApiKeySubmit}
                    disabled={!openaiApiKey.trim() || openaiApiKey === '••••••••••••••••'}
                    size="sm"
                  >
                    {openaiApiKey.trim() && openaiApiKey !== '••••••••••••••••' ? 'Save Key' : 'Close'}
                  </Button>
                </div>
              </TabsContent>

              <TabsContent value="gemini" className="space-y-4 mt-4">
                <div className="space-y-2">
                  <label htmlFor="gemini-api-key" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                    Gemini API Key
                  </label>
                  <Input
                    id="gemini-api-key"
                    type="password"
                    placeholder={hasApiKey('gemini') ? "Enter new API key to replace current one" : "Enter your Gemini API key"}
                    value={geminiApiKey}
                    onChange={(e) => setGeminiApiKey(e.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">
                    Get an API key from <a href="https://ai.google.dev/" target="_blank" rel="noopener noreferrer" className="underline">Google AI Studio</a>.
                    <br />
                    Make sure your API key has access to the <span className="font-mono text-xs">{config.modelName}</span> model.
                  </p>
                </div>
                <div className="flex justify-between">
                  {hasApiKey('gemini') && (
                    <Button type="button" variant="destructive" onClick={() => clearApiKey('gemini')} size="sm">
                      Remove API Key
                    </Button>
                  )}
                  <Button
                    type="button"
                    onClick={handleApiKeySubmit}
                    disabled={!geminiApiKey.trim() || geminiApiKey === '••••••••••••••••'}
                    size="sm"
                  >
                    {geminiApiKey.trim() && geminiApiKey !== '••••••••••••••••' ? 'Save Key' : 'Close'}
                  </Button>
                </div>
              </TabsContent>
            </Tabs>
          </div>

          <DialogFooter className="sm:justify-between">
            <div className="text-sm text-muted-foreground">
              Your keys are stored only in this browser.
            </div>
            <DialogClose asChild>
              <Button type="button" variant="outline">Cancel</Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}


---
./src/components/chinese/App.tsx
---
import { useEffect, useMemo, useRef, useState } from "react";
import { CharState, type Sentence } from "./Data";
import { useSelector } from "@xstate/store/react";
import { Review, TrafficLights } from "./Review";
import { store, type AppMode, getAllLessons } from "./Store";
import Modal from "react-modal";
import RelativeTime from "@yaireo/relative-time";
/**
 * Simple button component that renders a clickable button with underline decoration
 * @param {string} name - The text to display on the button
 * @param {() => void} onClick - Click handler function
 */
function Button({
  name,
  onClick,
  red = false,
}: {
  name: string;
  onClick: () => void;
  red?: boolean;
}) {
  return (
    <button
      className={`m-0 h-8 justify-center truncate p-0 font-lora underline transition-all duration-300 ease-in-out ${red ? "hover:decoration-red-600" : "hover:decoration-header"} ${red ? "decoration-red-400" : "decoration-header2"}`}
      onClick={onClick}
    >
      {name}
    </button>
  );
}

/**
 * Basic sentence details with click-to-reveal English meaning
 */
function SentenceDetails() {
  const [revealMeaning, setRevealMeaning] = useState(false);
  const sentence: Sentence = useSelector(
    store,
    (state) => state.context.sentences[0],
  );

  return (
    <div className="bg-stripes-header2 flex w-[50rem] gap-1 rounded-xl border border-header py-3">
      <span className="my-auto w-[20rem] border-r border-r-header px-5 font-lora text-xl">
        <span className="text-transform font-caps font-mono text-sm uppercase text-header">
          lesson
        </span>
        <br />
        {sentence.lesson}
      </span>
      <span
        className={`group my-auto w-[30rem] ${!revealMeaning ? "cursor-pointer" : ""} px-5 font-lora text-xl`}
        onClick={() => setRevealMeaning(true)}
      >
        <span className="text-transform font-caps font-mono text-sm uppercase text-header">
          english meaning{" "}
          {!revealMeaning && (
            <span className="text-xs italic">(click to reveal)</span>
          )}
        </span>
        <br />
        {revealMeaning ? (
          <span className="opacity-100 transition-opacity duration-500">
            {sentence.def}
          </span>
        ) : (
          <div
            className="group relative flex items-center gap-1"
            title="English hidden for a little extra challenge, click to reveal it"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className="h-6 w-6 text-gray-400 transition-colors group-hover:text-header"
            >
              <path d="M10 12.5a2.5 2.5 0 100-5 2.5 2.5 0 000 5z" />
              <path
                fillRule="evenodd"
                d="M.664 10.59a1.651 1.651 0 010-1.186A10.004 10.004 0 0110 3c4.257 0 7.893 2.66 9.336 6.41.147.381.146.804 0 1.186A10.004 10.004 0 0110 17c-4.257 0-7.893-2.66-9.336-6.41zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                clipRule="evenodd"
              />
            </svg>
          </div>
        )}
      </span>
      <span className="mt-auto px-3 font-mono text-base text-gray-500">
        {sentence.id}
      </span>
    </div>
  );
}

/**
 * Component that renders a full sentence review interface with multiple characters
 */
function SentenceReview({ mode }: { mode: AppMode | null }) {
  const id = useRef({
    id: Math.random().toString(36).substring(2, 10) + Date.now().toString(36),
    m: mode ?? ((Math.random() < 0.5 ? "character" : "pinyin") as AppMode),
  }).current;

  // Move session update to useEffect
  useEffect(() => {
    store.trigger.updateSession({ key: id.id, date: new Date() });
  }, []);

  const sentences = useSelector(store, (state) => state.context.sentences);

  return (
    <div className="flex w-full flex-wrap justify-center gap-4 overflow-visible">
      {sentences[0].words.map(
        (word: { character: string; pinyin: string }, index: number) => {
          // Special handling for punctuation - display inline with previous character
          const isPunctuation = word.pinyin === "";
          const previousIsPunctuation =
            index > 0 && sentences[0].words[index - 1].pinyin === "";

          // Create a non-breaking span for punctuation to keep it with preceding characters
          return (
            <div
              key={index}
              className={
                isPunctuation
                  ? "-ml-2 inline-block whitespace-nowrap"
                  : undefined
              }
              style={isPunctuation ? { position: "relative" } : undefined}
            >
              <Review
                character={word.character}
                pinyin={word.pinyin}
                persistentId={id.id}
                mode={id.m}
              />
            </div>
          );
        },
      )}
    </div>
  );
}

function Footer({
  showModal,
  showSettingsModal,
  progressSentence, // (skips if not done)
}: {
  showModal: () => void;
  showSettingsModal: () => void;
  progressSentence: () => void;
}) {
  return (
    <div className="flex w-full">
      <div className="mb-0 mr-auto flex flex-row gap-5">
        <Button
          name="help"
          onClick={() => {
            window.location.href = "/blog/using-chinese";
          }}
        />
        <Button name="history" onClick={() => showModal()} />
        <Button name="settings" onClick={() => showSettingsModal()} />
      </div>
      <div className="mb-0 ml-auto flex flex-row gap-5">
        <Button
          name="continue"
          onClick={() => {
            progressSentence();
          }}
        />
      </div>
    </div>
  );
}

function MyModal({ modalIsOpen, closeModal, relativeTimes, history }) {
  const [activeTab, setActiveTab] = useState("character");
  const numSentences = useSelector(
    store,
    (state) => state.context.sentences.length,
  );
  // Determine which data to use based on active tab
  const currentHistory = history[activeTab] || {};

  return (
    <Modal
      isOpen={modalIsOpen}
      onRequestClose={closeModal}
      contentLabel="History Modal"
      className="m-auto w-3/4 max-w-lg bg-white font-lora"
      overlayClassName="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center"
      ariaHideApp={false}
    >
      <div className="bg-stripes-header2 h-full w-full p-6">
        <h2 className="mb-4 text-xl font-bold">Learning history</h2>
        <p className="">You have {numSentences} sentences left this cycle.</p>
        {/* Tabs for switching between character and pinyin history */}
        <div className="mb-4 flex border-b border-header">
          <button
            className={`mr-4 px-2 py-1 font-medium ${activeTab === "character" ? "border-b-2 border-header text-header" : "text-gray-500"}`}
            onClick={() => setActiveTab("character")}
          >
            Characters
          </button>
          <button
            className={`px-2 py-1 font-medium ${activeTab === "pinyin" ? "border-b-2 border-header text-header" : "text-gray-500"}`}
            onClick={() => setActiveTab("pinyin")}
          >
            Pinyin
          </button>
        </div>

        <div className="mb-4">
          {!Object.keys(currentHistory).length ? (
            <p>
              Your {activeTab} learning history will appear here. It is
              currently empty.
            </p>
          ) : (
            <div className="list-disc">
              {Object.entries(currentHistory).map(([key, value]) => (
                <div key={key} className="flex">
                  <span className="w-20 font-lora text-xl font-bold">
                    {key}
                  </span>
                  <span className="my-auto px-4">
                    <TrafficLights state={value[0]} checkMark={false} />
                  </span>
                  <span className="my-auto px-4 font-mono text-gray-500">
                    {relativeTimes[activeTab][key]}
                  </span>
                </div>
              ))}
            </div>
          )}
        </div>
        <div className="flex justify-between">
          <div className="px-4 py-2">
            <Button
              name="Clear Data"
              red
              onClick={() => {
                if (
                  confirm(
                    "Are you sure you want to delete all data from past practice sessions?",
                  )
                ) {
                  // Get existing data
                  const storedData = JSON.parse(
                    localStorage.getItem("chinese_app_data") || "{}",
                  );
                  // Clear only current mode data
                  if (storedData) {
                    // storedData[CURRENT_MODE] = {};
                    localStorage.setItem(
                      "chinese_app_data",
                      JSON.stringify(storedData),
                    );
                  }
                  window.location.reload();
                }
              }}
            />
          </div>
          <div className="px-4 py-2">
            <Button name="Close" onClick={closeModal} />
          </div>
        </div>
      </div>
    </Modal>
  );
}

function SettingsModal({
  modalIsOpen,
  closeModal,
  currentMode,
  setMode,
}: {
  modalIsOpen: boolean;
  closeModal: () => void;
  currentMode: AppMode | null;
  setMode: (mode: AppMode | null) => void;
}) {
  // Update settings immediately when changed
  const updateMode = (newMode: AppMode | null) => {
    setMode(newMode);
  };

  // State for lesson selection
  const allLessons = useMemo(() => getAllLessons(), []);
  const enabledLessons = useSelector(
    store,
    (state) => state.context.enabledLessons,
  );
  const [selectedLessons, setSelectedLessons] =
    useState<string[]>(enabledLessons);

  // Handle the selection/deselection of a lesson
  const toggleLesson = (lesson: string) => {
    setSelectedLessons((prev) =>
      prev.includes(lesson)
        ? prev.filter((l) => l !== lesson)
        : [...prev, lesson],
    );
  };

  // Handle select all / deselect all
  const toggleAllLessons = () => {
    if (selectedLessons.length === allLessons.length) {
      setSelectedLessons([]);
    } else {
      setSelectedLessons([...allLessons]);
    }
  };

  // Apply lesson selection changes
  useEffect(() => {
    // If no lessons are selected, select all (default behavior)
    const lessonsToApply =
      selectedLessons.length === 0 ? allLessons : selectedLessons;

    // Update the store with enabled lessons
    store.trigger.updateEnabledLessons({ enabledLessons: lessonsToApply });
  }, [selectedLessons, allLessons]);

  return (
    <Modal
      isOpen={modalIsOpen}
      onRequestClose={closeModal}
      contentLabel="Settings Modal"
      className="m-auto w-3/4 max-w-lg bg-white font-lora"
      overlayClassName="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center"
      ariaHideApp={false}
    >
      <div className="bg-stripes-header2 h-full w-full p-6">
        <h2 className="mb-4 text-xl font-bold">Settings</h2>

        <div className="mb-6">
          <h3 className="mb-2 font-medium">Practice Mode</h3>
          <div className="flex flex-col gap-2">
            <label className="flex items-center">
              <input
                type="radio"
                name="mode"
                checked={currentMode === null}
                onChange={() => updateMode(null)}
                className="mr-2"
              />
              I'm feeling lucky (random)
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                name="mode"
                checked={currentMode === "character"}
                onChange={() => updateMode("character")}
                className="mr-2"
              />
              Character mode
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                name="mode"
                checked={currentMode === "pinyin"}
                onChange={() => updateMode("pinyin")}
                className="mr-2"
              />
              Pinyin mode
            </label>
          </div>
        </div>

        <div className="mb-6">
          <div className="mb-2 flex items-center justify-between">
            <h3 className="font-medium">Lessons</h3>
            <Button
              name={
                selectedLessons.length === allLessons.length
                  ? "Deselect All"
                  : "Select All"
              }
              onClick={toggleAllLessons}
            />
          </div>
          <div className="max-h-40 overflow-y-auto rounded border border-gray-200 p-2">
            {allLessons.map((lesson) => (
              <label key={lesson} className="mb-1 flex items-center">
                <input
                  type="checkbox"
                  checked={selectedLessons.includes(lesson)}
                  onChange={() => toggleLesson(lesson)}
                  className="mr-2"
                />
                {lesson}
              </label>
            ))}
          </div>
          {selectedLessons.length === 0 && (
            <p className="mt-1 text-sm text-gray-500">
              When no lessons are selected, all lessons will be used.
            </p>
          )}
        </div>

        <div className="flex justify-end">
          <div className="px-4 py-2">
            <Button name="Close" onClick={closeModal} />
          </div>
        </div>
      </div>
    </Modal>
  );
}

export default function ChineseApp() {
  const [historyModalIsOpen, setHistoryModalIsOpen] = useState(false);
  const [settingsModalIsOpen, setSettingsModalIsOpen] = useState(false);
  const [mode, setMode] = useState<AppMode | null>(null);

  // Function to show modals
  const showHistoryModal = () => {
    setHistoryModalIsOpen(true);
  };

  const showSettingsModal = () => {
    setSettingsModalIsOpen(true);
  };

  // Function to close modals
  const closeHistoryModal = () => {
    setHistoryModalIsOpen(false);
  };

  const closeSettingsModal = () => {
    setSettingsModalIsOpen(false);
  };

  const history = useSelector(store, (state) => state.context.history);
  const times = useMemo(() => {
    const state = store.getSnapshot();
    const history = state.context.history;
    const rtf = new RelativeTime();
    let times = {
      character: {} as Record<string, string>,
      pinyin: {} as Record<string, string>,
    };

    Object.entries(history.character).forEach(([char, [_, sessionId]]) => {
      if (state.context.sessions[sessionId]) {
        const time = new Date(state.context.sessions[sessionId]);
        times.character[char] = rtf.from(time);
      }
    });
    Object.entries(history.pinyin).forEach(([char, [_, sessionId]]) => {
      if (state.context.sessions[sessionId]) {
        const time = new Date(state.context.sessions[sessionId]);
        times.pinyin[char] = rtf.from(time);
      }
    });
    return times;
  }, [history]);

  const currentId = useSelector(
    store,
    (state) => state.context.sentences[0].id,
  );
  const numSentences = useSelector(
    store,
    (state) => state.context.sentences.length,
  );
  return (
    <div className="flex h-screen w-full flex-col items-center text-2xl">
      {/* Fixed header area */}
      <div className="w-full flex-shrink-0 px-20 pt-20">
        <div className="flex justify-center">
          <SentenceDetails />
        </div>
      </div>

      {/* Scrollable middle content area */}
      <div className="w-full flex-grow overflow-y-auto px-20">
        {/* Container that constrains character component width */}
        <div className="mx-auto w-[50rem] py-4">
          <SentenceReview key={currentId} mode={mode} />
        </div>
      </div>

      <MyModal
        modalIsOpen={historyModalIsOpen}
        closeModal={closeHistoryModal}
        relativeTimes={times}
        history={history}
      />

      <SettingsModal
        modalIsOpen={settingsModalIsOpen}
        closeModal={closeSettingsModal}
        currentMode={mode}
        setMode={setMode}
      />

      {/* Fixed footer area */}
      <div className="w-full flex-shrink-0 p-5 px-20">
        <Footer
          showModal={showHistoryModal}
          showSettingsModal={showSettingsModal}
          progressSentence={() => store.trigger.progressSentence()}
        />
      </div>
    </div>
  );
}


---
./src/components/chinese/Data.ts
---
import lessonData11 from "./data/1-1.json";
import lessonData12 from "./data/1-2.json";
import lessonData21 from "./data/2-1.json";
import lessonData22 from "./data/2-2.json";
import lessonData31 from "./data/3-1.json";
import lessonData32 from "./data/3-2.json";
import lessonData41 from "./data/4-1.json";
import lessonData42 from "./data/4-2.json";
import lessonData51 from "./data/5-1.json";
import lessonData52 from "./data/5-2.json";
import lessonData61 from "./data/6-1.json";
import lessonData62 from "./data/6-2.json";
import lessonData71 from "./data/7-1.json";
import lessonData72 from "./data/7-2.json";
import lessonData81 from "./data/8-1.json";
import lessonData82 from "./data/8-2.json";
import lessonData91 from "./data/9-1.json";

export interface Sentence {
  lesson: string;
  def: string;
  words: {
    character: string;
    pinyin: string;
  }[];
  id: string;
}

export enum CharState {
  green = 0, // correctly written without hints
  yellow = 1, // correctly written with hints
  red = 2, // incorrectly written even with hints
}

type LessonJsonData = {
  sentences: Array<{
    def: string;
    words: Array<{
      character: string;
      pinyin: string;
    }>;
  }>;
};

/**
 * Transforms JSON data from lesson files into the Sentence[] format
 * @param jsonData The raw JSON data from the lesson file
 * @param lessonId The lesson identifier (e.g., "ic lesson 1-1")
 * @returns {Sentence[]} Array of sentences in the required format
 */
function transformLessonData(
  jsonData: LessonJsonData,
  lessonId: string,
): Sentence[] {
  if (!jsonData || !jsonData.sentences || !Array.isArray(jsonData.sentences)) {
    return [];
  }

  return jsonData.sentences.map((sentence) => ({
    lesson: lessonId,
    def: sentence.def,
    words: sentence.words.map((word) => ({
      character: word.character,
      pinyin: word.pinyin,
    })),
    id: Math.random().toString(36).substring(2, 10) + Date.now().toString(36),
  }));
}

export function getSentences(): Sentence[] {
  const lessonData = lessonData11;
  return [
    ...transformLessonData(lessonData11, "ic lesson 1-1"),
    ...transformLessonData(lessonData12, "ic lesson 1-2"),
    ...transformLessonData(lessonData21, "ic lesson 2-1"),
    ...transformLessonData(lessonData22, "ic lesson 2-2"),
    ...transformLessonData(lessonData31, "ic lesson 3-1"),
    ...transformLessonData(lessonData32, "ic lesson 3-2"),
    ...transformLessonData(lessonData41, "ic lesson 4-1"),
    ...transformLessonData(lessonData42, "ic lesson 4-2"),
    ...transformLessonData(lessonData51, "ic lesson 5-1"),
    ...transformLessonData(lessonData52, "ic lesson 5-2"),
    ...transformLessonData(lessonData61, "ic lesson 6-1"),
    ...transformLessonData(lessonData62, "ic lesson 6-2"),
    ...transformLessonData(lessonData71, "ic lesson 7-1"),
    ...transformLessonData(lessonData72, "ic lesson 7-2"),
    ...transformLessonData(lessonData81, "ic lesson 8-1"),
    ...transformLessonData(lessonData82, "ic lesson 8-2"),
    ...transformLessonData(lessonData91, "ic lesson 9-1"),
  ];
}


---
./src/components/chinese/Review.tsx
---
import React, { useState, useRef, useEffect } from "react";
import HanziWriter from "hanzi-writer";
import { useSelector, useStore } from "@xstate/store/react";
import { store, type AppMode } from "./Store";
import { CharState } from "./Data";

const CHARACTER_SIZE_STYLE = "h-28 w-28";

function convertNumberTonesToMarks(pinyin: string): string {
  const pinyinLower = pinyin.toLowerCase();

  // Map of vowels and their tone variants
  const toneMap = {
    a: ["ā", "á", "ǎ", "à"],
    e: ["ē", "é", "ě", "è"],
    i: ["ī", "í", "ǐ", "ì"],
    o: ["ō", "ó", "ǒ", "ò"],
    u: ["ū", "ú", "ǔ", "ù"],
    ü: ["ǖ", "ǘ", "ǚ", "ǜ"],
    v: ["ǖ", "ǘ", "ǚ", "ǜ"], // v is often used as a substitute for ü
  };

  // No tone number found, return as is
  if (!/[1-4]$/.test(pinyinLower)) {
    return pinyinLower;
  }

  // Extract tone number and remove it from the string
  const toneNumber = parseInt(pinyinLower.slice(-1)) - 1;
  const pinyinWithoutTone = pinyinLower.slice(0, -1);

  // Replace 'v' with 'ü' first
  const normalizedPinyin = pinyinWithoutTone.replace(/v/g, "ü");

  // Priority order for tone marks
  const vowelPriority = ["a", "e", "o", "i", "u", "ü"];

  // Find the vowel to modify based on priority
  for (const vowel of vowelPriority) {
    if (normalizedPinyin.includes(vowel)) {
      // Replace the first occurrence of this vowel with its toned version
      return normalizedPinyin.replace(vowel, toneMap[vowel][toneNumber]);
    }
  }

  // No vowel found to modify, return as is
  return normalizedPinyin;
}
function normalizePinyin(input: string): string {
  // Remove spaces and make lowercase
  const trimmed = input.toLowerCase().trim();

  // Check if this is likely a number-tone pinyin
  if (/[a-z]+[1-4]$/.test(trimmed)) {
    return convertNumberTonesToMarks(trimmed);
  }

  return trimmed;
}

export function TrafficLights({
  checkMark,
  state,
}: {
  checkMark: boolean;
  state: CharState;
}) {
  const checkMarkElement = (
    <svg
      width="20"
      height="20"
      viewBox="0 0 16 16"
      xmlns="http://www.w3.org/2000/svg"
      fill="white"
    >
      <path
        fillRule="evenodd"
        d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.75.75 0 0 1 1.06-1.06L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0z"
      />
    </svg>
  );
  return (
    <div className="flex gap-2">
      <div
        className={`h-5 w-5 rounded-full bg-green-500 transition-all ${state === CharState.green ? "hover:opacity-70" : "opacity-30 hover:opacity-15"}`}
      >
        {checkMark && state === CharState.green && checkMarkElement}
      </div>
      <div
        className={`h-5 w-5 rounded-full bg-yellow-500 transition-all ${state === CharState.yellow ? "hover:opacity-70" : "opacity-30 hover:opacity-15"}`}
      >
        {checkMark && state === CharState.yellow && checkMarkElement}
      </div>
      <div
        className={`h-5 w-5 rounded-full bg-red-500 transition-all ${state === CharState.red ? "hover:opacity-70" : "opacity-30 hover:opacity-15"}`}
      >
        {checkMark && state === CharState.red && checkMarkElement}
      </div>
    </div>
  );
}

export function Review({
  character,
  pinyin,
  persistentId,
  mode,
}: {
  character: string;
  pinyin: string;
  persistentId: string;
  mode: AppMode;
}) {
  if (pinyin === "") {
    useEffect(() => {
      store.trigger.increaseCompletedCount();
    }, []); // Empty dependency array ensures this runs only once on mount

    return (
      // Single div with appropriate top padding to align with other characters
      <div className="mt-24 inline-flex flex-col items-center px-2">
        <span
          className="font-kaishu text-5xl text-gray-600"
          title="Punctuation"
        >
          {character}
        </span>
      </div>
    );
  }
  const data = {
    char: character,
    id: persistentId,
    mode: mode,
  };
  const local_store = useStore({
    context: {
      mistakes: 0,
      state: CharState.green,
      state2: CharState.green,
      isCompleted: false,
      mistakesToYellow: data.mode == "character" ? 5 : 2,
      mistakesToRed: data.mode == "character" ? 4 : 7,
      parentData: data,
    },
    emits: {
      showSolution: () => {},
      showPartialSolution: () => {},
    },
    on: {
      solved: (context, event: {}, enqueue) => {
        setTimeout(() => enqueue.emit.showSolution({}), 400);
        store.trigger.updateCharacter({
          character: context.parentData.char,
          newState: context.state,
          id: context.parentData.id,
          mode: context.parentData.mode,
        });
        return { ...context, isCompleted: true };
      },
      mistake: (context) => {
        const newMistakes = context.mistakes + 1;

        if (
          context.state === CharState.green &&
          newMistakes >= context.mistakesToYellow
        ) {
          return {
            ...context,
            mistakes: 0,
            state: CharState.yellow,
          };
        }

        if (
          context.state === CharState.yellow &&
          newMistakes >= context.mistakesToRed
        ) {
          return {
            ...context,
            mistakes: 0,
            state: CharState.red,
          };
        }

        return { ...context, mistakes: newMistakes };
      },
      button: (context, event: {}, enqueue) => {
        if (context.isCompleted) {
          return context;
        } else if (context.state2 === CharState.green) {
          enqueue.emit.showPartialSolution({});
          return {
            ...context,
            state:
              context.state === CharState.red
                ? CharState.red
                : CharState.yellow,
            state2: CharState.yellow,
            mistakes: context.state === CharState.yellow ? context.mistakes : 0,
          };
        } else if (context.state2 === CharState.yellow) {
          local_store.trigger.solved();
          store.trigger.updateCharacter({
            character: context.parentData.char,
            newState: CharState.red,
            id: context.parentData.id,
            mode: context.parentData.mode,
          });
          return {
            ...context,
            state: CharState.red,
            state2: CharState.red,
            isCompleted: true,
          };
        }
      },
    },
  });

  const state = useSelector(local_store, (state) => state.context.state);
  const isCompleted = useSelector(
    local_store,
    (state) => state.context.isCompleted,
  );
  const buttonName = useSelector(local_store, (state) => {
    if (state.context.isCompleted) {
      return mode == "character" ? "Replay" : "Completed";
    }
    return state.context.state2 === CharState.green
      ? mode == "character"
        ? "Show outline"
        : "Show letters"
      : "Show solution";
  });
  // CHARACTER STUFF
  const writerRef = useRef<HTMLDivElement>(null);
  const [writer, setWriter] = useState<HanziWriter | null>(null);
  useEffect(() => {
    const localWriter = HanziWriter.create(writerRef.current, character, {
      padding: 5,
      strokeColor: mode == "character" ? "#0851D0" : "#000000",
      drawingColor: mode == "character" ? "#0851D0" : "#000000",
      outlineColor: mode === "pinyin" ? "#000000" : "rgba(130, 169, 229, 0.5)",
      acceptBackwardsStrokes: true,
      showHintAfterMisses: false,
      showOutline: mode === "pinyin",
      strokeFadeDuration: 0,
    });
    setWriter(localWriter);
    if (mode == "character") {
      localWriter.quiz({
        onMistake: local_store.trigger.mistake,
        onComplete: () => local_store.trigger.solved(),
        leniency: 1.2,
      });

      const subscription = local_store.on("showSolution", ({}) => {
        localWriter.animateCharacter();
      });
      const subscription2 = local_store.on("showPartialSolution", ({}) => {
        localWriter.showOutline();
      });
      return () => {
        subscription.unsubscribe();
        subscription2.unsubscribe();
      };
    }
  }, []);
  // PINYIN STUFF
  const [input, setInput] = useState(mode == "character" ? pinyin : "");
  const [isErrorAnimating, setIsErrorAnimating] = useState(false);
  const submitted = () => {
    if (!input.trim()) return;

    const normalizedInput = normalizePinyin(input);
    const normalizedPinyin = normalizePinyin(pinyin);
    if (normalizedInput === normalizedPinyin) {
      local_store.trigger.solved();
    } else {
      local_store.trigger.mistake();
      setIsErrorAnimating(true);
      setTimeout(() => setIsErrorAnimating(false), 400);
    }
  };
  if (mode === "pinyin") {
    useEffect(() => {
      const subscription = local_store.on("showSolution", ({}) => {
        setInput(pinyin);
      });
      const subscription2 = local_store.on("showPartialSolution", ({}) => {
        const noTones = pinyin.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
        setInput(noTones);
      });
      return () => {
        subscription.unsubscribe();
        subscription2.unsubscribe();
      };
    }, []);
  }
  // MAIN UI
  return (
    <div className="mb-2 flex w-28 flex-col">
      {/* HEADER */}
      <div className="w-full">
        <button
          className={`font-lora text-base underline decoration-header2 hover:decoration-header ${mode === "pinyin" && isCompleted ? "text-gray-500" : ""}`}
          onClick={() => {
            if (isCompleted) {
              writer.animateCharacter();
            } else {
              local_store.trigger.button();
            }
          }}
          disabled={isCompleted && mode === "pinyin"}
        >
          {buttonName}
        </button>
        <TrafficLights state={state} checkMark={isCompleted} />
      </div>
      {/* CHARACTER UI */}
      <div
        className={`mt-2 ${CHARACTER_SIZE_STYLE} border border-header bg-white`}
        ref={writerRef}
      ></div>
      {/* PINYIN UI */}
      <div className="relative mx-auto w-28">
        <div className="flex">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            className={`w-full bg-transparent py-1 text-center font-lora ${mode === "pinyin" ? "text-header underline" : ""} outline-none ${isErrorAnimating ? "opacity-50 transition-all duration-300" : "transition-all duration-300"} ${isErrorAnimating ? "decoration-red-500" : "decoration-header2"}`}
            disabled={isCompleted || mode !== "pinyin"}
            placeholder="Pinyin"
            onKeyDown={(e) => {
              if (e.key !== "Enter") return;
              submitted();
            }}
          />
        </div>
      </div>
    </div>
  );
}


---
./src/components/chinese/Store.ts
---
import { createStore } from "@xstate/store";
import { getSentences, CharState, type Sentence } from "./Data";

// Single storage key for all Chinese app data
const CHINESE_APP_STORAGE_KEY = "chinese_app_data";

/**
 * Loads saved application state from localStorage
 * @returns {Object|null} Parsed stored data or null if none exists
 */
export const loadFromStorage = () => {
  try {
    const storedData = localStorage.getItem(CHINESE_APP_STORAGE_KEY);
    if (storedData) {
      return JSON.parse(storedData);
    }
  } catch (error) {
    console.error("Failed to load data from localStorage:", error);
  }
  return null;
};

/**
 * Saves application state to localStorage
 * @param {any} data - Current application state to persist
 */
export const saveToStorage = (data: any) => {
  try {
    localStorage.setItem(CHINESE_APP_STORAGE_KEY, JSON.stringify(data));
  } catch (error) {
    console.error("Failed to save data to localStorage:", error);
  }
};
export type AppMode = "pinyin" | "character";

type HistoryType = {
  character: Record<string, [CharState, string]>;
  pinyin: Record<string, [CharState, string]>;
};

// Get all available lesson names
export const getAllLessons = (): string[] => {
  const allSentences = getSentences();
  const uniqueLessons = new Set<string>();

  allSentences.forEach((sentence) => {
    uniqueLessons.add(sentence.lesson);
  });

  return Array.from(uniqueLessons).sort();
};

// Load stored data and initialize context
const storedData = loadFromStorage();
const allLessons = getAllLessons();

const initialContext = {
  history: (storedData?.history || {
    character: {},
    pinyin: {},
  }) as HistoryType,
  sentences:
    storedData?.sentences ||
    ([...getSentences()].sort(() => 0.5 - Math.random()) as Sentence[]),
  sessions: (storedData?.sessions || {}) as Record<string, string>,
  completedCount: 0, // Always starts at 0 and is not persisted
  enabledLessons: storedData?.enabledLessons || allLessons, // Default to all lessons enabled
};

export const store = createStore({
  context: initialContext,
  on: {
    updateCharacter: (
      context,
      event: {
        character: string;
        newState: CharState;
        id: string;
        mode: AppMode;
      },
      enqueue,
    ) => {
      const lastState = context.history[event.character];
      const noChange = lastState && lastState[0] === event.newState;

      return {
        ...context,
        completedCount: context.completedCount + 1,
        history: noChange
          ? context.history
          : ({
              ...context.history,
              [event.mode]: {
                ...context.history[event.mode],
                [event.character]: [event.newState, event.id],
              },
            } as HistoryType),
      };
    },
    resetCompletedCount: (context, _, enqueue) => {
      const newContext = {
        ...context,
        completedCount: 0,
      };
      return newContext;
    },
    updateSession: (context, event: { key: string; date: Date }) => {
      return {
        ...context,
        sessions: {
          ...context.sessions,
          [event.key]: event.date.toISOString(),
        },
      };
    },
    progressSentence: (context) => {
      const enabledLessons = context.enabledLessons;
      let sentences = context.sentences.slice(1);
      if (sentences.length === 0) {
        sentences = [...getSentences()].sort(() => Math.random() - 0.5);
      }
      while (
        enabledLessons.length > 0 &&
        sentences.length > 0 &&
        !enabledLessons.includes(sentences[0].lesson)
      ) {
        console.log(sentences.length);
        sentences = sentences.slice(1);
        if (sentences.length === 0) {
          sentences = [...getSentences()].sort(() => Math.random() - 0.5);
        }
      }
      return {
        ...context,
        completedCount: 0,
        sentences: sentences,
      };
    },
    updateEnabledLessons: (context, event: { enabledLessons: string[] }) => {
      return {
        ...context,
        enabledLessons: event.enabledLessons,
      };
    },
    increaseCompletedCount: (context) => {
      return {
        ...context,
        completedCount: context.completedCount + 1,
      };
    },
  },
});

store.subscribe((snapshot) => saveToStorage(snapshot.context));


---
./src/components/chinese/data/*.json
---
[OMITTED]
---
./src/components/vairc/App.tsx
---
// aadishv.github.io/src/components/vairc/App.tsx
import React from "react";
import { Layout } from "./Layout";
import { ColorFeed, DepthFeed, BackCamera } from "./components/Feeds";
import { JsonRenderer } from "./components/InfoPanels";
import DetailsPanel from "./components/DetailsPanel";
import FieldView from "./components/FieldView";
import 'react-mosaic-component/react-mosaic-component.css';
import './app.css';

// Create the map of window IDs to components
const windowComponents = {
  1: ColorFeed,
  2: DepthFeed,
  3: JsonRenderer,
  4: BackCamera,
  5: DetailsPanel,
  6: FieldView,
};

// Create the map of window IDs to titles
const windowTitles = {
  1: "Color Feed",
  2: "Depth Feed",
  3: "Raw Data",
  4: "Back Camera",
  5: "Details",
  6: "Field View"
};

// Main App Component
export default function VAIRCApp() {
  return (
    <Layout windowComponents={windowComponents} windowTitles={windowTitles} />
  );
}

---
./src/components/vairc/CHANGELOG.md
---
# VAIRC Component Changelog

## Security and Stability Improvements

### JSON Validation and Error Handling

- Enhanced the SSE event handler to properly validate JSON structure before processing
- Added type checking for all detection objects to prevent runtime errors
- Added specific validation for pose data to ensure it contains required numeric properties
- Improved error logging to help with debugging
- Truncated large error messages to prevent console flooding
- Added graceful degradation when receiving invalid data

### Component-Level Validation

- Created validation utility functions to centralize and standardize validation logic
- DetailsPanel: Added checks for valid detection objects before accessing properties
- DetectionCanvas: Added validation to skip invalid detection objects when rendering
- FieldView: Added type checking for field coordinates and robot pose data
- Layout: Changed default state to have an empty array for detections to prevent null reference errors

### Validation Utilities

- Added `safeGetStuff()` utility function to safely extract detection arrays without causing errors
- Added `isValidDetectionPayload()` for checking overall payload structure
- Added `isValidDetection()` for validating individual detection objects
- Added `ensureValidPayload()` to provide a default payload structure when needed

These changes make the VAIRC interface more resilient against:
- Malformed JSON data from the server
- Missing or corrupt detection properties
- Incomplete pose or object data
- Network interruptions during data transmission
- Undefined or null property access errors

The application will now gracefully handle these issues with appropriate warnings rather than crashing or showing incorrect visuals.

---
./src/components/vairc/Layout.tsx
---
// aadishv.github.io/src/components/vairc/Layout.tsx
import React, { useState, useEffect, useCallback } from 'react';
import {
  Mosaic,
  MosaicWindow,
  MosaicZeroState,
  createBalancedTreeFromLeaves,
  type MosaicNode,
  type MosaicBranch
} from 'react-mosaic-component';

import { Button } from '../../components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '../../components/ui/dialog';
import { Switch } from '../../components/ui/switch';
import { Input } from '../../components/ui/input';
import { AlertCircle, Settings, RotateCw } from 'lucide-react';

import 'react-mosaic-component/react-mosaic-component.css';
import './app.css';

// Default server configuration
export const DEFAULT_SERVER = "192.168.86.98:5000";

// Interfaces
type WindowComponentMap = Record<number, React.ComponentType<any>>;
type WindowTitleMap = Record<number, string>;

export interface Detection {
  x: number;
  y: number;
  width: number;
  height: number;
  class: string;
  confidence: number;
  depth?: number;
  fx?: number;
  fy?: number;
  fz?: number;
}

export interface Pose {
  x: number;
  y: number;
  theta: number;
}

export interface JetsonStats {
  cpu_temp: number;
  gpu_temp: number;
  uptime: number;
}

export interface DetectionPayload {
  stuff: Detection[];
  pose?: Pose;
  flag?: string;
  jetson?: JetsonStats;
}

interface WindowProps {
  path: MosaicBranch[];
  component: React.ComponentType<any>;
  title: string;
  latestDetections: DetectionPayload | null;
  serverConfig: string;
}

interface LayoutProps {
  windowComponents: WindowComponentMap;
  windowTitles?: WindowTitleMap;
}

// SSE Hook for detection data
export function useSSEDetections(
    server: string,
    endpoint: string = "events",
    initialValue: DetectionPayload | null = null
): { detections: DetectionPayload | null, connectionError: boolean } {
    const [detections, setDetections] = useState<DetectionPayload | null>(initialValue);
    const [connectionError, setConnectionError] = useState<boolean>(false);

    useEffect(() => {
        // Skip connection if server is not provided
        if (!server) {
            console.warn('Server address is not provided. Skipping connection.');
            setDetections(initialValue);
            return;
        }

        // Always use HTTP protocol since the Flask server is HTTP-only
        // This will work in HTTP contexts, and we'll handle the error in HTTPS contexts
        const url = `http://${server}/${endpoint}`;
        console.log(`Attempting to connect to SSE endpoint: ${url}`);

        let eventSource: EventSource;

        try {
            eventSource = new EventSource(url);
        } catch (error) {
            console.error('Failed to create EventSource:', error);
            setConnectionError(true);
            setDetections(initialValue);
            return;
        }

        // Handle incoming messages
        eventSource.onmessage = (event: MessageEvent) => {
            try {
                // Parse the JSON data
                const parsedData = JSON.parse(event.data);

                // Validate that the parsed data has the expected structure
                if (!parsedData || typeof parsedData !== 'object') {
                    console.error('Invalid SSE data format: Not an object', event.data);
                    return;
                }

                // Validate that 'stuff' array exists
                if (!Array.isArray(parsedData.stuff)) {
                    console.error('Invalid SSE data: Missing or invalid "stuff" array', event.data);
                    // Continue processing anyway as some features might still work without detections
                }

                // If pose is present, ensure it has the right structure
                if (parsedData.pose && (
                    typeof parsedData.pose !== 'object' ||
                    typeof parsedData.pose.x !== 'number' ||
                    typeof parsedData.pose.y !== 'number' ||
                    typeof parsedData.pose.theta !== 'number'
                )) {
                    console.warn('Invalid pose data in SSE message', parsedData.pose);
                    // Don't return, still process the rest of the data
                }

                // Cast to our type and set state
                const data: DetectionPayload = parsedData;
                setDetections(data);
                setConnectionError(false); // Reset connection error state on successful data
            } catch (error) {
                console.error('Failed to parse SSE data:', error);
                // Log the first 200 chars of the data to avoid flooding the console
                const truncatedData = typeof event.data === 'string'
                    ? (event.data.length > 200 ? event.data.substring(0, 200) + '...' : event.data)
                    : 'non-string data';
                console.debug('Raw data sample:', truncatedData);
            }
        };

        // Handle connection errors
        eventSource.onerror = (error) => {
            console.error('SSE connection error', error);
            setConnectionError(true);
            setDetections(initialValue);
            eventSource.close();
        };

        // Cleanup function
        return () => {
            console.log(`Closing SSE connection to: ${url}`);
            eventSource.close();
        };
    }, [server, endpoint, initialValue]);

    return { detections, connectionError };
}

// Window Component
const Window = ({ path, component: WindowComponent, title, latestDetections, serverConfig }: WindowProps) => {
  return (
    <MosaicWindow<number>
      path={path}
      title={title}
      additionalControls={[]}
    >
      <WindowComponent latestDetections={latestDetections} serverConfig={serverConfig} />
    </MosaicWindow>
  );
};

// Header Component
const Header: React.FC<{
  onToggleSettings: () => void,
  connectionError: boolean,
  serverConfig: string
}> = ({ onToggleSettings, connectionError, serverConfig }) => {
  // Function to reload the page
  const handleReload = () => {
    window.location.reload();
  };

  return (
    <header className="border-b">
      <div className="flex items-center justify-between py-4 px-5 w-[100vw]">
        <div className="flex items-center h-16 ml-0">
          <img
            src="/vairc/paradigm.jpg"
            alt="Paradigm Logo"
            className="h-full border-r pr-4 mr-4"
            style={{mixBlendMode: 'multiply'}}
          />
          <img
            src="https://recf.org/wp-content/uploads/2024/10/VEX-AI-Robotics-Competition-Element-Sidebar.png"
            alt="VAIRC Logo"
            className="h-full"
          />
        </div>

        {/* Connection error warning */}
        {connectionError && (
          <div className="flex-1 mx-4">
            <div className="border rounded-md bg-destructive/10 p-3 text-destructive flex items-center justify-between text-sm">
              <div className="flex items-center gap-2">
                <AlertCircle className="h-4 w-4" />
                <span>
                  Connection error: Cannot connect to server at <code className="bg-destructive/20 p-0.5 rounded text-xs font-mono">{serverConfig}</code>
                </span>
              </div>
              <Button
                variant="outline"
                size="sm"
                onClick={handleReload}
              >
                <RotateCw className="h-3.5 w-3.5 mr-1" />
                Reload
              </Button>
            </div>
          </div>
        )}

        <Button
          variant="outline"
          onClick={onToggleSettings}
          className="gap-2"
        >
          <Settings className="h-4 w-4" />
          Settings
        </Button>
      </div>
    </header>
  );
};

// Settings Modal
interface SettingsModalProps {
  isOpen: boolean;
  windowVisibility: Record<number, boolean>;
  windowTitles?: WindowTitleMap;
  serverConfig: string;
  onClose: () => void;
  onToggle: (windowId: number) => void;
  onServerConfigChange: (config: string) => void;
}

const SettingsModal: React.FC<SettingsModalProps> = ({
  isOpen,
  windowVisibility,
  windowTitles = {},
  serverConfig,
  onClose,
  onToggle,
  onServerConfigChange
}) => {
  if (!isOpen) return null;

  const windowCount = Object.keys(windowVisibility).length;
  const [tempServerConfig, setTempServerConfig] = useState(serverConfig);

  // Handle server config input change
  const handleServerInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setTempServerConfig(e.target.value);
  };

  // Apply server config when user clicks "Apply"
  const handleApplyServerConfig = () => {
    onServerConfigChange(tempServerConfig);
  };

  // Reset to current value
  const handleResetServerConfig = () => {
    setTempServerConfig(serverConfig);
  };

  // Initialize tempServerConfig when the modal opens or serverConfig changes
  useEffect(() => {
    setTempServerConfig(serverConfig);
  }, [serverConfig, isOpen]);

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Settings</DialogTitle>
          <DialogDescription>
            Configure your VAIRC dashboard settings
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* Server Configuration Section */}
          <div>
            <h3 className="text-lg font-medium mb-3">Server Configuration</h3>
            <div className="space-y-2">
              <label htmlFor="server-config" className="text-sm">
                Server Host:Port
              </label>
              <div className="flex gap-2">
                <Input
                  id="server-config"
                  value={tempServerConfig}
                  onChange={handleServerInputChange}
                  placeholder="host:port"
                  className="flex-1"
                />
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleApplyServerConfig}
                >
                  Apply
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleResetServerConfig}
                >
                  Reset
                </Button>
              </div>
              <p className="text-sm text-muted-foreground">
                Example: 192.168.86.98:5000
              </p>
            </div>
          </div>

          {/* Window Visibility Section */}
          <div>
            <h3 className="text-lg font-medium mb-3">Toggle Window Visibility</h3>
            <div className="space-y-4">
              {Array.from({ length: windowCount }).map((_, index) => {
                const windowId = index + 1;
                const title = windowTitles[windowId] ?? `Window ${windowId}`;
                const shouldRender = windowTitles[windowId] !== undefined;

                return shouldRender ? (
                  <div key={windowId} className="flex items-center justify-between">
                    <label
                      htmlFor={`window-${windowId}`}
                      className="text-sm cursor-pointer"
                    >
                      {title}
                    </label>
                    <Switch
                      id={`window-${windowId}`}
                      checked={windowVisibility[windowId] || false}
                      onCheckedChange={() => onToggle(windowId)}
                    />
                  </div>
                ) : null;
              })}
            </div>
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

// Constants for localStorage keys
const LAYOUT_STORAGE_KEY = 'vairc-mosaic-layout';
const VISIBILITY_STORAGE_KEY = 'vairc-window-visibility';
const SERVER_CONFIG_KEY = 'vairc-server-config';

// Main Layout Component
export const Layout: React.FC<LayoutProps> = ({
  windowComponents,
  windowTitles = {},
}) => {
  const [currentNode, setCurrentNode] = useState<MosaicNode<number> | null>(null);
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [serverConfig, setServerConfig] = useState<string>(() => {
    // Try to load server config from localStorage
    const savedConfig = localStorage.getItem(SERVER_CONFIG_KEY);
    return savedConfig || DEFAULT_SERVER;
  });

  const { detections: latestDetections, connectionError } = useSSEDetections(
    serverConfig,
    "events",
    { stuff: [] } // Provide a default with empty stuff array
  );

  const [windowVisibility, setWindowVisibility] = useState<Record<number, boolean>>(() => {
    // Try to load visibility state from localStorage
    try {
      const savedVisibility = localStorage.getItem(VISIBILITY_STORAGE_KEY);
      if (savedVisibility) {
        const parsed = JSON.parse(savedVisibility);
        // Validate the parsed data
        if (parsed && typeof parsed === 'object') {
          return parsed;
        }
      }
    } catch (error) {
      console.warn('Failed to load window visibility from localStorage:', error);
    }

    // Fall back to default initialization if no saved state or error
    const initialVisibility: Record<number, boolean> = {};
    const componentKeys = Object.keys(windowComponents).map(Number).sort((a, b) => a - b);

    // Initialize all windows to hidden
    for (let i = 1; i <= componentKeys.length; i++) {
        initialVisibility[i] = false;
    }

    // Show the first window by default
    let visibleCount = 0;
    for (const id of componentKeys) {
      if (visibleCount < 1) {
         initialVisibility[id] = true;
         visibleCount++;
      }
    }
    return initialVisibility;
  });

  // Try to restore layout from localStorage on component mount
  useEffect(() => {
    try {
      const savedLayout = localStorage.getItem(LAYOUT_STORAGE_KEY);
      if (savedLayout) {
        const layout = JSON.parse(savedLayout);
        if (layout) {
          setCurrentNode(layout);
          console.log('Restored layout from localStorage');
        }
      }
    } catch (error) {
      console.warn('Failed to load layout from localStorage:', error);
    }
  }, []);

  // Update the mosaic layout when window visibility changes
  const updateNodeStructure = useCallback(() => {
    const visibleWindows = Object.entries(windowVisibility)
      .filter(([, isVisible]) => isVisible)
      .map(([idStr]) => parseInt(idStr))
      .filter(id => windowComponents[id]);

    const newNode = visibleWindows.length === 0 ? null : createBalancedTreeFromLeaves(visibleWindows);
    setCurrentNode(newNode);

    // Save visibility state to localStorage
    try {
      localStorage.setItem(VISIBILITY_STORAGE_KEY, JSON.stringify(windowVisibility));
    } catch (error) {
      console.warn('Failed to save window visibility to localStorage:', error);
    }
  }, [windowVisibility, windowComponents]);

  // Toggle window visibility
  const toggleWindowVisibility = useCallback((windowId: number) => {
    if (windowComponents[windowId]) {
      setWindowVisibility(prevState => {
        const newState = {
          ...prevState,
          [windowId]: !prevState[windowId]
        };

        // Save to localStorage immediately
        try {
          localStorage.setItem(VISIBILITY_STORAGE_KEY, JSON.stringify(newState));
        } catch (error) {
          console.warn('Failed to save window visibility to localStorage:', error);
        }

        return newState;
      });
    }
  }, [windowComponents]);

  // Toggle settings modal
  const toggleSettings = useCallback(() => {
    setIsSettingsOpen(open => !open);
  }, []);

  // Update server configuration
  const handleServerConfigChange = useCallback((newConfig: string) => {
    setServerConfig(newConfig);

    // Save server config to localStorage
    try {
      localStorage.setItem(SERVER_CONFIG_KEY, newConfig);
    } catch (error) {
      console.warn('Failed to save server config to localStorage:', error);
    }

    console.log(`Server configuration updated to: ${newConfig}`);
  }, []);

  // Create a new window from the zero state
  const createNewWindow = useCallback(() => {
    const availableComponentIds = Object.keys(windowComponents).map(Number);
    for (const id of availableComponentIds.sort((a, b) => a - b)) {
      if (!windowVisibility[id]) {
        toggleWindowVisibility(id);
        return id;
      }
    }
    return null;
  }, [windowVisibility, toggleWindowVisibility, windowComponents]);

  // Save layout to localStorage when it changes
  const handleLayoutChange = useCallback((newNode: MosaicNode<number> | null) => {
    setCurrentNode(newNode);

    // Save to localStorage
    try {
      if (newNode) {
        localStorage.setItem(LAYOUT_STORAGE_KEY, JSON.stringify(newNode));
      } else {
        // If layout is null, remove from localStorage
        localStorage.removeItem(LAYOUT_STORAGE_KEY);
      }
    } catch (error) {
      console.warn('Failed to save layout to localStorage:', error);
    }
  }, []);

  // Update node structure when visibility changes
  useEffect(() => {
    updateNodeStructure();
  }, [windowVisibility, updateNodeStructure]);

  return (
    <div className="vairc-layout">
      <Header
        onToggleSettings={toggleSettings}
        connectionError={connectionError}
        serverConfig={serverConfig}
      />

      <SettingsModal
        isOpen={isSettingsOpen}
        windowVisibility={windowVisibility}
        windowTitles={windowTitles}
        serverConfig={serverConfig}
        onClose={toggleSettings}
        onToggle={toggleWindowVisibility}
        onServerConfigChange={handleServerConfigChange}
      />

      <div className="vairc-mosaic-container">
        <Mosaic<number>
          renderTile={(id, path) => {
            const WindowComponent = windowComponents[id];
            const title = windowTitles[id] ?? `Window ${id}`;
            return WindowComponent ? (
              <Window
                path={path}
                component={WindowComponent}
                title={title}
                latestDetections={latestDetections}
                serverConfig={serverConfig}
              />
            ) : (
              <MosaicWindow path={path} title={`Unknown Window ${id}`}>
                <div>Component not found for ID {id}</div>
              </MosaicWindow>
            );
          }}
          zeroStateView={<MosaicZeroState createNode={createNewWindow} />}
          value={currentNode}
          onChange={handleLayoutChange}
        />
      </div>
    </div>
  );
};


---
./src/components/vairc/app.css
---
/* aadishv.github.io/src/components/vairc/app.css */
html,
body,
#app {
  height: 100%;
  width: 100%;
  margin: 0;
}

/* Main layout container */
.vairc-layout {
  margin: 0;
  height: 100%;
  width: 100%;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

/* Mosaic container */
.vairc-mosaic-container {
  flex: 1;
  position: relative;
}

/* Override mosaic styles for a cleaner look */
.mosaic {
  background-color: #f6f8fa !important;
}

.mosaic-window {
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
  border-radius: 6px;
  overflow: hidden;
}

.mosaic-window-title {
  background-color: #f6f8fa;
  height: 30px;
  display: flex;
  align-items: center;
  padding: 0 10px;
  border-bottom: 1px solid #d0d7de;
}

.mosaic-window-body {
  display: flex;
  flex-direction: column;
  background-color: white;
}

.mosaic-window-toolbar {
  display: flex;
}

.mosaic-window-controls {
  margin-left: auto;
}

/* Custom styles for the videos */
.mosaic-window-body .aspect-video {
  width: 100%;
  height: 100%;
}

/* Spinner for loading states */
.vairc-loading {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
}

/* V5 Details Panel Styles */
.v5-details-card {
  background: white;
  border-radius: 8px;
  padding: 16px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  margin-bottom: 16px;
  transition: transform 0.2s ease;
}

.v5-details-card:hover {
  transform: translateY(-2px);
}

.v5-details-heading {
  font-size: 2rem;
  font-weight: bold;
  margin-bottom: 1rem;
  color: #1a202c;
}

.v5-details-value {
  font-size: 1.75rem;
  font-weight: 600;
  color: #2d3748;
  display: block;
  margin: 0.5rem 0;
}

.v5-details-label {
  font-size: 1.25rem;
  font-weight: 500;
  color: #718096;
}

/* Animated value transitions */
@keyframes pulse-highlight {
  0%, 100% { background-color: transparent; }
  50% { background-color: rgba(66, 153, 225, 0.1); }
}

.v5-value-changed {
  animation: pulse-highlight 1s ease;
  border-radius: 4px;
}

.vairc-loading::after {
  content: "";
  width: 30px;
  height: 30px;
  border: 2px solid #d0d7de;
  border-radius: 50%;
  border-top-color: #0969da;
  animation: spinner 0.6s linear infinite;
}

@keyframes spinner {
  to {
    transform: rotate(360deg);
  }
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  .vairc-header {
    flex-direction: column;
    height: auto;
    align-items: stretch;
  }

  .vairc-header > div:not(:last-child) {
    margin-bottom: 8px;
  }
}

---
./src/components/vairc/context/DetectionContext.tsx
---
// aadishv.github.io/src/components/vairc/context/DetectionContext.tsx
import React, { createContext, useState, useContext } from 'react';
import type { Detection } from '../Layout';

// Define source types for highlighted detections
export type HighlightSource = 'details-panel' | 'field-view' | 'other' | null;

interface DetectionContextType {
  // The currently highlighted detection, if any
  highlightedDetection: Detection | null;
  // The source component that set the highlighted detection
  highlightSource: HighlightSource;
  // Function to set the highlighted detection with source information
  setHighlightedDetection: (detection: Detection | null, source?: HighlightSource) => void;
}

// Create the context with default values
const DetectionContext = createContext<DetectionContextType>({
  highlightedDetection: null,
  highlightSource: null,
  setHighlightedDetection: () => {}
});

// Provider component that will wrap the app
export const DetectionProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {
  const [highlightedDetection, setHighlightedDetection] = useState<Detection | null>(null);
  const [highlightSource, setHighlightSource] = useState<HighlightSource>(null);

  // Enhanced setter function that tracks the source
  const setHighlightWithSource = (detection: Detection | null, source: HighlightSource = 'other') => {
    setHighlightedDetection(detection);
    setHighlightSource(detection ? source : null);
  };

  return (
    <DetectionContext.Provider value={{
      highlightedDetection,
      highlightSource,
      setHighlightedDetection: setHighlightWithSource
    }}>
      {children}
    </DetectionContext.Provider>
  );
};

// Custom hook for using the detection context
export const useDetectionContext = () => useContext(DetectionContext);

---
./src/components/vairc/utils/colors.ts
---
// aadishv.github.io/src/components/vairc/utils/colors.ts
// Utility function to get color for detection classes
export const getDetectionColor = (className: string): string => {
  switch (className?.toLowerCase()) {
    case 'blue':
      return '#0000FF'; // Blue
    case 'goal':
      return '#FFD700'; // Gold
    case 'red':
      return '#FF0000'; // Red
    case 'bot':
      return '#000000'; // Black
    default:
      return '#FF00FF'; // Default Magenta for unknown
  }
};

---
./src/components/vairc/utils/validation.ts
---
// aadishv.github.io/src/components/vairc/utils/validation.ts
import type { DetectionPayload, Detection } from "../Layout";

/**
 * Validates a detection payload and ensures it has the expected structure
 * @param payload The detection payload to validate
 * @returns True if the payload is valid, false otherwise
 */
export function isValidDetectionPayload(payload: DetectionPayload | null): boolean {
  if (!payload || typeof payload !== 'object') {
    return false;
  }

  // Check if stuff exists and is an array
  if (!Array.isArray(payload.stuff)) {
    return false;
  }

  return true;
}

/**
 * Validates an individual detection object
 * @param detection The detection to validate
 * @returns True if the detection is valid, false otherwise
 */
export function isValidDetection(detection: Detection | null): boolean {
  if (!detection || typeof detection !== 'object') {
    return false;
  }

  // Check for required properties
  if (typeof detection.x !== 'number' ||
      typeof detection.y !== 'number' ||
      typeof detection.width !== 'number' ||
      typeof detection.height !== 'number' ||
      typeof detection.class !== 'string' ||
      typeof detection.confidence !== 'number') {
    return false;
  }

  return true;
}

/**
 * Ensures a detection payload has a valid structure, or returns a default empty payload
 * @param payload The detection payload to validate
 * @returns The original payload if valid, or a default empty payload
 */
export function ensureValidPayload(payload: DetectionPayload | null): DetectionPayload {
  if (isValidDetectionPayload(payload)) {
    return payload as DetectionPayload;
  }

  // Return a default payload
  return { stuff: [] };
}

/**
 * Safely get the stuff array from a detection payload
 * @param payload The detection payload
 * @returns The stuff array if it exists and is valid, or an empty array
 */
export function safeGetStuff(payload: DetectionPayload | null): Detection[] {
  if (isValidDetectionPayload(payload)) {
    return payload.stuff;
  }
  return [];
}

---
./src/components/vairc/components/DetailsPanel.tsx
---
// aadishv.github.io/src/components/vairc/components/DetailsPanel.tsx
import React from "react";
import { type DetectionPayload } from "../Layout";
import { getDetectionColor } from "../utils/colors";
import { safeGetStuff } from "../utils/validation";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "../../../components/ui/accordion";
import { Card, CardContent } from "../../../components/ui/card";

// Details Panel
const DetailsPanel: React.FC<{latestDetections: DetectionPayload | null, serverConfig: string}> = ({
  latestDetections
}) => {
  // Extract flag information from detections with safe validation
  const stuff = safeGetStuff(latestDetections);

  // Extract flag information from detections
  const flags = stuff.filter(d =>
    d && typeof d === 'object' && d.class && (
      d.class.toLowerCase().includes('flag') ||
      d.class.toLowerCase() === 'red' ||
      d.class.toLowerCase() === 'blue'
    )
  );

  // Extract pose information (assuming bot detections might have pose data)
  const botDetections = stuff.filter(d =>
    d && typeof d === 'object' && d.class && (
      d.class.toLowerCase() === 'bot' ||
      d.class.toLowerCase().includes('pose')
    )
  );

  return (
    <div className="flex flex-col p-6 h-full overflow-auto bg-gray-50">
      {/* Objects Information Section */}
      <Accordion type="single" collapsible defaultValue="objects" className="mb-6">
        <AccordionItem value="objects">
          <AccordionTrigger className="text-xl font-semibold text-gray-800">
            Objects detected
          </AccordionTrigger>
          <AccordionContent>
            {flags.length > 0 ? (
              <div className="flex flex-col gap-3 mt-4">
                {flags.map((flag, index) => (
                  <Card
                    key={index}
                    className="border border-gray-200 overflow-hidden"
                    style={{
                      borderLeftWidth: '4px',
                      borderLeftColor: getDetectionColor(flag.class)
                    }}
                  >
                    <CardContent className="p-3">
                      <div className="flex justify-between items-center">
                        <div className="flex items-center">
                          <span className="text-2xl font-semibold capitalize" style={{ color: getDetectionColor(flag.class) }}>
                            {flag.class}
                          </span>
                        </div>
                        {flag.depth !== undefined && (
                          <div className="text-right">
                            <div className="text-xs font-medium text-gray-500">Distance</div>
                            <div className="text-xl font-mono">{flag.depth.toFixed(2)}m</div>
                          </div>
                        )}
                      </div>
                      <div className="mt-3 grid grid-cols-2 gap-3">
                        <div>
                          <div className="text-xs font-medium text-gray-500">Camera Position</div>
                          <div className="text-xl font-mono">
                            X: {flag.x.toFixed(0)} <br/>
                            Y: {flag.y.toFixed(0)}
                          </div>
                        </div>
                        <div>
                          <div className="text-xs font-medium text-gray-500">Confidence</div>
                          <div className="text-xl font-mono">
                            {(flag.confidence * 100).toFixed(1)}%
                          </div>
                        </div>

                        {/* Field Position Section - Only show if fx/fy values are available */}
                        {(flag.fx !== undefined || flag.fy !== undefined || flag.fz !== undefined) && (
                          <div className="col-span-2 mt-2 border border-gray-200 p-2 rounded-md">
                            <div className="text-xs font-medium text-gray-500 mb-1">Field Position</div>
                            <div className="grid grid-cols-3 gap-2">
                              {flag.fx !== undefined && (
                                <div>
                                  <div className="text-xs text-gray-500">X-field</div>
                                  <div className="text-lg font-mono">{flag.fx.toFixed(2)}</div>
                                </div>
                              )}
                              {flag.fy !== undefined && (
                                <div>
                                  <div className="text-xs text-gray-500">Y-field</div>
                                  <div className="text-lg font-mono">{flag.fy.toFixed(2)}</div>
                                </div>
                              )}
                              {flag.fz !== undefined && (
                                <div>
                                  <div className="text-xs text-gray-500">Z-field</div>
                                  <div className="text-lg font-mono">{flag.fz.toFixed(2)}</div>
                                </div>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : (
              <div className="text-lg text-gray-500 italic p-3 bg-white rounded-md border border-gray-200 mt-4">
                No objects detected
              </div>
            )}
          </AccordionContent>
        </AccordionItem>
      </Accordion>

      {/* Pose Information Section */}
      <Accordion type="single" collapsible defaultValue="pose">
        <AccordionItem value="pose">
          <AccordionTrigger className="text-xl font-semibold text-gray-800">
            Robot Pose
          </AccordionTrigger>
          <AccordionContent>
            {/* Display pose data directly from the payload */}
            {latestDetections?.pose ? (
              <Card className="border border-gray-200 mt-4 overflow-hidden border-l-4 border-l-blue-600">
                <CardContent className="p-3">
                  <div className="text-2xl font-semibold mb-2 text-gray-800">
                    Robot Position
                  </div>
                  <div className="grid grid-cols-3 gap-3">
                    {/* X coordinate */}
                    <div className="border border-gray-200 p-2 rounded-md">
                      <div className="text-xs font-medium text-gray-500 mb-1">X Position</div>
                      <div className="text-xl font-mono">{latestDetections.pose.x.toFixed(2)}</div>
                    </div>

                    {/* Y coordinate */}
                    <div className="border border-gray-200 p-2 rounded-md">
                      <div className="text-xs font-medium text-gray-500 mb-1">Y Position</div>
                      <div className="text-xl font-mono">{latestDetections.pose.y.toFixed(2)}</div>
                    </div>

                    {/* Theta (orientation) */}
                    <div className="border border-gray-200 p-2 rounded-md">
                      <div className="text-xs font-medium text-gray-500 mb-1">Heading (θ)</div>
                      <div className="text-xl font-mono">{latestDetections.pose.theta.toFixed(1)}°</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ) : (
              // Fallback to bot detections if no pose data is available
              botDetections.length > 0 ? (
                <div className="flex flex-col gap-3 mt-4">
                  {botDetections.map((bot, index) => (
                    <Card
                      key={index}
                      className="border border-gray-200 overflow-hidden border-l-4 border-l-gray-600"
                    >
                      <CardContent className="p-3">
                        <div className="flex justify-between items-center mb-2">
                          <div className="flex items-center">
                            <span className="text-2xl font-semibold capitalize text-gray-800">
                              {bot.class}
                            </span>
                          </div>
                        </div>
                        <div className="grid grid-cols-2 gap-3">
                          <div className="border border-gray-200 p-2 rounded-md">
                            <div className="text-xs font-medium text-gray-500 mb-1">Camera Position</div>
                            <div className="grid grid-cols-2 gap-2">
                              <div>
                                <div className="text-xs text-gray-500">X-coord</div>
                                <div className="text-xl font-mono">{bot.x.toFixed(1)}</div>
                              </div>
                              <div>
                                <div className="text-xs text-gray-500">Y-coord</div>
                                <div className="text-xl font-mono">{bot.y.toFixed(1)}</div>
                              </div>
                            </div>
                          </div>
                          {bot.depth !== undefined && (
                            <div className="border border-gray-200 p-2 rounded-md">
                              <div className="text-xs font-medium text-gray-500 mb-1">Distance</div>
                              <div className="text-xl font-mono">{bot.depth.toFixed(2)} m</div>
                            </div>
                          )}

                          {/* Field Position Section for bots - Only show if fx/fy values are available */}
                          {(bot.fx !== undefined || bot.fy !== undefined || bot.fz !== undefined) && (
                            <div className="col-span-2 mt-2 border border-gray-200 p-2 rounded-md">
                              <div className="text-xs font-medium text-gray-500 mb-1">Field Position</div>
                              <div className="grid grid-cols-3 gap-2">
                                {bot.fx !== undefined && (
                                  <div>
                                    <div className="text-xs text-gray-500">X-field</div>
                                    <div className="text-lg font-mono">{bot.fx.toFixed(2)}</div>
                                  </div>
                                )}
                                {bot.fy !== undefined && (
                                  <div>
                                    <div className="text-xs text-gray-500">Y-field</div>
                                    <div className="text-lg font-mono">{bot.fy.toFixed(2)}</div>
                                  </div>
                                )}
                                {bot.fz !== undefined && (
                                  <div>
                                    <div className="text-xs text-gray-500">Z-field</div>
                                    <div className="text-lg font-mono">{bot.fz.toFixed(2)}</div>
                                  </div>
                                )}
                              </div>
                            </div>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="text-lg text-gray-500 italic p-3 bg-white rounded-md border border-gray-200 mt-4">
                  No pose data available
                </div>
              )
            )}
          </AccordionContent>
        </AccordionItem>
      </Accordion>

      {/* Jetson Statistics Section */}
      <Accordion type="single" collapsible defaultValue="jetson" className="mt-6">
        <AccordionItem value="jetson">
          <AccordionTrigger className="text-xl font-semibold text-gray-800">
            Jetson Stats
          </AccordionTrigger>
          <AccordionContent>
            {latestDetections?.jetson ? (
              <Card className="mt-4 border-l-4 border-l-green-600">
                <CardContent className="p-4">
                  <div className="grid grid-cols-2 gap-3 mb-3">
                    {/* CPU Temperature */}
                    <div className="flex flex-col bg-gray-50 p-3 rounded-lg border border-gray-200">
                      <div className="text-xs font-medium text-gray-500">CPU Temperature</div>
                      <div className="flex items-baseline">
                        <span className="text-2xl font-mono font-semibold">
                          {latestDetections.jetson.cpu_temp.toFixed(1)}
                        </span>
                        <span className="text-lg ml-1">ºC</span>
                      </div>
                      <div className="mt-1 w-full bg-gray-200 rounded-full h-1.5">
                        <div
                          className="h-1.5 rounded-full"
                          style={{
                            width: `${Math.min(100, (latestDetections.jetson.cpu_temp / 100) * 100)}%`,
                            backgroundColor: latestDetections.jetson.cpu_temp > 80 ? '#ef4444' :
                                          latestDetections.jetson.cpu_temp > 60 ? '#f59e0b' : '#10b981'
                          }}
                        ></div>
                      </div>
                    </div>

                    {/* GPU Temperature */}
                    <div className="flex flex-col bg-gray-50 p-3 rounded-lg border border-gray-200">
                      <div className="text-xs font-medium text-gray-500">GPU Temperature</div>
                      <div className="flex items-baseline">
                        <span className="text-2xl font-mono font-semibold">
                          {latestDetections.jetson.gpu_temp.toFixed(1)}
                        </span>
                        <span className="text-lg ml-1">ºC</span>
                      </div>
                      <div className="mt-1 w-full bg-gray-200 rounded-full h-1.5">
                        <div
                          className="h-1.5 rounded-full"
                          style={{
                            width: `${Math.min(100, (latestDetections.jetson.gpu_temp / 100) * 100)}%`,
                            backgroundColor: latestDetections.jetson.gpu_temp > 80 ? '#ef4444' :
                                          latestDetections.jetson.gpu_temp > 60 ? '#f59e0b' : '#10b981'
                          }}
                        ></div>
                      </div>
                    </div>
                  </div>

                  {/* Uptime */}
                  <div className="p-3 bg-gray-50 rounded-lg border border-gray-200">
                    <div className="text-xs font-medium text-gray-500 mb-1">System Uptime</div>
                    <div className="text-xl font-mono font-semibold">
                      {(() => {
                        // Format uptime in DD:HH:MM:SS
                        const uptime = latestDetections.jetson.uptime;
                        const days = Math.floor(uptime / (24 * 3600));
                        const hours = Math.floor((uptime % (24 * 3600)) / 3600);
                        const minutes = Math.floor((uptime % 3600) / 60);
                        const seconds = Math.floor(uptime % 60);

                        // Format with leading zeros
                        const pad = (num: number) => String(num).padStart(2, '0');
                        return `${pad(days)}:${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
                      })()}
                    </div>
                    <div className="flex items-center mt-1.5 text-xs text-gray-500">
                      <span className="inline-block w-2 h-2 mr-1 bg-green-500 rounded-full"></span>
                      System running
                    </div>
                  </div>
                </CardContent>
              </Card>
            ) : (
              <div className="text-lg text-gray-500 italic p-3 bg-white rounded-md border border-gray-200 mt-4">
                No Jetson stats available
              </div>
            )}
          </AccordionContent>
        </AccordionItem>
      </Accordion>

      {/* Last Updated Indicator */}
      {latestDetections && (
        <div className="mt-4 pt-3 flex items-center justify-between border-t border-gray-200">
          <div className="flex items-center">
            <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
              <div className="w-2 h-2 rounded-full bg-green-500 mr-1 animate-pulse"></div>
              LIVE
            </span>
          </div>
          <div className="text-right text-xs text-gray-500 font-mono">
            {new Date().toLocaleTimeString()}
          </div>
        </div>
      )}
    </div>
  );
};

export default DetailsPanel;

---
./src/components/vairc/components/DetectionCanvas.tsx
---
// aadishv.github.io/src/components/vairc/components/DetectionCanvas.tsx
import React, { useCallback, useEffect, useRef, useState } from "react";
import { DEFAULT_SERVER, type DetectionPayload, type Detection } from "../Layout";
import { getDetectionColor } from "../utils/colors";
import { safeGetStuff, isValidDetectionPayload } from "../utils/validation";
import { Switch } from "../../../components/ui/switch";
import { Button } from "../../../components/ui/button";
import { Card, CardContent } from "../../../components/ui/card";

interface DetectionCanvasProps {
  /** The object containing detection data, or null if none */
  detections: DetectionPayload | null;
  /** URL for the MJPEG image stream */
  imageUrl?: string | null;
  /** Optional server configuration (host:port) */
  serverConfig?: string;
  /** Optional endpoint for the image stream */
  imageEndpoint?: string;
  /** The native width of the image source used for detections */
  originalImageWidth: number;
  /** The native height of the image source used for detections */
  originalImageHeight: number;
  /** Optional Tailwind classes for the container */
  className?: string;
  /** Optional flag to hide the component if no image URL is provided */
  hideWhenNoUrl?: boolean;
}

const DetectionCanvas: React.FC<DetectionCanvasProps> = ({
  detections,
  imageUrl = null,
  serverConfig = DEFAULT_SERVER,
  imageEndpoint,
  originalImageWidth,
  originalImageHeight,
  className = '',
  hideWhenNoUrl = true,
}) => {
  // Refs for canvas and image elements
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const imageRef = useRef<HTMLImageElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  // State for image loading and errors
  const [imageError, setImageError] = useState(false);

  // State for bounding box toggle with localStorage persistence
  const [showBoundingBoxes, setShowBoundingBoxes] = useState(() => {
    try {
      const saved = localStorage.getItem('vairc-show-bounding-boxes');
      return saved === null ? true : saved === 'true';
    } catch {
      return true; // Default to true if localStorage fails
    }
  });

  // URL construction
  const isHttps = window.location.protocol === 'https:';
  const effectiveImageUrl = imageUrl || (imageEndpoint ? `http://${serverConfig}/${imageEndpoint}` : null);
  const isMixedContent = isHttps && !!effectiveImageUrl && effectiveImageUrl.startsWith('http:');

  // Draw bounding boxes or clear canvas based on toggle state
  const updateCanvas = useCallback(() => {
    // First ensure we have a valid canvas
    if (!canvasRef.current) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Get parent container dimensions
    const containerRect = canvas.parentElement?.getBoundingClientRect() || {
      width: canvas.offsetWidth,
      height: canvas.offsetHeight
    };

    // Set canvas size to match container dimensions
    canvas.width = containerRect.width;
    canvas.height = containerRect.height;

    // Always clear the canvas first
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // If boxes should be hidden or we don't have required data, just return after clearing
    if (!showBoundingBoxes || !imageRef.current || !detections) {
      return;
    }

    // Use safe validation utility to get the stuff array (returns empty array if invalid)
    const validDetections = safeGetStuff(detections);

    // If no valid detections to show, just return after clearing
    if (validDetections.length === 0) {
      return;
    }

    // Calculate the scaling factor from original image to displayed image size
    const imageAspectRatio = originalImageWidth / originalImageHeight;
    const containerAspectRatio = containerRect.width / containerRect.height;

    // Calculate display dimensions accounting for aspect ratio
    let displayWidth, displayHeight, offsetX, offsetY;

    if (imageAspectRatio > containerAspectRatio) {
      // Image is wider than container relative to height
      displayWidth = containerRect.width;
      displayHeight = displayWidth / imageAspectRatio;
      offsetX = 0;
      offsetY = (containerRect.height - displayHeight) / 2;
    } else {
      // Image is taller than container relative to width
      displayHeight = containerRect.height;
      displayWidth = displayHeight * imageAspectRatio;
      offsetX = (containerRect.width - displayWidth) / 2;
      offsetY = 0;
    }

    // Calculate the scaling factors
    const scaleX = displayWidth / originalImageWidth;
    const scaleY = displayHeight / originalImageHeight;

    // Drawing settings
    ctx.lineWidth = 2;
    ctx.font = "16px monospace";
    ctx.textBaseline = "bottom";

    // Draw each detection
    validDetections.forEach((d: Detection) => {
      // Skip invalid detections
      if (!d || typeof d !== 'object' || typeof d.x !== 'number' ||
          typeof d.y !== 'number' || typeof d.width !== 'number' ||
          typeof d.height !== 'number' || !d.class) {
        return;
      }

      // Calculate scaled position and dimensions
      const boxWidth = d.width * scaleX;
      const boxHeight = d.height * scaleY;
      // Convert from center coordinates to top-left coordinates
      const x0 = (d.x - d.width / 2) * scaleX + (offsetX || 0);
      const y0 = (d.y - d.height / 2) * scaleY + (offsetY || 0);

      // Get color for this detection class
      const color = getDetectionColor(d.class);

      // Draw bounding box with white outline
      ctx.strokeStyle = color;
      ctx.strokeRect(x0, y0, boxWidth, boxHeight);
      ctx.strokeStyle = "white";
      ctx.strokeRect(x0+1, y0+1, boxWidth-2, boxHeight-2);

      // Prepare label text
      let label = `${d.class} ${d.confidence.toFixed(2)}`;
      if (d.depth !== undefined && d.depth !== null && d.depth >= 0) {
        label += ` d=${d.depth.toFixed(2)}m`;
      }

      // Calculate text dimensions
      const textMetrics = ctx.measureText(label);
      const textWidth = textMetrics.width;
      const textHeight = 12; // Approx height for 12px font
      const padding = 4;

      // Position text above box, or below if it would go off the top
      let textBgY = y0 - textHeight - padding;
      let textY = y0 - padding / 2;

      // If text goes off the top edge, position below
      if (textBgY < 0) {
        textBgY = y0 + boxHeight + padding / 2;
        textY = textBgY + textHeight + padding / 2;
      }

      const textX = x0 + padding / 2 - 2;
      const textBgX = x0 - 2;

      // Draw label background
      ctx.fillStyle = color;
      ctx.fillRect(
        textBgX,
        textBgY,
        textWidth + padding,
        textHeight + padding
      );

      // Draw label text
      ctx.fillStyle = '#FFFFFF'; // White text
      ctx.fillText(label, textX, textY);
    });
  }, [detections, originalImageWidth, originalImageHeight, showBoundingBoxes]);

  // Handle image load and resize
  useEffect(() => {
    if (!imageRef.current || !canvasRef.current) return;

    const image = imageRef.current;
    const container = containerRef.current;

    // When image loads
    const handleImageLoad = () => {
      setImageError(false);
      updateCanvas();
    };

    // When window or container resizes
    const handleResize = () => {
      updateCanvas();
    };

    // Simple debounce for resize events
    const debounce = (fn: Function, ms: number) => {
      let timeoutId: ReturnType<typeof setTimeout>;
      return function(...args: any[]) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => fn.apply(this, args), ms);
      };
    };

    const debouncedResize = debounce(handleResize, 200);

    // Add event listeners
    image.addEventListener('load', handleImageLoad);
    window.addEventListener('resize', debouncedResize);

    // Set up ResizeObserver for more reliable size changes
    let resizeObserver: ResizeObserver | null = null;
    if (container && 'ResizeObserver' in window) {
      resizeObserver = new ResizeObserver(debouncedResize);
      resizeObserver.observe(container);
    }

    // If image is already loaded
    if (image.complete && image.naturalWidth) {
      handleImageLoad();
    }

    // Cleanup
    return () => {
      image.removeEventListener('load', handleImageLoad);
      window.removeEventListener('resize', debouncedResize);
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, [updateCanvas]);

  // Update canvas when detections or toggle changes
  useEffect(() => {
    updateCanvas();
  }, [detections, showBoundingBoxes, updateCanvas]);

  // Handle image error
  const handleImageError = () => {
    console.error('Failed to load image stream');
    setImageError(true);
  };

  // Reload the image
  const reloadImage = () => {
    setImageError(false);
    if (imageRef.current && effectiveImageUrl) {
      const refreshedUrl = `${effectiveImageUrl}?t=${Date.now()}`;
      imageRef.current.src = refreshedUrl;
    }
  };

  // Toggle bounding boxes
  const toggleBoundingBoxes = () => {
    const newValue = !showBoundingBoxes;
    setShowBoundingBoxes(newValue);

    // Save to localStorage
    try {
      localStorage.setItem('vairc-show-bounding-boxes', String(newValue));
    } catch (error) {
      console.warn('Failed to save bounding box setting');
    }

    // Force an immediate canvas update
    // This is a backup to ensure the canvas clears immediately when toggled off
    // even if the effect doesn't trigger fast enough
    setTimeout(() => {
      if (canvasRef.current) {
        const ctx = canvasRef.current.getContext('2d');
        if (ctx) {
          ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);
          if (newValue) {
            // If turning on, force redraw
            updateCanvas();
          }
        }
      }
    }, 0);
  };

  // Hide component if no image URL and hideWhenNoUrl is true
  if (!effectiveImageUrl && hideWhenNoUrl) {
    return null;
  }

  return (
    <div ref={containerRef} className={`relative w-full h-full overflow-hidden ${className}`}>
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="relative w-full h-full">
          {effectiveImageUrl ? (
            <>
              {/* The image element */}
              <img
                ref={imageRef}
                src={effectiveImageUrl}
                alt="Live stream"
                className="absolute top-0 left-0 w-full h-full object-contain"
                onError={handleImageError}
              />

              {/* Canvas for bounding boxes */}
              <canvas
                ref={canvasRef}
                className="absolute top-0 left-0 w-full h-full pointer-events-none"
              />

              {/* Mixed content warning */}
              {isMixedContent && (
                <div className="absolute inset-0 bg-white z-10 flex flex-col items-center justify-center p-4 text-center">
                  <Card className="max-w-md border border-gray-300 bg-gray-50">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-center mb-4">
                        <svg className="h-10 w-10 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                      </div>
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Mixed Content Blocked</h3>
                      <p className="mb-4 text-gray-600">Your browser is blocking the HTTP camera stream because this page is loaded over HTTPS.</p>
                      <div className="text-sm bg-gray-100 p-3 rounded-md text-left mb-4 border border-gray-200">
                        <p className="font-medium text-gray-700 mb-1">Solutions:</p>
                        <ol className="list-decimal list-inside space-y-1 text-gray-600">
                          <li>Access this page with HTTP instead of HTTPS</li>
                          <li>In Chrome, click the shield icon and allow insecure content</li>
                          <li>Consider setting up a secure proxy for your camera streams</li>
                        </ol>
                      </div>
                      <Button
                        onClick={() => {
                          const currentUrl = window.location.href;
                          const httpUrl = currentUrl.replace('https://', 'http://');
                          window.location.href = httpUrl;
                        }}
                      >
                        Switch to HTTP Version
                      </Button>
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Image load error */}
              {imageError && !isMixedContent && (
                <div className="absolute inset-0 bg-white z-10 flex flex-col items-center justify-center p-4 text-center">
                  <Card className="max-w-md border border-gray-300 bg-gray-50">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-center mb-4">
                        <svg className="h-10 w-10 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </div>
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Camera Stream Error</h3>
                      <p className="mb-4 text-gray-600">Failed to load the stream from:</p>
                      <div className="bg-gray-100 p-2 rounded-md border border-gray-200 mb-4 font-mono text-sm overflow-auto">
                        {effectiveImageUrl}
                      </div>
                      <Button
                        onClick={reloadImage}
                        className="flex items-center mx-auto"
                      >
                        <svg className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                        </svg>
                        Retry Connection
                      </Button>
                    </CardContent>
                  </Card>
                </div>
              )}
            </>
          ) : (
            // Placeholder when no image URL
            <div className="absolute inset-0 bg-gray-300 flex items-center justify-center text-gray-500">
              No Image Stream
            </div>
          )}
        </div>
      </div>

      {/* Bounding box toggle control */}
      <div className="absolute top-2 right-2 z-10 bg-white bg-opacity-75 rounded border border-gray-200 px-2 py-1 flex items-center">
        <div className="flex items-center space-x-2">
          <Switch
            id="bounding-boxes-toggle"
            checked={showBoundingBoxes}
            onCheckedChange={toggleBoundingBoxes}
          />
          <label
            htmlFor="bounding-boxes-toggle"
            className="text-xs font-medium text-gray-800 cursor-pointer"
          >
            {showBoundingBoxes ? 'Boxes On' : 'Boxes Off'}
          </label>
        </div>
      </div>
    </div>
  );
};

export default DetectionCanvas;

---
./src/components/vairc/components/Feeds.tsx
---
// aadishv.github.io/src/components/vairc/components/Feeds.tsx
import React, { useRef, useEffect, useState } from "react";
import DetectionCanvas from "./DetectionCanvas";
import { type DetectionPayload } from "../Layout";
import { ensureValidPayload } from "../utils/validation";

// Define our window components for the layout
export const ColorFeed: React.FC<{latestDetections: DetectionPayload, serverConfig: string}> = ({latestDetections, serverConfig}) => (
  <div className="w-full h-full flex items-center justify-center">
    <DetectionCanvas
      detections={ensureValidPayload(latestDetections)}
      serverConfig={serverConfig}
      imageEndpoint="color.mjpg"
      originalImageWidth={640}
      originalImageHeight={480}
      className="h-full"
    />
  </div>
);

export const DepthFeed: React.FC<{latestDetections: DetectionPayload, serverConfig: string}> = ({latestDetections, serverConfig}) => (
  <div className="w-full h-full flex items-center justify-center">
    <DetectionCanvas
      detections={ensureValidPayload(latestDetections)}
      serverConfig={serverConfig}
      imageEndpoint="depth.mjpg"
      originalImageWidth={640}
      originalImageHeight={480}
      className="h-full"
    />
  </div>
);

// BackCamera panel: MJPG stream from /color2.mjpg, no bounding boxes
export const BackCamera: React.FC<{latestDetections: DetectionPayload, serverConfig: string}> = ({latestDetections, serverConfig}) => (
  <div className="w-full h-full flex items-center justify-center">
    <DetectionCanvas
      detections={ensureValidPayload(latestDetections)}
      serverConfig={serverConfig}
      imageEndpoint="color2.mjpg"
      originalImageWidth={640}
      originalImageHeight={480}
      className="h-full"
    />
  </div>
);

---
./src/components/vairc/components/FieldView.tsx
---
// aadishv.github.io/src/components/vairc/components/FieldView.tsx
import React, { useEffect, useRef, useState } from "react";
import type { DetectionPayload, Pose } from "../Layout";
import { Card, CardContent } from "../../../components/ui/card";
import { safeGetStuff, isValidDetectionPayload } from "../utils/validation";

// Field View Panel Component
const FieldView: React.FC<{latestDetections: DetectionPayload | null, serverConfig: string}> = ({latestDetections}) => {
  // References for drawing
  const imageRef = useRef<HTMLImageElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  // Track when the image is actually loaded
  const [imageLoaded, setImageLoaded] = useState(false);

  // Effect to draw the field whenever detections or image loaded state changes
  useEffect(() => {
    // Skip if image is not loaded or no canvas
    if (!imageLoaded || !canvasRef.current) return;

    // Get the current pose directly from latest detections
    const currentPose = latestDetections?.pose || null;

    // Directly draw the field with the current pose
    const canvas = canvasRef.current;
    if (canvas) {
      drawField(canvas, currentPose, latestDetections);
    }
  }, [latestDetections, imageLoaded]);

  // Function to draw the field and robot with a specific pose
  const drawField = (canvas: HTMLCanvasElement, robotPose: Pose | null, detections: DetectionPayload | null) => {
    const image = imageRef.current;
    const container = containerRef.current;

    if (!canvas || !image || !container) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Get container dimensions
    const containerRect = container.getBoundingClientRect();
    canvas.width = containerRect.width;
    canvas.height = containerRect.height;

    // Field dimensions in inches
    const FIELD_WIDTH_INCHES = 152;
    const FIELD_HEIGHT_INCHES = 152;

    // Robot dimensions in inches (18x18 inch square robot)
    const ROBOT_SIZE_INCHES = 18;

    // Calculate scaling factor to convert inches to pixels
    const scaleX = containerRect.width / FIELD_WIDTH_INCHES;
    const scaleY = containerRect.height / FIELD_HEIGHT_INCHES;
    const scale = Math.min(scaleX, scaleY); // Use the smaller scale to maintain aspect ratio

    // Calculate offset to center the field
    const offsetX = (containerRect.width - FIELD_WIDTH_INCHES * scale) / 2;
    const offsetY = (containerRect.height - FIELD_HEIGHT_INCHES * scale) / 2;

    // Function to convert field coordinates (inches, origin at center, y-up)
    // to canvas coordinates (pixels, origin at top-left, y-down)
    const fieldToCanvas = (fieldX: number, fieldY: number) => {
      // 1. Translate from field center origin to top-left origin
      const centeredX = fieldX + FIELD_WIDTH_INCHES / 2;
      const centeredY = FIELD_HEIGHT_INCHES / 2 - fieldY; // Invert Y-axis

      // 2. Scale from inches to pixels
      const pixelX = centeredX * scale + offsetX;
      const pixelY = centeredY * scale + offsetY;

      return { x: pixelX, y: pixelY };
    };

    // Clear the canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw all detections first (behind the robot)
    if (isValidDetectionPayload(detections)) {
      const validDetections = safeGetStuff(detections);
      validDetections.forEach(detection => {
        // Only process detections that have absolute field coordinates
        if (detection && typeof detection === 'object' &&
            detection.fx !== undefined && detection.fy !== undefined &&
            typeof detection.fx === 'number' && typeof detection.fy === 'number') {
          // Calculate transparency based on confidence
          // Map from confidence range (0.2 - 1.0) to opacity range (0.0 - 1.0)
          const confidence = detection.confidence || 0;
          let opacity = 0;

          if (confidence <= 0.2) {
            opacity = 0; // Below 20% confidence is fully transparent
          } else if (confidence >= 1.0) {
            opacity = 1.0; // 100% confidence is fully opaque
          } else {
            // Linear interpolation between 0.2 and 1.0
            opacity = (confidence - 0.2) / 0.8;
          }

          // Set opacity for this detection
          ctx.globalAlpha = opacity; // 100% confidence is now fully opaque

          // All ring and goal coordinates are absolute
          const canvasPos = fieldToCanvas(detection.fx, detection.fy);
          const detectionClass = detection.class.toLowerCase();

          // Define sizes based on object type (in inches)
          let sizeInches = 0;
          switch (detectionClass) {
            case 'red':
            case 'blue':
              sizeInches = 8; // 8 inch OD for rings
              break;
            case 'goal':
              sizeInches = 10; // 10 inch OD for goals
              break;
            case 'bot':
              sizeInches = 18; // 18 inch OD for bots
              break;
            default:
              sizeInches = 8; // Default size
          }

          // Calculate pixel size
          const pixelSize = sizeInches * scale;

          // Create image path
          const imagePath = `/vairc/images/${detectionClass}.png`;

          // Create and use an image element
          const spriteImage = new Image();
          spriteImage.src = imagePath;

          // Function to draw the image properly cropped to square
          const drawCroppedImage = (img: HTMLImageElement) => {
            // Get image dimensions
            const imgWidth = img.naturalWidth;
            const imgHeight = img.naturalHeight;

            // Determine crop dimensions to make the image square
            let sourceX = 0;
            let sourceY = 0;
            let sourceSize = Math.min(imgWidth, imgHeight);

            // If width > height, crop from center of width
            if (imgWidth > imgHeight) {
              sourceX = (imgWidth - sourceSize) / 2;
            }
            // If height > width, crop from center of height
            else if (imgHeight > imgWidth) {
              sourceY = (imgHeight - sourceSize) / 2;
            }

            // Draw the cropped image
            ctx.drawImage(
              img,
              sourceX, sourceY,      // Source position (top-left of crop)
              sourceSize, sourceSize, // Source dimensions (crop to square)
              canvasPos.x - pixelSize/2, // Destination position
              canvasPos.y - pixelSize/2,
              pixelSize, pixelSize    // Destination dimensions
            );
          };

          // If image is already loaded, draw it immediately
          if (spriteImage.complete && spriteImage.naturalWidth) {
            drawCroppedImage(spriteImage);
          } else {
            // Draw a placeholder while the image loads
            spriteImage.onload = () => {
              drawCroppedImage(spriteImage);
            };

            // Fallback if image fails to load
            spriteImage.onerror = () => {
              console.error(`Failed to load image: ${imagePath}`);
              // Draw a colored circle as fallback with opacity based on confidence
              ctx.fillStyle = detectionClass === 'red' ? `rgba(255, 0, 0, ${opacity})`
                            : detectionClass === 'blue' ? `rgba(0, 0, 255, ${opacity})`
                            : detectionClass === 'goal' ? `rgba(255, 255, 0, ${opacity})`
                            : `rgba(128, 128, 128, ${opacity})`;
              ctx.beginPath();
              ctx.arc(canvasPos.x, canvasPos.y, pixelSize/2, 0, Math.PI * 2);
              ctx.fill();
            };
          }
        }
      });

      // Reset global alpha after drawing detections
      ctx.globalAlpha = 1.0;
    }

    // Draw the robot if we have pose data
    if (robotPose &&
        typeof robotPose === 'object' &&
        typeof robotPose.x === 'number' &&
        typeof robotPose.y === 'number' &&
        typeof robotPose.theta === 'number') {
      const { x, y, theta } = robotPose;

      // Convert robot position from field to canvas coordinates
      const canvasPos = fieldToCanvas(x, y);

      // Calculate robot size in pixels
      const robotSizePixels = ROBOT_SIZE_INCHES * scale;
      const halfSize = robotSizePixels / 2;

      // Define robot corners relative to its center position (in canvas pixel space)
      const corners = [
        { x: -halfSize, y: -halfSize }, // Top-left
        { x: halfSize, y: -halfSize },  // Top-right
        { x: halfSize, y: halfSize },   // Bottom-right
        { x: -halfSize, y: halfSize }   // Bottom-left
      ];

      // Rotate and position the robot corners
      // For CCW rotation where 0 = up (north)
      const rotatedCorners = corners.map(corner => {
        // Convert theta from degrees to radians for trigonometric functions
        const thetaRadians = theta * (Math.PI / 180);

        // Rotate the corner around robot center - using counterclockwise rotation formula
        const cosTheta = Math.cos(thetaRadians);
        const sinTheta = Math.sin(thetaRadians);

        const rotatedX = corner.x * cosTheta + corner.y * sinTheta;
        const rotatedY = -corner.x * sinTheta + corner.y * cosTheta;

        // Translate to robot position on canvas
        return {
          x: canvasPos.x + rotatedX,
          y: canvasPos.y + rotatedY
        };
      });

      // Draw robot body
      ctx.fillStyle = 'rgba(128, 128, 128, 0.7)';
      ctx.beginPath();
      ctx.moveTo(rotatedCorners[0].x, rotatedCorners[0].y);
      for (let i = 1; i < rotatedCorners.length; i++) {
        ctx.lineTo(rotatedCorners[i].x, rotatedCorners[i].y);
      }
      ctx.closePath();
      ctx.fill();

      // Draw robot outline
      ctx.strokeStyle = 'rgba(0, 0, 0, 0.8)';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(rotatedCorners[0].x, rotatedCorners[0].y);
      for (let i = 1; i < rotatedCorners.length; i++) {
        ctx.lineTo(rotatedCorners[i].x, rotatedCorners[i].y);
      }
      ctx.closePath();
      ctx.stroke();

      // Draw blue front face (0-1 side to be on top when the robot is at 0° orientation)
      ctx.strokeStyle = 'rgba(0, 102, 255, 1.0)';
      ctx.lineWidth = 4;
      ctx.beginPath();
      ctx.moveTo(rotatedCorners[0].x, rotatedCorners[0].y);
      ctx.lineTo(rotatedCorners[1].x, rotatedCorners[1].y);
      ctx.stroke();

      // Draw a small dot at the robot center for reference
      ctx.fillStyle = 'rgba(255, 0, 0, 0.7)';
      ctx.beginPath();
      ctx.arc(canvasPos.x, canvasPos.y, 2, 0, Math.PI * 2);
      ctx.fill();
    }
  };

  // Handle image load
  useEffect(() => {
    const image = imageRef.current;
    if (!image) return;

    const handleImageLoad = () => {
      console.log("Field image loaded");
      setImageLoaded(true);
    };

    // Add event listener
    image.addEventListener('load', handleImageLoad);

    // If image is already loaded
    if (image.complete && image.naturalWidth) {
      handleImageLoad();
    }

    // Cleanup
    return () => {
      image.removeEventListener('load', handleImageLoad);
    };
  }, []);

  // Effect to handle resize events
  useEffect(() => {
    const container = containerRef.current;
    const image = imageRef.current;

    if (!container || !image) return;

    // Handle resize
    const handleResize = () => {
      console.log("Resize detected");
      if (canvasRef.current && latestDetections?.pose) {
        drawField(canvasRef.current, latestDetections.pose, latestDetections);
      }
    };

    // Create a ResizeObserver for better size change detection
    const resizeObserver = new ResizeObserver(() => {
      console.log("Container size changed");
      handleResize();
    });

    // Add resize listeners
    window.addEventListener('resize', handleResize);
    resizeObserver.observe(container);
    resizeObserver.observe(image);

    // Cleanup on unmount
    return () => {
      window.removeEventListener('resize', handleResize);
      resizeObserver.disconnect();
    };
  }, [latestDetections]);

  return (
    <div className="w-full h-full flex flex-col">
      <div className="bg-gray-100 p-2 border-b border-gray-200 text-sm font-medium text-gray-700">
        <span>VEX High Stakes Field</span>
      </div>
      <div className="flex-1 relative overflow-hidden bg-white" ref={containerRef}>
        {/* Field container - using a single centered container */}
        <div className="absolute inset-0 flex items-center justify-center">
          {/* Image and canvas container with fixed aspect ratio */}
          <div className="relative w-full h-full">
            {/* Image element - ensure it's properly sized and centered */}
            <img
              ref={imageRef}
              src={"/vairc/field.png"}
              alt="VEX Field View"
              className={`absolute top-0 left-0 w-full h-full object-contain ${!imageLoaded ? 'opacity-0' : 'opacity-100'}`}
              loading="eager"
            />

            {/* Placeholder while image is loading */}
            {!imageLoaded && (
              <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
                <div className="animate-pulse text-gray-500">Loading field view...</div>
              </div>
            )}

            {/* Canvas overlay perfectly aligned with image */}
            <canvas
              ref={canvasRef}
              className="absolute top-0 left-0 w-full h-full"
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default FieldView;


---
./src/components/vairc/components/InfoPanels.tsx
---
// aadishv.github.io/src/components/vairc/components/InfoPanels.tsx
import React from "react";
import type { DetectionPayload } from "../Layout";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger
} from "../../../components/ui/tabs";
import { Card, CardContent } from "../../../components/ui/card";

export const JsonRenderer: React.FC<{latestDetections: DetectionPayload | null, serverConfig: string}> = ({latestDetections}) => (
  <div className="flex flex-col p-4 overflow-auto h-full">
   <pre className="text-sm">{JSON.stringify(latestDetections || { stuff: [] }, null, 2)}</pre>
  </div>
);

export const InfoPanel: React.FC<{serverConfig: string}> = ({serverConfig}) => {
  return (
    <div className="flex flex-col h-full overflow-auto">
      <Tabs defaultValue="overview" className="w-full h-full">
        <div className="border-b border-gray-200">
          <TabsList className="bg-transparent h-auto p-0">
            <TabsTrigger
              value="overview"
              className="rounded-none data-[state=active]:border-b-2 data-[state=active]:border-blue-600 data-[state=active]:shadow-none px-4 py-2"
            >
              Overview
            </TabsTrigger>
            <TabsTrigger
              value="tutorial"
              className="rounded-none data-[state=active]:border-b-2 data-[state=active]:border-blue-600 data-[state=active]:shadow-none px-4 py-2"
            >
              Tutorial
            </TabsTrigger>
            <TabsTrigger
              value="settings"
              className="rounded-none data-[state=active]:border-b-2 data-[state=active]:border-blue-600 data-[state=active]:shadow-none px-4 py-2"
            >
              Settings Guide
            </TabsTrigger>
          </TabsList>
        </div>

        <div className="flex-1 p-4 overflow-y-auto">
          <TabsContent value="overview" className="h-full m-0 overflow-auto">
            <div>
              <h3 className="text-lg font-medium mb-2">VAIRC Vision System</h3>
              <p className="mb-4">Real-time object detection and tracking interface for the VEX AI Racing Challenge.</p>
              <h4 className="font-medium text-gray-700 mt-4 mb-2">Available Views:</h4>
              <ul className="list-disc ml-5 space-y-2">
                <li><span className="font-medium">Color Feed:</span> RGB camera view with object detections</li>
                <li><span className="font-medium">Depth Feed:</span> Depth map camera view showing distance information</li>
                <li><span className="font-medium">Raw JSON:</span> Live detection data in JSON format for debugging</li>
                <li><span className="font-medium">Field View:</span> Top-down view of the field with robot position</li>
                <li><span className="font-medium">Details Panel:</span> Structured information about detections</li>
              </ul>

              <Card className="mt-4 bg-blue-50 border-blue-400 border-l-4">
                <CardContent className="p-3 text-sm text-blue-800">
                  <strong>Tip:</strong> Use the Settings button in the header to customize your layout and configure the server connection.
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="tutorial" className="h-full m-0 overflow-auto">
            <div>
              <h3 className="text-lg font-medium mb-3">How to Use VAIRC</h3>

              <div className="space-y-6">
                <section>
                  <h4 className="text-md font-medium text-gray-800 mb-2">Getting Started</h4>
                  <ol className="list-decimal ml-5 space-y-3">
                    <li>
                      <p className="mb-1"><span className="font-medium">Connect to your Jetson:</span> Click the Settings gear in the header and enter your Jetson's IP address and port.</p>
                      <p className="text-sm text-gray-600">Example: 192.168.86.98:5000</p>
                    </li>
                    <li>
                      <p className="mb-1"><span className="font-medium">Add views:</span> Use the Settings panel to enable different windows like Color Feed, Depth Feed, etc.</p>
                    </li>
                    <li>
                      <p><span className="font-medium">Arrange your layout:</span> Drag and resize windows by their handles to customize your workspace.</p>
                    </li>
                  </ol>
                </section>

                <section>
                  <h4 className="text-md font-medium text-gray-800 mb-2">Working with Detection Views</h4>
                  <div className="space-y-3">
                    <div>
                      <p className="mb-1 font-medium">Toggle Bounding Boxes:</p>
                      <p>Use the toggle switch in the top-right corner of camera views to show/hide detection boxes.</p>
                    </div>

                    <div>
                      <p className="mb-1 font-medium">Understanding Detection Labels:</p>
                      <p>Each detection box shows:</p>
                      <ul className="list-disc ml-5 space-y-1 mt-1">
                        <li><span className="font-mono text-sm">Class</span> - Object type (red, blue, flag, etc.)</li>
                        <li><span className="font-mono text-sm">Confidence</span> - Detection certainty (0-1)</li>
                        <li><span className="font-mono text-sm">Distance</span> - Estimated distance in meters (if available)</li>
                      </ul>
                    </div>
                  </div>
                </section>

                <section>
                  <h4 className="text-md font-medium text-gray-800 mb-2">Using the Field View</h4>
                  <p>The Field View provides a top-down perspective of the field with your robot's position:</p>
                  <ul className="list-disc ml-5 space-y-2 mt-2">
                    <li>Gray rectangle shows your robot's position and orientation</li>
                    <li>Black arrow indicates the forward direction</li>
                    <li>Coordinates are based on the field coordinate system (in inches)</li>
                  </ul>
                </section>

                <section>
                  <h4 className="text-md font-medium text-gray-800 mb-2">Details Panel</h4>
                  <p>The Details Panel provides organized information about:</p>
                  <ul className="list-disc ml-5 space-y-2 mt-2">
                    <li>Detected objects with positions and confidence values</li>
                    <li>Current robot pose (x, y, heading)</li>
                    <li>System status and Jetson statistics</li>
                  </ul>
                  <p className="mt-2">Use the collapsible sections to focus on the data you need.</p>
                </section>

                <Card className="mt-4 bg-yellow-50 border-yellow-400 border-l-4">
                  <CardContent className="p-3 text-sm text-yellow-800">
                    <strong>Note:</strong> If you experience connection issues, check that your Jetson is running the correct server software and is accessible on your network.
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="settings" className="h-full m-0 overflow-auto">
            <div>
              <h3 className="text-lg font-medium mb-3">Settings Guide</h3>

              <div className="space-y-6">
                <section>
                  <h4 className="text-md font-medium text-gray-800 mb-2">Server Configuration</h4>
                  <p className="mb-2">To connect to your vision system server:</p>
                  <ol className="list-decimal ml-5 space-y-2">
                    <li>Click the ⚙️ Settings button in the header</li>
                    <li>Enter your server's IP address and port in the format <code className="bg-gray-100 px-1 py-0.5 rounded text-sm">host:port</code></li>
                    <li>Click "Apply" to save changes</li>
                  </ol>

                  <Card className="mt-3 bg-gray-50">
                    <CardContent className="p-3 text-sm">
                      <p className="font-medium">Common Connection Issues:</p>
                      <ul className="list-disc ml-5 space-y-1 mt-1">
                        <li>Ensure your computer is on the same network as the Jetson</li>
                        <li>Verify the Jetson server is running (SSH in and check processes)</li>
                        <li>Check for firewalls blocking connections</li>
                        <li>For HTTPS/HTTP mixed content errors, use the HTTP version or allow insecure content</li>
                      </ul>
                    </CardContent>
                  </Card>
                </section>

                <section>
                  <h4 className="text-md font-medium text-gray-800 mb-2">Window Management</h4>
                  <p className="mb-2">Customize your layout with these features:</p>

                  <h5 className="font-medium text-gray-700 mt-3 mb-1">Toggling Windows</h5>
                  <p>In the Settings panel, use the toggle switches to show/hide specific windows.</p>

                  <h5 className="font-medium text-gray-700 mt-3 mb-1">Arranging Windows</h5>
                  <ul className="list-disc ml-5 space-y-1">
                    <li>Drag a window's title bar to move it</li>
                    <li>Hover near edges between windows to see resize handles</li>
                    <li>The layout is automatically saved to your browser</li>
                  </ul>

                  <h5 className="font-medium text-gray-700 mt-3 mb-1">Splitting Windows</h5>
                  <p>When dragging a window, drop zones will appear allowing you to:</p>
                  <ul className="list-disc ml-5 space-y-1 mt-1">
                    <li>Split horizontally (top/bottom)</li>
                    <li>Split vertically (left/right)</li>
                    <li>Replace an existing window</li>
                  </ul>
                </section>

                <section>
                  <h4 className="text-md font-medium text-gray-800 mb-2">Troubleshooting</h4>
                  <div className="space-y-3">
                    <div>
                      <p className="font-medium mb-1">Camera Streams Not Loading:</p>
                      <ul className="list-disc ml-5 space-y-1">
                        <li>Check server connection and network access</li>
                        <li>Ensure camera devices are properly connected to the Jetson</li>
                        <li>Try restarting the server application</li>
                      </ul>
                    </div>

                    <div>
                      <p className="font-medium mb-1">Layout Reset:</p>
                      <p>If you need to reset your layout completely:</p>
                      <ol className="list-decimal ml-5 space-y-1">
                        <li>Open your browser's developer tools</li>
                        <li>Go to Application → Storage → Local Storage</li>
                        <li>Delete the VAIRC layout and visibility keys</li>
                        <li>Refresh the page</li>
                      </ol>
                    </div>
                  </div>
                </section>
              </div>
            </div>
          </TabsContent>
        </div>
      </Tabs>

      {/* Footer with connection info */}
      <div className="mt-auto pt-3 border-t border-gray-200 p-4">
        <p className="text-sm font-medium">Connected to server:</p>
        <code className="text-sm bg-gray-100 px-2 py-1 rounded">{serverConfig}</code>
      </div>
    </div>
  );
};

---
./src/layouts/BaseLayout.astro
---
---
import Header from "../components/Header.astro";

interface Props {
  title: string;
  description?: string;
  pt?: number;
  p?: number;
}

const {
  title,
  description = "Aadish Verma's personal website and blog",
  pt = 24,
  p = 20,
} = Astro.props;

const isDev = import.meta.env.DEV; // remove this once the checklist is done
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lora:wght@400;500;600;700&family=Source+Sans+Pro:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <!-- Google tag (gtag.js) -->
    {!isDev &&
    <script
      is:inline
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-Y0HNZET7NE"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-Y0HNZET7NE");
    </script>
    }
  </head>
  <body class="text-text h-[100vh] font-sans">
    <Header />
    <main
      class="h-full w-full"
      style={`padding: ${p / 4}rem; padding-top: ${pt / 4}rem`}
    >
      <slot />
    </main></body
  >
</html>


---
./src/lib/aiService.ts
---
// AI Service for interacting with the OpenAI API
import OpenAI from 'openai';
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from '@google/generative-ai';
import config from './config';

// Import specific OpenAI types directly with correct import syntax
import type {
  ChatCompletionSystemMessageParam,
  ChatCompletionUserMessageParam
} from 'openai/resources/chat/completions';
import type {
  ChatCompletionContentPartText,
  ChatCompletionContentPartImage
} from 'openai/resources';

// Type definitions
type CardData = {
  type: 'text' | 'file';
  content: string;
  data?: string; // For text cards
  files?: FileData[]; // For file cards
  extraInstructions?: string;
  numQuestions?: number;
  selectedModel?: string;
};

interface FileData {
  name: string;
  type: string;
  data: string; // Base64 for images and PDFs, raw text for other files
  id: string;
}

// Define the function schema for structured output
const tools = [
  {
    type: "function" as const,
    function: {
      name: "return_questions",
      description: "Return a list of practice questions for study, each as a Markdown/LaTeX/SVG string.",
      parameters: {
        type: "object",
        properties: {
          questions: {
            type: "array",
            items: { type: "string" },
            description: "A list of practice questions, each as a Markdown/LaTeX/SVG string."
          }
        },
        required: ["questions"]
      }
    }
  }
];

// Utility to extract JSON from Markdown code block or anywhere in the text
function extractJsonFromCodeBlock(text: string): string {
  // Try to extract the first ```json ... ``` or ``` ... ``` code block
  const codeBlockMatch = text.match(/```(?:json)?\s*([\s\S]*?)\s*```/i);
  if (codeBlockMatch) {
    // Try to find the first { ... } inside the code block
    const braceMatch = codeBlockMatch[1].match(/{[\s\S]*}/);
    if (braceMatch) return braceMatch[0];
    return codeBlockMatch[1].trim();
  }
  // Fallback: try to find the first { ... } block anywhere in the text
  const braceMatch = text.match(/{[\s\S]*}/);
  if (braceMatch) return braceMatch[0];
  return text.trim();
}

/**
 * Process a card using the selected AI model
 * @param cardData - The card data to analyze
 * @returns A promise that resolves to an array of descriptions
 */
export async function processCardWithAI(cardData: CardData): Promise<string[]> {
  try {
    // Determine which API to use based on localStorage and selectedModel
    const selectedProvider = localStorage.getItem('selected_ai_provider') || 'openai';
    const selectedModel = cardData.selectedModel || (selectedProvider === 'openai' ? config.openaiModelName : config.modelName);
    if (selectedProvider === 'openai' || selectedModel.startsWith('gpt')) {
      return processWithOpenAI(cardData, selectedModel);
    } else {
      return processWithGemini(cardData, selectedModel);
    }
  } catch (error) {
    console.error("Error processing with AI:", error);

    // Only use fallback in debug mode
    if (config.debugMode) {
      console.warn("Using fallback AI response simulation in debug mode.");
      return simulateFallbackResponse(cardData);
    }

    return ["Error: Unable to process content with AI. Please check your API key and try again."];
  }
}

/**
 * Process a card using OpenAI's model
 */
async function processWithOpenAI(cardData: CardData, selectedModel: string): Promise<string[]> {
  // Get API key directly from localStorage
  const apiKey = typeof window !== 'undefined' ? localStorage.getItem('openai_api_key') || '' : '';

  // Check if API key is available
  if (!apiKey) {
    throw new Error("OpenAI API key is not configured");
  }

  // Initialize the OpenAI client
  const openai = new OpenAI({
    apiKey: apiKey,
    dangerouslyAllowBrowser: true, // Required for client-side usage
  });

  const numQuestions = cardData.numQuestions || 3;
  const extraInstructions = cardData.extraInstructions ? ` ${cardData.extraInstructions.trim()}` : '';
  const noCodeBlock = ' DO NOT INCLUDE ANY MARKDOWN CODE BLOCK OR JSON CODE BLOCK TAGS IN YOUR RESPONSE.';

  // Prepare the messages based on card type
  if (cardData.type === 'text') {
    const systemMessage: ChatCompletionSystemMessageParam = {
      role: "system",
      content: `You are an expert educational AI assistant. Given the following study material, generate ${numQuestions} high-quality practice questions that help a student learn and test their understanding. Some of the questions should be multi-part problems, with each part clearly labeled (e.g., (a), (b), (c)). You may include SVG diagrams in your questions by embedding <svg>...</svg> code blocks. Use Markdown formatting for structure, and LaTeX for any math or scientific notation (enclose LaTeX in $$ for block or $ for inline). Do not reference any card numbers, IDs, or metadata. Focus on clarity, educational value, and variety. Only output the questions, not answers. Render Markdown, LaTeX, and SVG properly. Return your response as a JSON object: {"questions": [ ... ] } where each array element is a question (which may include Markdown, LaTeX, or SVG).${extraInstructions} ${noCodeBlock}`
    };

    const userMessage: ChatCompletionUserMessageParam = {
      role: "user",
      content: `Study Material:\n${cardData.content ? cardData.content + '\n' : ''}${cardData.data || '(No content provided)'}`
    };

    // Make the API call for text content
    const completion = await openai.chat.completions.create({
      model: selectedModel,
      messages: [systemMessage, userMessage],
      temperature: 0.7,
      tools,
      tool_choice: { type: 'function', function: { name: 'return_questions' } },
    });

    // Parse function call result if present
    let descriptions: string[] = [];
    const choice = completion.choices[0];
    if (choice && choice.message && choice.message.tool_calls && choice.message.tool_calls.length > 0) {
      const toolCall = choice.message.tool_calls[0];
      if (toolCall.function && toolCall.function.arguments) {
        try {
          const args = JSON.parse(toolCall.function.arguments);
          if (args && Array.isArray(args.questions)) {
            descriptions = args.questions;
          }
        } catch {}
      }
    }
    // Fallback to previous parsing if not present
    if (descriptions.length === 0) {
      const responseText = choice.message.content || '';
      console.log('AI raw output (OpenAI):', responseText);
      try {
        const cleaned = extractJsonFromCodeBlock(responseText);
        const json = JSON.parse(cleaned);
        if (json && Array.isArray(json.questions)) {
          descriptions = json.questions;
        } else {
          throw new Error('Invalid questions array');
        }
      } catch {
        // fallback to old parsing
        descriptions = responseText
          .split(/\n(?=\d+\.\s)/)
          .map(q => q.replace(/^\d+\.\s*/, '').trim())
          .filter(q => q.length > 0);
      }
    }
    // Convert all \n or \n to real newlines and normalize objects with a 'question' key
    descriptions = descriptions.map(q =>
      typeof q === 'string'
        ? q.replace(/\\n|\n/g, '\n')
        : (q && typeof q === 'object' && typeof (q as any).question === 'string')
          ? (q as any).question.replace(/\\n|\n/g, '\n')
          : JSON.stringify(q)
    );
    return descriptions.length > 0 ? descriptions : [choice.message.content || ''];

  } else if (cardData.type === 'file' && cardData.files && cardData.files.length > 0) {
    // For file cards with documents and images, use the vision API for images and embeddings for text
    const systemMessage: ChatCompletionSystemMessageParam = {
      role: "system",
      content: `You are an expert educational AI assistant. Given the following files, generate ${numQuestions} high-quality practice questions that help a student learn and test their understanding. Some of the questions should be multi-part problems, with each part clearly labeled (e.g., (a), (b), (c)). You may include SVG diagrams in your questions by embedding <svg>...</svg> code blocks. Use Markdown formatting for structure, and LaTeX for any math or scientific notation (enclose LaTeX in $$ for block or $ for inline). Do not reference any card numbers, IDs, or metadata. Focus on clarity, educational value, and variety. Only output the questions, not answers. Render Markdown, LaTeX, and SVG properly. Return your response as a JSON object: {"questions": [ ... ] } where each array element is a question (which may include Markdown, LaTeX, or SVG).${extraInstructions}${noCodeBlock}`
    };

    // Create content objects for user message
    const contentItems: (ChatCompletionContentPartText | ChatCompletionContentPartImage)[] = [];

    // Add basic message
    contentItems.push({
      type: "text",
      text: `Analyze the following ${cardData.files.length} file(s) and provide insights.`
    });

    // Process each file
    for (const file of cardData.files) {
      if (file.type.startsWith('image/')) {
        // For images, create an image content object
        contentItems.push({
          type: "image_url",
          image_url: {
            url: file.data,
            detail: "high"
          }
        });

        // Add context about the image
        contentItems.push({
          type: "text",
          text: `Image: ${file.name}`
        });

      } else if (file.type === 'application/pdf') {
        // For PDFs, need to send as file upload
        // Convert base64 to binary for file upload
        const base64Data = file.data.split(',')[1]; // Remove data URL prefix
        const binaryData = atob(base64Data);
        const byteArray = new Uint8Array(binaryData.length);
        for (let i = 0; i < binaryData.length; i++) {
          byteArray[i] = binaryData.charCodeAt(i);
        }

        // Create a file object
        const fileBlob = new Blob([byteArray], { type: 'application/pdf' });
        const fileObj = new File([fileBlob], file.name, { type: 'application/pdf' });

        // Upload the file
        const uploadedFile = await openai.files.create({
          file: fileObj,
          purpose: 'assistants',
        });

        // Create a file annotation
        contentItems.push({
          type: "text",
          text: `PDF Document: ${file.name} (See the uploaded file ID: ${uploadedFile.id} for content)`
        });

      } else {
        // For text files, just include the text content
        contentItems.push({
          type: "text",
          text: `File: ${file.name} (${file.type})\n\nContent:\n${file.data}`
        });
      }
    }

    const userMessage: ChatCompletionUserMessageParam = {
      role: "user",
      content: contentItems
    };

    // Make the API call with the vision model for mixed content
    const completion = await openai.chat.completions.create({
      model: selectedModel,
      messages: [systemMessage, userMessage],
      temperature: 0.7,
      max_tokens: 1000,
      tools,
      tool_choice: { type: 'function', function: { name: 'return_questions' } },
    });

    // Parse function call result if present
    let descriptions: string[] = [];
    const choice = completion.choices[0];
    if (choice && choice.message && choice.message.tool_calls && choice.message.tool_calls.length > 0) {
      const toolCall = choice.message.tool_calls[0];
      if (toolCall.function && toolCall.function.arguments) {
        try {
          const args = JSON.parse(toolCall.function.arguments);
          if (args && Array.isArray(args.questions)) {
            descriptions = args.questions;
          }
        } catch {}
      }
    }
    // Fallback to previous parsing if not present
    if (descriptions.length === 0) {
      const responseText = choice.message.content || '';
      console.log('AI raw output (OpenAI):', responseText);
      try {
        const cleaned = extractJsonFromCodeBlock(responseText);
        const json = JSON.parse(cleaned);
        if (json && Array.isArray(json.questions)) {
          descriptions = json.questions;
        } else {
          throw new Error('Invalid questions array');
        }
      } catch {
        // fallback to old parsing
        descriptions = responseText
          .split(/\n(?=\d+\.\s)/)
          .map(q => q.replace(/^\d+\.\s*/, '').trim())
          .filter(q => q.length > 0);
      }
    }
    // Convert all \n or \n to real newlines and normalize objects with a 'question' key
    descriptions = descriptions.map(q =>
      typeof q === 'string'
        ? q.replace(/\\n|\n/g, '\n')
        : (q && typeof q === 'object' && typeof (q as any).question === 'string')
          ? (q as any).question.replace(/\\n|\n/g, '\n')
          : JSON.stringify(q)
    );
    return descriptions.length > 0 ? descriptions : [choice.message.content || ''];
  } else {
    return ["No content to analyze"];
  }
}

/**
 * Process a card using Google's Gemini model
 */
async function processWithGemini(cardData: CardData, selectedModel: string): Promise<string[]> {
  // Get API key directly from localStorage
  const apiKey = typeof window !== 'undefined' ? localStorage.getItem('gemini_api_key') || '' : '';

  // Check if API key is available
  if (!apiKey) {
    throw new Error("Gemini API key is not configured");
  }

  // Initialize the Google Generative AI API
  const genAI = new GoogleGenerativeAI(apiKey);
  const model = genAI.getGenerativeModel({
    model: selectedModel,
    safetySettings: [
      {
        category: HarmCategory.HARM_CATEGORY_HARASSMENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
      {
        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
      {
        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
      {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
    ],
    generationConfig: {
      temperature: 0.7,
      topP: 0.8,
      topK: 40,
    },
  });

  let parts = [];

  const numQuestions = cardData.numQuestions || 3;
  const extraInstructions = cardData.extraInstructions ? ` ${cardData.extraInstructions.trim()}` : '';
  const noCodeBlock = ' Do not include any Markdown code block or JSON code block tags in your response.';

  if (cardData.type === 'text') {
    parts = [{
      text: `YOU ARE AN EXPERT EDUCATIONAL AI ASSISTANT. GIVEN THE FOLLOWING STUDY MATERIAL, YOUR TASK IS TO GENERATE ${numQuestions} HIGH-QUALITY PRACTICE QUESTIONS THAT HELP A STUDENT LEARN AND TEST THEIR UNDERSTANDING. SOME OF THE QUESTIONS SHOULD BE MULTI-PART PROBLEMS, WITH EACH PART CLEARLY LABELED (E.G., (A), (B), (C)). YOU MAY INCLUDE SVG DIAGRAMS IN YOUR QUESTIONS BY EMBEDDING <SVG>...</SVG> CODE BLOCKS. USE MARKDOWN FORMATTING FOR STRUCTURE, AND LATEX FOR ANY MATH OR SCIENTIFIC NOTATION (ENCLOSE LATEX IN $$ FOR BLOCK OR $ FOR INLINE). DO NOT REFERENCE ANY CARD NUMBERS, IDS, OR METADATA. FOCUS ON CLARITY, EDUCATIONAL VALUE, AND VARIETY. ONLY OUTPUT THE QUESTIONS, NOT ANSWERS. RENDER MARKDOWN, LATEX, AND SVG PROPERLY.\n\nYOUR RESPONSE MUST BE A SINGLE VALID JSON OBJECT WITH THE FOLLOWING FORMAT, AND NOTHING ELSE:\n\n{"questions": ["QUESTION 1 TEXT (CAN INCLUDE MARKDOWN, LATEX, SVG)", "QUESTION 2 TEXT", ...]}\n\nDO NOT INCLUDE ANY MARKDOWN CODE BLOCK TAGS, JSON CODE BLOCK TAGS, OR ANY TEXT OUTSIDE THE JSON OBJECT. DO NOT ADD EXPLANATIONS, HEADERS, OR ANY OTHER CONTENT. STRICTLY RETURN ONLY THE JSON OBJECT AS SPECIFIED.\n\nSTUDY MATERIAL:\n${cardData.content ? cardData.content + '\n' : ''}${cardData.data || '(NO CONTENT PROVIDED)'}${extraInstructions}${noCodeBlock}`
    }];
  } else if (cardData.type === 'file' && cardData.files && cardData.files.length > 0) {
    parts = [
      {
        text: `YOU ARE AN EXPERT EDUCATIONAL AI ASSISTANT. GIVEN THE FOLLOWING FILES, YOUR TASK IS TO GENERATE ${numQuestions} HIGH-QUALITY PRACTICE QUESTIONS THAT HELP A STUDENT LEARN AND TEST THEIR UNDERSTANDING. SOME OF THE QUESTIONS SHOULD BE MULTI-PART PROBLEMS, WITH EACH PART CLEARLY LABELED (E.G., (A), (B), (C)). YOU MAY INCLUDE SVG DIAGRAMS IN YOUR QUESTIONS BY EMBEDDING <SVG>...</SVG> CODE BLOCKS. USE MARKDOWN FORMATTING FOR STRUCTURE, AND LATEX FOR ANY MATH OR SCIENTIFIC NOTATION (ENCLOSE LATEX IN $$ FOR BLOCK OR $ FOR INLINE). DO NOT REFERENCE ANY CARD NUMBERS, IDS, OR METADATA. FOCUS ON CLARITY, EDUCATIONAL VALUE, AND VARIETY. ONLY OUTPUT THE QUESTIONS, NOT ANSWERS. RENDER MARKDOWN, LATEX, AND SVG PROPERLY.\n\nYOUR RESPONSE MUST BE A SINGLE VALID JSON OBJECT WITH THE FOLLOWING FORMAT, AND NOTHING ELSE:\n\n{"questions": ["QUESTION 1 TEXT (CAN INCLUDE MARKDOWN, LATEX, SVG)", "QUESTION 2 TEXT", ...]}\n\nDO NOT INCLUDE ANY MARKDOWN CODE BLOCK TAGS, JSON CODE BLOCK TAGS, OR ANY TEXT OUTSIDE THE JSON OBJECT. DO NOT ADD EXPLANATIONS, HEADERS, OR ANY OTHER CONTENT. STRICTLY RETURN ONLY THE JSON OBJECT AS SPECIFIED.\n\nFILES PROVIDED:${extraInstructions}${noCodeBlock}`
      },
      ...cardData.files.flatMap(file => {
        const fileParts = [];
        fileParts.push({
          text: `${file.name} (${file.type})\n`
        });
        if (file.type.startsWith('image/')) {
          try {
            const base64Data = file.data.split(',')[1];
            fileParts.push({
              inlineData: {
                mimeType: file.type,
                data: base64Data
              }
            });
          } catch (error) {
            console.error("Error extracting image data:", error);
          }
        } else if (file.type === 'application/pdf') {
          fileParts.push({
            text: `(PDF file - content not directly accessible)`
          });
        } else {
          fileParts.push({
            text: `CONTENT: ${file.data.substring(0, 1000)}${file.data.length > 1000 ? '...' : ''}`
          });
        }
        return fileParts;
      })
    ];
  } else {
    return ["No content to analyze"];
  }

  try {
    const result = await model.generateContent({
      contents: [{ role: 'user', parts }]
    });
    const responseText = result.response.text();
    console.log('AI raw output (Gemini):', responseText);
    let descriptions: string[] = [];
    try {
      const cleaned = extractJsonFromCodeBlock(responseText);
      const json = JSON.parse(cleaned);
      if (json && Array.isArray(json.questions)) {
        descriptions = json.questions;
      } else {
        throw new Error('Invalid questions array');
      }
    } catch {
      // fallback to old parsing
      descriptions = responseText
        .split(/\n(?=\d+\.\s)/)
        .map(q => q.replace(/^\d+\.\s*/, '').trim())
        .filter(q => q.length > 0);
    }
    // Convert all \n or \n to real newlines and normalize objects with a 'question' key
    descriptions = descriptions.map(q =>
      typeof q === 'string'
        ? q.replace(/\\n|\n/g, '\n')
        : (q && typeof q === 'object' && typeof (q as any).question === 'string')
          ? (q as any).question.replace(/\\n|\n/g, '\n')
          : JSON.stringify(q)
    );
    return descriptions.length > 0 ? descriptions : [responseText];
  } catch (generationError) {
    console.error("Error generating content with Gemini:", generationError);
    throw generationError;
  }
}

/**
 * Fallback function to simulate AI response when the real API is unavailable
 */
function simulateFallbackResponse(cardData: CardData): string[] {
  console.warn("Using fallback AI response simulation. Please configure a valid API key for production.");

  if (cardData.type === 'text') {
    if (!cardData.data || !cardData.data.trim()) {
      return ["No text content to analyze"];
    }

    const text = cardData.data;
    const wordCount = text.split(/\s+/).length;

    const descriptions = [
      `This text contains approximately ${wordCount} words and appears to be about ${getTopicGuess(text)}.`,
      `The writing style seems ${getStyleAnalysis(text)}.`,
      `Key themes include: ${getThemeAnalysis(text)}.`
    ];

    return descriptions;
  } else if (cardData.type === 'file') {
    if (!cardData.files || cardData.files.length === 0) {
      return ["No files to analyze"];
    }

    // Generate descriptions for each file
    return cardData.files.map(file => {
      if (file.type.startsWith('image/')) {
        const imageFormat = file.type.split('/')[1];
        return `Image file "${file.name}": This appears to be a ${imageFormat} image that would likely contain visual elements that could be analyzed for content, colors, and composition.`;
      } else if (file.type === 'application/pdf') {
        return `PDF file "${file.name}": This document likely contains text, possibly with formatting, images, and structure that would be analyzed for its content and organization.`;
      } else if (file.type.includes('text')) {
        const textPreview = file.data.substring(0, 100);
        return `Text file "${file.name}": Contains content that starts with "${textPreview}..." which appears to be about ${getTopicGuess(textPreview)}.`;
      } else if (file.type.includes('javascript') || file.type.includes('typescript') || file.type.includes('code')) {
        return `Code file "${file.name}": Contains what appears to be programming logic that would be analyzed for structure, patterns, and functionality.`;
      } else {
        return `File "${file.name}": A ${file.type} file that would be analyzed based on its contents and structure.`;
      }
    });
  }

  return ["Content analysis would be provided by AI"];
}

// Helper functions to simulate AI analysis

function getTopicGuess(text: string): string {
  const lowercaseText = text.toLowerCase();

  if (lowercaseText.includes('code') || lowercaseText.includes('function') || lowercaseText.includes('programming')) {
    return 'software development or programming';
  } else if (lowercaseText.includes('data') || lowercaseText.includes('analysis') || lowercaseText.includes('statistics')) {
    return 'data analysis or statistics';
  } else if (lowercaseText.includes('design') || lowercaseText.includes('user') || lowercaseText.includes('interface')) {
    return 'design or user experience';
  } else {
    const words = text.split(/\s+/).slice(0, 5);
    return `topics related to "${words.join(' ')}"`;
  }
}

function getStyleAnalysis(text: string): string {
  const sentenceCount = text.split(/[.!?]+/).filter(Boolean).length;
  const wordCount = text.split(/\s+/).length;

  if (sentenceCount === 0) return 'undetermined';

  const avgWordsPerSentence = wordCount / sentenceCount;

  if (avgWordsPerSentence > 20) {
    return 'formal and academic with long sentences';
  } else if (avgWordsPerSentence > 12) {
    return 'balanced and professional';
  } else {
    return 'concise and straightforward';
  }
}

function getThemeAnalysis(text: string): string {
  const lowercaseText = text.toLowerCase();
  const themesFound = [];

  if (lowercaseText.includes('technology') || lowercaseText.includes('digital') || lowercaseText.includes('computer')) {
    themesFound.push('technology');
  }

  if (lowercaseText.includes('business') || lowercaseText.includes('market') || lowercaseText.includes('company')) {
    themesFound.push('business');
  }

  if (lowercaseText.includes('learn') || lowercaseText.includes('education') || lowercaseText.includes('knowledge')) {
    themesFound.push('education');
  }

  if (lowercaseText.includes('health') || lowercaseText.includes('medical') || lowercaseText.includes('wellness')) {
    themesFound.push('health');
  }

  if (themesFound.length === 0) {
    const words = lowercaseText.split(/\s+/)
      .filter(word => word.length > 4)
      .filter(word => !['about', 'these', 'their', 'there', 'which', 'would'].includes(word))
      .slice(0, 3);

    return words.length > 0 ? words.join(', ') : 'general information';
  }

  return themesFound.join(', ');
}


---
./src/lib/config.ts
---
// Configuration file for API keys and other environment variables

interface Config {
  // Google AI API key
  googleApiKey: string;

  // Gemini model name
  modelName: string;

  // OpenAI API key
  openaiApiKey: string;

  // OpenAI model names
  openaiModelName: string;
  openaiVisionModelName: string;

  // Add other configuration variables as needed
  debugMode: boolean;
}

// Function to get Google API key from localStorage
const getGoogleApiKeyFromStorage = (): string => {
  if (typeof window !== 'undefined') {
    try {
      return localStorage.getItem('gemini_api_key') || '';
    } catch (error) {
      console.warn('Error accessing localStorage:', error);
      return '';
    }
  }
  return '';
};

// Function to get OpenAI API key from localStorage
const getOpenAIApiKeyFromStorage = (): string => {
  if (typeof window !== 'undefined') {
    try {
      return localStorage.getItem('openai_api_key') || '';
    } catch (error) {
      console.warn('Error accessing localStorage:', error);
      return '';
    }
  }
  return '';
};

// Function to save Google API key to localStorage
export const saveGoogleApiKey = (apiKey: string): void => {
  if (typeof window !== 'undefined') {
    try {
      localStorage.setItem('gemini_api_key', apiKey);
    } catch (error) {
      console.error('Error saving to localStorage:', error);
    }
  }
};

// Function to save OpenAI API key to localStorage
export const saveOpenAIApiKey = (apiKey: string): void => {
  if (typeof window !== 'undefined') {
    try {
      localStorage.setItem('openai_api_key', apiKey);
    } catch (error) {
      console.error('Error saving to localStorage:', error);
    }
  }
};

// Default configuration
const config: Config = {
  // Get API key from localStorage if available, else use environment variable
  get googleApiKey() {
    return getGoogleApiKeyFromStorage() || (process.env.GOOGLE_API_KEY || '');
  },

  get openaiApiKey() {
    return getOpenAIApiKeyFromStorage() || (process.env.OPENAI_API_KEY || '');
  },

  // Gemini model name
  modelName: "gemini-2.5-flash-preview-04-17",

  // OpenAI model names
  openaiModelName: "gpt-4o",
  openaiVisionModelName: "gpt-4o",

  // Set to false for production, true for development without an API key
  debugMode: false
};

export default config;

---
./src/lib/utils.ts
---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

---
./src/pages/index.astro
---
---
import "../style/global.css";
import BlogPostPreview from "../components/BlogPostPreview.astro";
import ProjectPreview from "../components/ProjectPreview.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
const siteTitle = "Aadish Verma";

const allPosts = await Astro.glob("../content/posts/*.md");
const sortedPosts = allPosts
  .sort(
    (a, b) =>
      new Date(b.frontmatter.date).valueOf() -
      new Date(a.frontmatter.date).valueOf(),
  )
  .filter((p) => p.frontmatter.hidden !== true);
const allProjectPosts = await Astro.glob("../content/projects/*.md");
const sortedProjectPosts = allProjectPosts
  .sort(
    (a, b) =>
      new Date(b.frontmatter.date).valueOf() -
      new Date(a.frontmatter.date).valueOf(),
  )
  .filter((p) => p.frontmatter.hidden !== true);
---

<BaseLayout title="Aadish Verma" description="Yet another nerd.">
  <h2 class="pb-10 font-lora text-xl font-bold text-header">
    Hi 👋, I'm Aadish
  </h2>
  <div class="pb-10 font-lora">
    <p>
      <strong>Tools:</strong>
      <a href="/tools/latex">LaTeX to Markdown tool</a>・<a
        href="/tools/periodic">OC005 periodic table</a
      >
    </p>

    <p>
      Student at Stanford Online High School, passionate about really anything
      [but especially STEM]. A few notable things I've done:
    </p>

    <ul>
      <li>
        Won the OHS 2024 Labor Day Hackathon. I might write a blog post about it
        later :) [<a href="https://github.com/aadishv/doleofdoves">code ↗</a>]
      </li>

      <li>
        <a href="https://adventofcode.com/2024">Advent of Code ↗</a> 2024 participant.
        [<a href="https://github.com/aadishv/aoc">code ↗</a>]
      </li>

      <li>
        Lead coder for VEX V5 Robotics Competition team <a
          href="https://www.robotevents.com/teams/V5RC/315P">315P ↗</a
        > for Over Under and part of the High Stakes seasons. My code is unfortunately
        private, but I have made a <a
          href="https://github.com/aadishv/highstakes">public mirror ↗</a
        > of my High Stakes code available.
      </li>
    </ul>
  </div>
  <div class="pb-8">
    <h2 class="font-lora text-xl text-header">From the blog</h2>
    <a href="/blog" class="font-mono">
      {"Read more from the blog ->"}
    </a>
  </div>
  <div class="p-5">
    {sortedPosts.slice(0, 2).map((p) => <BlogPostPreview post={p} />)}
  </div>
  <div class="pb-8">
    <h2 class="font-lora text-xl text-header">Recent projects</h2>
    <a href="/projects" class="font-mono">
      {"See more projects ->"}
    </a>
  </div>
  <div class="p-5">
    {
      sortedProjectPosts
        .slice(0, 2)
        .map((p) => <ProjectPreview post={p} index={true} />)
    }
  </div>
</BaseLayout>


---
./src/pages/tools/chinese.astro
---
---
import "../../style/global.css";
import BaseLayout from "../../layouts/BaseLayout.astro";
import ChineseApp from "../../components/chinese/App.tsx";

const isDev = true; // import.meta.env.DEV; // remove this once the checklist is done
---

<BaseLayout title="Aadish's Chinese practice" description="" pt={0} p={0}>
  {isDev ? <ChineseApp client:only /> : <div>:P</div>}
</BaseLayout>


---
./src/pages/tools/latex.astro
---
---
import "../../style/global.css";
import BaseLayout from "../../layouts/BaseLayout.astro";
import LatexToImageApp from "../../components/LatexToImg.jsx";
---

<BaseLayout title="LaTeX to img" description="">
  <LatexToImageApp client:only />
</BaseLayout>


---
./src/pages/tools/periodic.astro
---
---
import BaseLayout from "../../layouts/BaseLayout.astro";
// import global.css
import "../../style/global.css";
import PeriodicTableApp from "../../components/periodic/App.jsx";
const siteTitle = "Aadish's periodic table";
---

<BaseLayout title={siteTitle} pt={14} p={0}>
  <PeriodicTableApp client:only />
</BaseLayout>


---
./src/pages/tools/slide.astro
---
---
import "../../style/global.css";
import BaseLayout from "../../layouts/BaseLayout.astro";
import App from "../../components/Slide.jsx";
---

<BaseLayout title="slide puzzle" description="" pt={0}>
  <App client:only />
</BaseLayout>


---
./src/pages/tools/study.astro
---
---
import "../../styles/globals.css";
import "../../style/global.css";
import BaseLayout from "../../layouts/BaseLayout.astro";
import StudyApp from "../../components/study/App.tsx";
---

<BaseLayout title="slide puzzle" description="">
  <StudyApp client:only />
</BaseLayout>


---
./src/pages/tools/vairc.astro
---
---
// import global.css
import "../../style/global.css";
// Import shadcn/ui global styles
import "../../styles/globals.css";
import VAIRCApp from "../../components/vairc/App.tsx";
const siteTitle = "3151A Dashboard";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={"3151A web dashboard"} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{siteTitle}</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lora:wght@400;500;600;700&family=Source+Sans+Pro:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body class="h-[100vh]">
    <main class="h-full w-full">
      <VAIRCApp client:only />
    </main>
  </body>
</html>


---
./src/pages/projects/[slug].astro
---
---
import "../../style/global.css";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getSlugFromPath } from "../../utils/get-slug-from-path";
import { parseISO, format } from "date-fns";
export async function getStaticPaths({ paginate, rss }) {
  const allPosts = await Astro.glob("../../content/projects/*.md");

  const paths = allPosts.map((post) => {
    const slug = getSlugFromPath(post.file);
    return {
      params: {
        slug,
      },
      props: { post },
    };
  });

  return paths;
}

const { post } = Astro.props;

// Blog post header functionality
const date = parseISO(post.frontmatter.date);
const formatted = format(date, "LLLL d, yyyy");
---

<BaseLayout title={post.frontmatter.title}>
  <article
    class="prose font-mono text-black prose-headings:font-lora prose-headings:font-medium prose-a:font-mono prose-a:text-[0.94rem] prose-a:decoration-header2 prose-code:font-medium"
  >
    <main>
      <div class="text-xl">
        <h2
          class="m-0 p-0 font-lora font-bold text-header"
          style={"margin-block-end: 0; margin-block-start: 1rem;"}
        >
          {post.frontmatter.title}
        </h2>
        <time datetime={date.toString()} class="font-mono text-gray-500"
          >{formatted}</time
        >
      </div>
      <post.Content />
    </main>
  </article>
</BaseLayout>


---
./src/pages/projects/index.astro
---
---
import "../../style/global.css";
import ProjectPreview from "../../components/ProjectPreview.astro";

import BaseLayout from "../../layouts/BaseLayout.astro";

const allPosts = await Astro.glob("../../content/projects/*.md");
const sortedPosts = allPosts
  .sort(
    (a, b) =>
      new Date(b.frontmatter.last_updated).valueOf() -
      new Date(a.frontmatter.last_updated).valueOf(),
  )
  .filter((p) => p.frontmatter.hidden !== true);
---

<BaseLayout title="My projects">
  <div class="pb-8">
    <h2 class="font-lora text-xl text-header">My projects</h2>
    <a href="/" class="font-mono">
      {"<- back to home"}
    </a>
  </div>

  <div class="pl-5 pr-5">
    {sortedPosts.map((p) => <ProjectPreview post={p} />)}
  </div>
</BaseLayout>


---
./src/pages/blog/[slug].astro
---
---
import "../../style/global.css";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getSlugFromPath } from "../../utils/get-slug-from-path";
import { parseISO, format } from "date-fns";
export async function getStaticPaths({ paginate, rss }) {
  const allPosts = await Astro.glob("../../content/posts/*.md");

  const paths = allPosts.map((post) => {
    const slug = getSlugFromPath(post.file);
    return {
      params: {
        slug,
      },
      props: { post },
    };
  });

  return paths;
}

const { post } = Astro.props;
const myProseSetup = "";
// Blog post header functionality
const date = parseISO(post.frontmatter.date);
const formatted = format(date, "LLLL d, yyyy");
---

<BaseLayout title={post.frontmatter.title}>
  <article
    class="prose font-mono text-black prose-headings:font-lora prose-headings:font-medium prose-a:font-mono prose-a:text-[0.94rem] prose-a:decoration-header2 prose-code:font-medium"
  >
    <main>
      <div class="text-xl">
        <h2
          class="m-0 p-0 font-lora font-bold text-header"
          style={"margin-block-end: 0; margin-block-start: 1rem;"}
        >
          {post.frontmatter.title}
        </h2>
        <time datetime={date.toString()} class="my-auto font-mono text-gray-500"
          >{formatted}</time
        >
        {
          post.frontmatter.hidden && (
            <span class="my-auto ml-2 inline-block rounded-full bg-gray-200 px-2 text-base font-semibold">
              UNLISTED
            </span>
          )
        }
      </div>
      <post.Content />
    </main>
  </article>
</BaseLayout>


---
./src/pages/blog/index.astro
---
---
import "../../style/global.css";
import BlogPostPreview from "../../components/BlogPostPreview.astro";
import Header from "../../components/Header.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";

const siteTitle = "Aadish's Blog";

const allPosts = await Astro.glob("../../content/posts/*.md");
const sortedPosts = allPosts
  .sort(
    (a, b) =>
      new Date(b.frontmatter.date).valueOf() -
      new Date(a.frontmatter.date).valueOf(),
  )
  .filter((p) => p.frontmatter.hidden !== true);
---

<BaseLayout title={siteTitle}>
  <div class="pb-8">
    <h2 class="font-lora text-xl text-header">From the blog</h2>
    <a href="/" class="text font-mono">
      {"<- back to home"}
    </a>
  </div>
  <div class="pl-5 pr-5">
    {sortedPosts.map((p) => <BlogPostPreview post={p} />)}
  </div>
</BaseLayout>
---
